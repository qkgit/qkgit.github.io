<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot异步任务与定时任务实战</title>
    <url>/2020/11/01/SpringBoot%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h3 id="Spring-Boot-异步任务实战"><a href="#Spring-Boot-异步任务实战" class="headerlink" title="Spring Boot 异步任务实战"></a>Spring Boot 异步任务实战</h3><ul>
<li><p>在项目开发中，绝大多数情况下是通过同步方式处理业务逻辑的，但是比如批量处理数据，批量发送邮件，批量发送短信等操作，容易造成堵塞的情况，之前大部分都是使用多线程来完成此类任务。而在Spring 3+之后，就已经内置了<code>@Async</code>注解来完美解决这个问题，从而提高效率。</p>
<a id="more"></a>
</li>
<li><p>使用注解：</p>
<ul>
<li>@EnableAsync 启动类上开启基于注解的异步任务</li>
<li>@Aysnc 标识的方法会异步执行</li>
</ul>
</li>
<li><p>异步任务实战操作如下：</p>
<ol>
<li><p>新建web项目</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/X8XSoDsmf5Pc.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/X8XSoDsmf5Pc.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/X8XSoDsmf5Pc.png"></a></p>
</li>
<li><p>创建AsyncServies</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**异步处理批量操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Qi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020/11/1 18:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//批量新增操作</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//模拟新增数据</span></span><br><span class="line">            Thread.sleep(<span class="number">3</span>*<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"批量新增数据完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<ol start="3">
<li><p>AsyncController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        asyncService.batchAdd();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>在启动类上开启<code>@EnableAsync</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot09TaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot09TaskApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h3 id="Spring-Boot-定时任务调度实战"><a href="#Spring-Boot-定时任务调度实战" class="headerlink" title="Spring Boot 定时任务调度实战"></a>Spring Boot 定时任务调度实战</h3><ul>
<li><p>在项目开发中，经常需要执行一些定时任务，比如 每月1号凌晨需要汇总上个月的数据分析报表；每天凌晨分析前一天的日志信息等定时操作。Spring为我们提供了异步执行定时任务调度的方式。</p>
</li>
<li><p>使用的注解;</p>
<ul>
<li><p><code>@EnableScheduling</code> 启动类上开启基于注解的定时任务</p>
</li>
<li><p><code>@Scheduling</code> 标识的方法会进行定时处理</p>
<ul>
<li><p>需要通过cron属性来指定  cron表达式：<code>秒 分 时 日 月 星期几</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledService</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 秒 分 时 日 月 星期几</span></span><br><span class="line"><span class="comment">	 * 比如: "0 * * * * MON-FRI" 周一到周五, 每次0秒执行(即每分钟执行一次)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Scheduled</span>(cron = <span class="string">"*/3 * * * * MON-FRI"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"数据统计第"</span> + count++ + <span class="string">"次"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>cron表达式</p>
<table>
<thead>
<tr>
<th>位置</th>
<th>取值范围</th>
<th>可指定的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td>秒</td>
<td>0-59</td>
<td>，- * /</td>
</tr>
<tr>
<td>分</td>
<td>0-59</td>
<td>，- * /</td>
</tr>
<tr>
<td>小时</td>
<td>0-23</td>
<td>，- * /</td>
</tr>
<tr>
<td>日期</td>
<td>1-31</td>
<td>，- * / ？ L W C</td>
</tr>
<tr>
<td>月份</td>
<td>1-12</td>
<td>，- * /</td>
</tr>
<tr>
<td>星期</td>
<td>0-7或SUN-SAT 0和7都是周日 1-6是周一到周六</td>
<td>，- * /  ？L C #</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th>代表含义</th>
</tr>
</thead>
<tbody><tr>
<td>，</td>
<td>枚举，一个位置上指定多个值，以逗号<code>,</code>分隔</td>
</tr>
<tr>
<td>-</td>
<td>区间</td>
</tr>
<tr>
<td>*</td>
<td>任意</td>
</tr>
<tr>
<td>/</td>
<td>步长，每隔多久执行一次</td>
</tr>
<tr>
<td>？</td>
<td>日/星期冲突匹配，指定哪个值，另一个就是？，<br />比如：<code>***?*1</code>每周1执行，则日用<code>?</code>不能用<code>*</code>,不是每一天都是周一；<br /><code>****2*?</code>每月2号执行，则星期不能用*</td>
</tr>
<tr>
<td>L</td>
<td>最后</td>
</tr>
<tr>
<td>W</td>
<td>工作日</td>
</tr>
<tr>
<td>C</td>
<td>和calengar联系后计算过的值</td>
</tr>
<tr>
<td>#</td>
<td>这个月的第几个星期几， 4#2，第2个星期4</td>
</tr>
</tbody></table>
</li>
<li><p>在线生成cron表达式  <a href="http://cron.qqe2.com/" target="_blank" rel="noopener">http://cron.qqe2.com/</a></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">1-5</span> <span class="string">* * * * 1到5秒，每秒都触发任务</span></span><br><span class="line"><span class="meta">*/5</span> <span class="string">* * * * 每隔5秒执行一次</span></span><br><span class="line"><span class="attr">0</span> <span class="string">*/1 * * * 每隔1分钟执行一次</span></span><br><span class="line"><span class="attr">0</span> <span class="string">0 5-15 * * 每天5-15点整点触发</span></span><br><span class="line"><span class="attr">0</span> <span class="string">0-5 14 * * 在每天下午2点到下午2:05期间的每1分钟触发</span></span><br><span class="line"><span class="attr">0</span> <span class="string">0/5 14 * * 在每天下午2点到下午2:55期间的每5分钟触发</span></span><br><span class="line"><span class="attr">0</span> <span class="string">0/5 14,18 * * 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span></span><br><span class="line"><span class="attr">0</span> <span class="string">0/30 9-17 * * 朝九晚五工作时间内每半小时</span></span><br><span class="line"><span class="attr">0</span> <span class="string">0 12 ? * WED 表示每个星期三中午12点</span></span><br><span class="line"><span class="attr">0</span> <span class="string">10,44 14 ? 3 WED 每年三月的星期三的下午2:10和2:44触发</span></span><br><span class="line"><span class="attr">0</span> <span class="string">0 23 L * ? 每月最后一天23点执行一次</span></span><br><span class="line"><span class="attr">0</span> <span class="string">15 10 LW * ? 每个月最后一个工作日的10点15分0秒触发任务</span></span><br><span class="line"><span class="attr">0</span> <span class="string">15 10 ? * 5#3 每个月第三周的星期五的10点15分0秒触发任务</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 整合缓存实战</title>
    <url>/2020/11/01/Spring%20Boot%20%E6%95%B4%E5%90%88%E7%BC%93%E5%AD%98%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h3 id="缓存-简介"><a href="#缓存-简介" class="headerlink" title="缓存 简介"></a>缓存 简介</h3><ul>
<li>缓存是每一个系统都应该考虑的功能，它用于加速系统的访问，以及提速系统的性能。比如：<ul>
<li>经常访问的高频热点数据：<ul>
<li>电商网站的商品信息：每次查询数据库耗时，可以引入缓存。</li>
<li>微博阅读量、点赞数、热点话题等</li>
</ul>
</li>
<li>临时性的数据：发送手机验证码，1分钟有效，过期则删除，存数据库负担有点大，这些临时性的数据也可以放到缓存中，直接从缓存中存取数据。</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h3 id="Spring-Boot整合缓存"><a href="#Spring-Boot整合缓存" class="headerlink" title="Spring Boot整合缓存"></a>Spring Boot整合缓存</h3><ul>
<li><p>spring从3.1后定义了org.springframework.cache.CacheManager和org.springframework.cache.Cache接口来统一不同的缓存技术；</p>
<ul>
<li><p><code>CacheManager</code>  缓存管理器，用于管理各种Cache缓存组件</p>
</li>
<li><p><code>Cache</code> 定义了缓存的各种操作，Spring在Cache接口下提供了各种xxxCache的实现；</p>
<p>比如EhCacheCache，RedisCache，ConcurrentMapCache…….</p>
</li>
</ul>
</li>
<li><p>Spring提供了缓存注解：@EnableCaching、@Cacheable、@CachePut</p>
</li>
</ul>
<p><strong>整合缓存步骤：</strong></p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/nKQ@XblBduMR.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/nKQ@XblBduMR.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/nKQ@XblBduMR.png"></a></p>
<ol>
<li><p>引入缓存启动器：<code>spring-boot-start-cache</code></p>
</li>
<li><p>创建cache数据库，导入bill.sql与实体对象，创建注解版mapper、service与Controller</p>
</li>
<li><p>@EnableCaching：在启动类上，开启基于注解的缓存</p>
</li>
<li><p>@Cacheable：标记在方法上，返回的结果会进行缓存（先查缓存中的结果，没有则调用方法并将结果放到缓存中）</p>
<ul>
<li><p>属性：</p>
<ul>
<li><p>value/cacheNames：缓存中的名字</p>
</li>
<li><p>key：作为缓存中的key值，可自己使用SqEL表达式指定（不指定就是参数值），缓存结果是方法返回值</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>methodName</td>
<td>当前被调用的方法名</td>
<td>#root.methodName</td>
</tr>
<tr>
<td>target</td>
<td>当前被调用的目标对象</td>
<td>#root.target</td>
</tr>
<tr>
<td>targetClass</td>
<td>当前被调用的目标对象类</td>
<td>#root.targetClass</td>
</tr>
<tr>
<td>args</td>
<td>当前被调用的方法的参数列表</td>
<td>#root.args[0]</td>
</tr>
<tr>
<td>caches</td>
<td>当前方法调用使用的缓存列表<br />（如@Cacheable(value={“cache1”,”cache2”})）,则有两个cache</td>
<td>#root.caches[0].name</td>
</tr>
<tr>
<td>argumentname</td>
<td>方法参数的名字，可以直接#参数名，也可以使用#p0或#a0的形式，0代表参数的索引</td>
<td>#iban 、#a0、#p0</td>
</tr>
<tr>
<td>result</td>
<td>方法执行后的返回值（仅当方法执行之后的判断有效，在@CachePut使用于更新数据后可用）</td>
<td>#result</td>
</tr>
</tbody></table>
</li>
</ul>
<ol start="5">
<li><p>@CachePut ：保证方法被调用后，又将对应缓存中的数据更新（先调用方法，调完方法再将结果放到缓存）</p>
<p>比如：修改了表中某条数据后，同时更新缓存中的数据，使得别人查询这条更新的数据时直接从缓存中获取 </p>
<ul>
<li><p>测试更新User数据效果： </p>
<ol>
<li>先查询id=1的用户，放在缓存中； </li>
<li>后面查询id=1的用户直接从缓存中查询; </li>
<li>更新id=1的用户，同时会更新缓存数据; </li>
<li>再查询id=1的用户应该是更新后的数据，是从缓存中查询，因为在更新时同时再新了缓存数据</li>
</ol>
<p><mark>注意：需要指定key属性<code>key=&quot;#user.id&quot;</code>参数对象的id或<code>key=&quot;#result.id&quot;</code>返回值对象id</mark></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">         <span class="meta">@Autowired</span></span><br><span class="line">         UserMapper userMapper;</span><br><span class="line">         </span><br><span class="line">    <span class="meta">@Cacheable</span>(cacheNames = <span class="string">"user"</span>,key = <span class="string">"#id"</span>)</span><br><span class="line">         <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        User user = userMapper.getUserById(id);</span><br><span class="line">             <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">         <span class="comment">//必须指定一个缓存名称不然报500错误   key值必须对应好否则无法正常修改缓存数据</span></span><br><span class="line">    <span class="meta">@CachePut</span>(cacheNames = <span class="string">"user"</span>,key = <span class="string">"#user.id"</span>)</span><br><span class="line">         <span class="function"><span class="keyword">public</span>  User <span class="title">updateUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">             userMapper.updateUser(user);</span><br><span class="line">             <span class="keyword">return</span> user;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<pre><code>6. @CacheEvict：清除缓存

   - 属性
     - key：指要清除的数据，如 key=&quot;#id&quot;
     - allEntries =true : 指定清除这个缓存中所有数据。
     - beforeInvocation = true : true在方法之前执行；默认false在方法之后执行,出现异常则不会清除缓存

   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict</span>(cacheNames = <span class="string">"user"</span>,key = <span class="string">"#id"</span>,allEntries = <span class="keyword">true</span>,beforeInvocation = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">deleteUserById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    userMapper.deleteUserById(id);</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



7. @CacheConfig 指定缓存公共属性值

   @CacheConfig(cacheNames = “user”) 指定在类上，其他方法上就不需要写缓存名。

**底层原理分析：**

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0 = "org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration"</span></span><br><span class="line"><span class="comment">     * 1 = "org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration"</span></span><br><span class="line"><span class="comment">     * 2 = "org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration"</span></span><br><span class="line"><span class="comment">     * 3 = "org.springframework.boot.autoconfigure.cache.HazelcastCacheConfiguration"</span></span><br><span class="line"><span class="comment">     * 4 = "org.springframework.boot.autoconfigure.cache.InfinispanCacheConfiguration"</span></span><br><span class="line"><span class="comment">     * 5 = "org.springframework.boot.autoconfigure.cache.CouchbaseCacheConfiguration"</span></span><br><span class="line"><span class="comment">     * 6 = "org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration"</span></span><br><span class="line"><span class="comment">     * 7 = "org.springframework.boot.autoconfigure.cache.CaffeineCacheConfiguration"</span></span><br><span class="line"><span class="comment">     * 8 = "org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration"  [默认缓存]</span></span><br><span class="line"><span class="comment">     * 9 = "org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration"</span></span><br><span class="line"><span class="comment">     * 分析源码：</span></span><br><span class="line"><span class="comment">     * 1.默认采用的是SimpleCacheConfiguration 使用 ConcurrentMapCacheManager</span></span><br><span class="line"><span class="comment">     * 2. getCache 获取的是 ConcurrentMapCache 缓存对象进行存取数据,它使用ConcurrentMap&lt;Object, Object&gt;对</span></span><br><span class="line"><span class="comment">    象进行缓存数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Cacheable</span>(cacheNames = "user")</span></span><br><span class="line"><span class="comment">     * 第一次请求时:</span></span><br><span class="line"><span class="comment">* 3.当发送第一次请求时,会从cacheMap.get(name)中获取有没有ConcurrentMapCache缓存对象,如果没有则创建</span></span><br><span class="line"><span class="comment">    出来,</span></span><br><span class="line"><span class="comment">* 并且创建出来的key就是通过<span class="doctag">@Cacheable</span>(cacheNames = "user")标识的name值</span></span><br><span class="line"><span class="comment">     * 4.接着会从ConcurrentMapCache里面调用lookup获取缓存数据,通过key值获取的,</span></span><br><span class="line"><span class="comment">* 默认采用的是service方法中的参数值,如果缓存中没有获取到,则调用目标方法进行获取数据,获取之后则再将它放到</span></span><br><span class="line"><span class="comment">    缓存中(key=参数值,value=返回值)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 第二次请求:</span></span><br><span class="line"><span class="comment">     * 5. 如果再次调用 则还是先ConcurrentMapCacheManager.getCache()获取缓存对象,如果有则直接返回,如果没有</span></span><br><span class="line"><span class="comment">    则创建</span></span><br><span class="line"><span class="comment">     * 6. 然后再调用 ConcurrentMapCache.lookup方法从缓存中获取数据, 如果缓存有数据则直接响应回去,不会再去调</span></span><br><span class="line"><span class="comment">    用目标方法,</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 第三次请求与第二次请求一样.</span></span><br><span class="line"><span class="comment">     * 如果缓存中没有缓存管理器,则与第一次请求一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 邮件发送实战</title>
    <url>/2020/11/01/Spring%20Boot%20%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h3 id="邮件发送环境准备"><a href="#邮件发送环境准备" class="headerlink" title="邮件发送环境准备"></a>邮件发送环境准备</h3><p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/ijjx1MyGdcjV.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/ijjx1MyGdcjV.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/ijjx1MyGdcjV.png"></a></p>
<a id="more"></a>

<p>实战操作步骤：</p>
<ol>
<li><p>新建项目</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/CYIsOxythGWL.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/CYIsOxythGWL.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/CYIsOxythGWL.png"></a></p>
</li>
<li><p>引入邮件启动器：<code>spring-boot-starter-mail</code></p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>Spring Boot提供了自动配置类<code>MailSenderAutoConfiguration</code></p>
</li>
<li><p>在application.properties中配置邮箱信息，参考MailProperties</p>
</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">188888888@qq.com</span></span><br><span class="line"><span class="comment">#授权码</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">"QQ邮箱生成的授权码"</span></span><br><span class="line"><span class="comment">#发送邮件服务器</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment">#需要开启ssl安全连接</span></span><br><span class="line"><span class="meta">spring.mail.properties.smtp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>密码不写在配置中，在QQ邮箱中进行获取授权码，如下操作</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/8G8MyZ5vijmX.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/8G8MyZ5vijmX.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/8G8MyZ5vijmX.png"></a></p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/2zOdqGzVtpZr.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/2zOdqGzVtpZr.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/2zOdqGzVtpZr.png"></a></p>
</li>
</ol>
<h3 id="邮件发送实战操作"><a href="#邮件发送实战操作" class="headerlink" title="邮件发送实战操作"></a>邮件发送实战操作</h3><ol>
<li><p>Spring Boot自动装配JavaMailSenderImpl进行发送邮件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot10MailApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	JavaMailSenderImpl javaMailSender;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">testSimpleMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//封装简单的邮件内容</span></span><br><span class="line">		SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">		<span class="comment">//邮件主题</span></span><br><span class="line">		message.setSubject(<span class="string">"邮件测试"</span>);</span><br><span class="line">		message.setText(<span class="string">"测试内容"</span>);</span><br><span class="line">		<span class="comment">//发件人</span></span><br><span class="line">		message.setFrom(<span class="string">"188888888@qq.com"</span>);</span><br><span class="line">		<span class="comment">//收件人</span></span><br><span class="line">		message.setTo(<span class="string">"177777777@163.com"</span>);</span><br><span class="line"></span><br><span class="line">		javaMailSender.send(message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//发送复杂邮件带附件和html的邮件</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMimeMail</span><span class="params">()</span><span class="keyword">throws</span> MessagingException</span>&#123;</span><br><span class="line">		<span class="comment">//创建一个发送复杂消息的对象</span></span><br><span class="line">		MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">		<span class="comment">//通过消息帮助对象 来设置发送的内容</span></span><br><span class="line">		MimeMessageHelper messageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage,<span class="keyword">true</span>);</span><br><span class="line">		<span class="comment">//邮件主题</span></span><br><span class="line">		messageHelper.setSubject(<span class="string">"测试复杂邮件"</span>);</span><br><span class="line">		<span class="comment">//第二个参数为true 表示是html</span></span><br><span class="line">		messageHelper.setText(<span class="string">"&lt;h2 style='color:red'&gt;测试HTML内容&lt;/h2&gt;"</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//上传文件（文件名，file或io对象）</span></span><br><span class="line">		messageHelper.addAttachment(<span class="string">"1.jpg"</span>,<span class="keyword">new</span> File(<span class="string">"D:\\1.jpg"</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">//发件人 收件人</span></span><br><span class="line">		messageHelper.setFrom(<span class="string">"188888888@qq.com"</span>);</span><br><span class="line">		messageHelper.setTo(<span class="string">"177777777@163.com"</span>);</span><br><span class="line"></span><br><span class="line">		javaMailSender.send(mimeMessage);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 整合Redis实战</title>
    <url>/2020/11/02/SpringBoot%E6%95%B4%E5%90%88Redis%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<ul>
<li>在实际开发中，一般使用缓存中间件：redis、ehcache、memcache；导入了对应的组件依赖，就可以使用对应的缓存。</li>
<li>使用Spring Boot整合Redis作为缓存</li>
</ul>
<h3 id="安装Redis服务与客户端"><a href="#安装Redis服务与客户端" class="headerlink" title="安装Redis服务与客户端"></a>安装Redis服务与客户端</h3><ul>
<li>Redis中文官网：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></li>
<li>Redis下载：<ul>
<li>Windows（微软开发维护的）：<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a></li>
<li>Linux版本：<a href="http://download.redis.io/releases/" target="_blank" rel="noopener">http://download.redis.io/releases/</a></li>
</ul>
</li>
</ul>
<a id="more"></a>

<ul>
<li>Redis直接解压 Redis-x64-3.2.100.zip 即可，点击以下 redis-server.exe, 默认端口号：6379</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot的Web开发(2)</title>
    <url>/2020/10/02/Spring%20Boot%E7%9A%84Web%E5%BC%80%E5%8F%91(2)/</url>
    <content><![CDATA[<h3 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h3><blockquote>
<p>Spring Boot官方不推荐使用JSP,因为内嵌的Tomcat、Jetty容器不支持以jar形式运行JSP。Spring Boot中提供了大量模板引擎，包含Freemarker、Mastache、Thymeleaf等。而Spring Boot官方推荐使用Thymeleaf作为模板引擎，因为Thymeleaf提供了完美的SpringMVC的支持。</p>
</blockquote>
<a id="more"></a>

<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/a2hdXt5oO^LZ.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/a2hdXt5oO%5ELZ.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/a2hdXt5oO^LZ.png"></a></p>
<h4 id="引入Thymeleaf"><a href="#引入Thymeleaf" class="headerlink" title="引入Thymeleaf"></a>引入Thymeleaf</h4><ul>
<li><p><code>pom.xml</code>加入Thymeleaf</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf 模板启动器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="使用Thymeleaf"><a href="#使用Thymeleaf" class="headerlink" title="使用Thymeleaf"></a>使用Thymeleaf</h4><ul>
<li><p>模板文件放在哪里？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.thymeleaf"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>通过对spring-boot-autoconfigure-2.3.4.RELEASE.jar!\org\springframework\boot\autoconfigure\thymeleaf\ThymeleafProperties.class分析发现，将HTML页面放到<strong>classpath:/templates</strong>目录下，Thymeleaf就能自动渲染</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/execute"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">(Map&lt;String,Object&gt;map)</span></span>&#123;</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"Thymeleaf"</span>);</span><br><span class="line">        <span class="comment">//没有使用@ResponseBody classpath:/templates/success.html</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建controller层进行测试，在浏览器发送<a href="http://localhost:8080/execute后，通过代码转到classpath:/templates/success.html" target="_blank" rel="noopener">http://localhost:8080/execute后，通过代码转到classpath:/templates/success.html</a></p>
</li>
</ul>
</li>
<li><p>导入Thymeleaf的名称空间</p>
<p>在html页面加上以下名称空间，使用Thymeleaf时就有语法提示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>演示Thymeleaf语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th:text 会将获取到的数据写到标签体中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span>这里显示默认值 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="Thymeleaf语法"><a href="#Thymeleaf语法" class="headerlink" title="Thymeleaf语法"></a>Thymeleaf语法</h4><h5 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h5><ul>
<li><p>参考Thymeleaf官方文档 <code>10 Attribute Precedence</code></p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>属性名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>th:insert<br />th:replace</td>
<td>引入片段，与th:fragment声明组合使用；类似于jsp:include</td>
</tr>
<tr>
<td>2</td>
<td>th:each</td>
<td>遍历，类似于c:forEach</td>
</tr>
<tr>
<td>3</td>
<td>th:if<br />th:unless<br />th:switch<br />th:case</td>
<td>条件判断，类似于c:if</td>
</tr>
<tr>
<td>4</td>
<td>th:object<br />th:with</td>
<td>声明变量，类似于c:set</td>
</tr>
<tr>
<td>5</td>
<td>th:attr<br />th:attrprepend<br />th:attrappend</td>
<td>修改任意属性，prepend前面追加，append后面追加</td>
</tr>
<tr>
<td>6</td>
<td>th:value<br />th:href<br />th:src<br />…</td>
<td>修改任意HTML原生属性值</td>
</tr>
<tr>
<td>7</td>
<td>th:text<br />th:utext</td>
<td>修改标签体中的内容，<br />th:text转义特殊字符，即h1标签以文本显示出来<br />th:utext不转义特殊字符，即h1标签展现出本来效果</td>
</tr>
<tr>
<td>8</td>
<td>th:fragment</td>
<td>声明片段</td>
</tr>
<tr>
<td>9</td>
<td>th:remove</td>
<td>移除片段</td>
</tr>
</tbody></table>
<h5 id="标准表达式语法"><a href="#标准表达式语法" class="headerlink" title="标准表达式语法"></a>标准表达式语法</h5><ul>
<li><p>参考Thymeleaf官方文档<code>4 Standard Expression Syntax</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">一、Simple expressions（表达式语法）</span><br><span class="line">1. Variable Expressions(变量表达式): $&#123;...&#125; （参考： 4.2 Variables）</span><br><span class="line">	1)、获取变量值；使用OGNL表达式；</span><br><span class="line">	2）、获取对象的属性, 调用方法</span><br><span class="line">	3）、使用内置的基本对象：</span><br><span class="line">		#ctx : the context object.(当前上下文对象)</span><br><span class="line">		#vars: the context variables.(当前上下文里的变量)</span><br><span class="line">		#locale : the context locale. (当前上下文里的区域信息)</span><br><span class="line">		下面是Web环境下的隐式对象</span><br><span class="line">		#request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">		#response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">		#session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">		#servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="line">		示例: $&#123;session.foo&#125; (用法参考: 18 Appendix A: Expression Basic Objects)</span><br><span class="line">		4）、使用内置的工具对象：(用法参考: 19 Appendix B: Expression Utility Objects)</span><br><span class="line">		#execInfo : information about the template being processed.</span><br><span class="line">		#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span><br><span class="line">		#uris : methods for escaping parts of URLs/URIs</span><br><span class="line">		#conversions : methods for executing the configured conversion service (if any).</span><br><span class="line">		#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">		#calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="line">		#numbers : methods for formatting numeric objects.</span><br><span class="line">		#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="line">		#objects : methods for objects in general.</span><br><span class="line">		#bools : methods for boolean evaluation.</span><br><span class="line">		#arrays : methods for arrays.</span><br><span class="line">		#lists : methods for lists.</span><br><span class="line">		#sets : methods for sets.</span><br><span class="line">		#maps : methods for maps.</span><br><span class="line">		#aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="line">		#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an</span><br><span class="line">iteration).</span><br><span class="line">2. Selection Variable Expressions(选择表达式): *&#123;...&#125;（参考：4.3 Expressions on selections）</span><br><span class="line">	1）、和$&#123;&#125;在功能上是一样， 额外新增：配合 th:object 使用</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span></span><br><span class="line">		   省得每次写$&#123;session.user.firstName&#125;, 直接取出对象，然后写对象名即可</span><br><span class="line">		   <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		   <span class="tag">&lt;<span class="name">p</span>&gt;</span>Email: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;email&#125;"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">3. Message Expressions（获取国际化内容）: #&#123;...&#125; （参考：4.1 Messages）</span><br><span class="line">4. Link URL Expressions（定义URL）: @&#123;...&#125; （参考：4.4 Link URLs）</span><br><span class="line">5. Fragment Expressions（片段引用表达式）: ~&#123;...&#125; （参考：4.5 Fragments）</span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;commons :: main&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">二、Literals（字面量） （参考： 4.6 Literals）</span><br><span class="line">	1. Text literals: 'one text' , 'Another one!' ,…</span><br><span class="line">	2. Number literals: 0 , 34 , 3.0 , 12.3 ,…</span><br><span class="line">	3. Boolean literals: true , false</span><br><span class="line">	4. Null literal: null</span><br><span class="line">	5. Literal tokens: one , sometext , main ,…</span><br><span class="line">三、Text operations（文本操作） （参考： 4.7 Appending texts）</span><br><span class="line">	1. String concatenation: +</span><br><span class="line">	2. Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">四、Arithmetic operations（数学运算） （参考： 4.9 Arithmetic operations）</span><br><span class="line">	1. Binary operators: + , - , * , / , %</span><br><span class="line">	2. Minus sign (unary operator): -</span><br><span class="line">五、Boolean operations（布尔运算）</span><br><span class="line">	1. Binary operators: and , or</span><br><span class="line">	2. Boolean negation (unary operator): ! , not</span><br><span class="line">五、Comparisons and equality（比较运算） （参考： 4.10 Comparators and Equality）</span><br><span class="line">	1. Comparators: &gt; , <span class="tag">&lt; , &gt;</span>= , <span class="tag">&lt;<span class="name">=</span> ( <span class="attr">gt</span> , <span class="attr">lt</span> , <span class="attr">ge</span> , <span class="attr">le</span> )</span></span><br><span class="line"><span class="tag">	<span class="attr">2.</span> <span class="attr">Equality</span> <span class="attr">operators:</span> == <span class="string">,</span> != <span class="string">(</span> <span class="attr">eq</span> , <span class="attr">ne</span> )</span></span><br><span class="line"><span class="tag">六、<span class="attr">Conditional</span> <span class="attr">operators</span>(条件表达式;三元运算符) （参考： <span class="attr">4.11</span> <span class="attr">Conditional</span> <span class="attr">expressions</span>）</span></span><br><span class="line"><span class="tag">	<span class="attr">1.</span> <span class="attr">If-then:</span> (<span class="attr">if</span>) ? (<span class="attr">then</span>)</span></span><br><span class="line"><span class="tag">	<span class="attr">2.</span> <span class="attr">If-then-else:</span> (<span class="attr">if</span>) ? (<span class="attr">then</span>) <span class="attr">:</span> (<span class="attr">else</span>)</span></span><br><span class="line"><span class="tag">	<span class="attr">3.</span> <span class="attr">Default:</span> (<span class="attr">value</span>) ?<span class="attr">:</span> (<span class="attr">defaultvalue</span>)</span></span><br><span class="line"><span class="tag">七、<span class="attr">Special</span> <span class="attr">tokens</span>（特殊操作） (参考： <span class="attr">4.13</span> <span class="attr">The</span> <span class="attr">No-Operation</span> <span class="attr">token</span>)</span></span><br><span class="line"><span class="tag">	<span class="attr">1.</span> <span class="attr">No-Operation:</span> <span class="attr">_</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="实例代码演示"><a href="#实例代码演示" class="headerlink" title="实例代码演示"></a>实例代码演示</h4><h5 id="声明与引入公共片段"><a href="#声明与引入公共片段" class="headerlink" title="声明与引入公共片段"></a>声明与引入公共片段</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>公共片段<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过th:fragment声明代码片段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"header_common"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">           这是th:fragment声明公共片段</span><br><span class="line">       <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过选择器声明--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header_common_id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            这是id声明公共片段</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th:text 会将获取到的数据写到标签体中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span>这里显示默认值 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入公共代码片段--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式一：</span></span><br><span class="line"><span class="comment">    header：公共片段所在模板的文件名</span></span><br><span class="line"><span class="comment">    header_common：声明代码片段名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"header :: header_common"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式二：</span></span><br><span class="line"><span class="comment">    header：公共片段所在模板的文件名</span></span><br><span class="line"><span class="comment">    #header_common_id：声明代码的id值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:replace</span>=<span class="string">"header :: #header_common_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    th:insert 和 th:replace的区别</span></span><br><span class="line"><span class="comment">    th:insert和th:replace都可以引入片段，两者的区别在于</span></span><br><span class="line"><span class="comment">    th:insert： 保留引入时使用的标签</span></span><br><span class="line"><span class="comment">    th:replace：不保留引入时使用的标签, 将声明片段直接覆盖当前引用标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:insert</span>=<span class="string">"header :: #header_common_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="迭代th-each"><a href="#迭代th-each" class="headerlink" title="迭代th:each"></a>迭代<code>th:each</code></h5><ul>
<li><p>常用迭代方式</p>
<ul>
<li><p>HelloConller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/study"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">study</span><span class="params">(Map&lt;String,Object&gt;map, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    List&lt;User&gt;userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">"小梦"</span>,<span class="number">1</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">"小李"</span>,<span class="number">2</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">"小张"</span>,<span class="number">1</span>));</span><br><span class="line">    map.put(<span class="string">"userList"</span>,userList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"study"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>study.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:each作用在哪个标签上面，对应的就会根据它的值迭代多少次--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user :$&#123;userList&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.username&#125;"</span>&gt;</span>username<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.gender == 1 ? '女':'男'&#125;"</span>&gt;</span>未知<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--作用在同一标签上，每次迭代生成一个当前标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"user :$&#123;userList&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>获取迭代状态</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>总数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>奇偶<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>是否为第一个元素<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>是否为最后一个元素<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           user : 第1个值,代表每次迭代出对象,名字任意取</span></span><br><span class="line"><span class="comment">           iterStat : 第2个值,代表每次迭代器内置对象, 名字任意取, 并有如下属性:</span></span><br><span class="line"><span class="comment">               index : 当前迭代下标 0 开始</span></span><br><span class="line"><span class="comment">               count : 当前迭代下标 1 开始</span></span><br><span class="line"><span class="comment">               size : 获取总记录数</span></span><br><span class="line"><span class="comment">               current : 当前迭代出的对象</span></span><br><span class="line"><span class="comment">               even/odd : 当前迭代是偶数还是奇数 (1开始算,返回布尔值)</span></span><br><span class="line"><span class="comment">               first : 当前是否为第一个元素</span></span><br><span class="line"><span class="comment">               last : 当前是否为最后一个元素</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user,iterStat:$&#123;userList&#125;"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;iterStat.count&#125;"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.username&#125;"</span>&gt;</span>username<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.gender == 1 ? '女':'男'&#125;"</span>&gt;</span>未知<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;iterStat.size&#125;"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;iterStat.even&#125;? '偶数':'奇数'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;iterStat.first&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;iterStat.last&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><ul>
<li><p>th:if 不仅判断返回为true的表达式，还判断一些特殊的表达式。</p>
<ul>
<li><p>如果值不是Null，以下情况均返回true：</p>
<ul>
<li>如果值是boolean类型并且值为true</li>
<li>如果值是数值类型并且值不为0</li>
<li>如果值是字符类型并且值不为空</li>
<li>如果值是字符串并且内容不为<code>&quot;false&quot;</code>,<code>&quot;off&quot;</code>或者<code>&quot;no&quot;</code></li>
<li>如果值不是上述类型也返回true</li>
</ul>
</li>
<li><p>如果值是Null，则返回false</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:if 如果值为true，则显示出该标签，否则不显示</span></span><br><span class="line"><span class="comment">            $&#123;#lists.isEmpty(userList)&#125; true说明userList是空     not... false</span></span><br><span class="line"><span class="comment">            $&#123;#lists.isEmpty(userList)&#125; false说明userList不是空   not... true</span></span><br><span class="line"><span class="comment">        th:unless 与th:if 相反</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:if</span>=<span class="string">"not $&#123;#lists.isEmpty(userList)&#125;"</span>&gt;</span>显示出来说明userList集合不为空<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:unless</span>=<span class="string">" $&#123;#lists.isEmpty(userList)&#125;"</span>&gt;</span>显示出来说明userList集合不为空<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>th:unless</strong>与<strong>th:if</strong>作用正好相反</p>
</li>
<li><p>th:swith   th:case</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/study"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">study</span><span class="params">(Map&lt;String,Object&gt;map, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt;userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小梦"</span>,<span class="number">1</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小李"</span>,<span class="number">2</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小张"</span>,<span class="number">1</span>));</span><br><span class="line">        map.put(<span class="string">"userList"</span>,userList);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1女  2男</span></span><br><span class="line">        map.put(<span class="string">"sex"</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"man"</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"study"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;sex&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"1"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--判断sex的值和下面取出man的值是否相等，相等则显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"$&#123;man&#125;"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果上面均不满足，取下面默认值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>未知<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="显示标签体内容"><a href="#显示标签体内容" class="headerlink" title="显示标签体内容"></a>显示标签体内容</h5><ul>
<li><p><strong>th:text</strong>  转义特殊字符，即h1标签以文本显示出来</p>
</li>
<li><p><strong>th:utext</strong> 不转义特殊字符，即h1标签展现出本来效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/study"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">study</span><span class="params">(Map&lt;String,Object&gt;map, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt;userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小梦"</span>,<span class="number">1</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小李"</span>,<span class="number">2</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小张"</span>,<span class="number">1</span>));</span><br><span class="line">        map.put(<span class="string">"userList"</span>,userList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1女  2男</span></span><br><span class="line">        map.put(<span class="string">"sex"</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"man"</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//th:text th:utext</span></span><br><span class="line">        map.put(<span class="string">"desc"</span>,<span class="string">"hello&lt;h1&gt;world&lt;/h1&gt;"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"study"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;desc&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;desc&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>补充：Thymemleaf行内表达式双中括号：<code>[[表达式]]</code>（就是不在标签上使用属性，参考12 Inling）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span> [[$&#123;desc&#125;]]</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, [[$&#123;desc&#125;]] 。。。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="th-object直接取出对象"><a href="#th-object直接取出对象" class="headerlink" title="th:object直接取出对象"></a><code>th:object</code>直接取出对象</h5><ul>
<li><p>使用th:object直接取出对象，然后写对象里的属性名即可获取属性值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"/study"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">study</span><span class="params">(Map&lt;String,Object&gt;map, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt;userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小梦"</span>,<span class="number">1</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小李"</span>,<span class="number">2</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小张"</span>,<span class="number">1</span>));</span><br><span class="line">        map.put(<span class="string">"userList"</span>,userList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1女  2男</span></span><br><span class="line">        map.put(<span class="string">"sex"</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"man"</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//th:text th:utext</span></span><br><span class="line">        map.put(<span class="string">"desc"</span>,<span class="string">"hello&lt;h1&gt;world&lt;/h1&gt;"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"大明"</span>, <span class="number">2</span>);</span><br><span class="line">        request.getSession().setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"study"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用th:object 直接取出对象，然后写对象里的属性名即可获取属性值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;gender == 1 ? '女':'男'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SpringBoot热部署"><a href="#SpringBoot热部署" class="headerlink" title="SpringBoot热部署"></a>SpringBoot热部署</h3><ul>
<li><p>默认情况下，在开发中我们修改一个项目文件后，想看到效果不得不重启应用，这会导致浪费大量时间，我们希望不重启应用的情况下，程序可以自动部署（热部署）。</p>
</li>
<li><p><strong>如何能实现热部署？</strong></p>
<ol>
<li><p><strong>关于模板引擎</strong></p>
<ul>
<li><p>在Spring Boot开发环境下禁用模板缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#开发环境下关闭thymeleaf模板缓存，thymeleaf默认是开启状态</span><br><span class="line">spring.thymeleaf.cache=false</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>添加Spring Boot Devtools 热部署</strong></li>
</ol>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>Intellij IDEA和Eclipse不同，Intellij IDEA必须做一些小调整：</strong></li>
</ol>
<ul>
<li><p>在 Eclipse 中，修改文件后要手动进行保存，它就会自动编译，就触发热部署现象。</p>
</li>
<li><p>在Intellij IEDA 中，修改文件后都是自动保存，默认不会自动编译文件， 需要手动编译按 <strong>Ctrl + F9 （推荐使用）</strong>或 Build -&gt; Build Project ; 或者进行以下设置才会自动编译（效果不明显）</p>
<p>(File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Compiler -&gt; 勾选 Build project automatically)</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/7MuRfO3Ru^Is.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/7MuRfO3Ru%5EIs.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/7MuRfO3Ru^Is.png"></a></p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="分析SpringMVC自动配置"><a href="#分析SpringMVC自动配置" class="headerlink" title="分析SpringMVC自动配置"></a>分析SpringMVC自动配置</h3><p>SpringBoot为Spring MVC提供了适应于多数应用的自动配置功能（<code>WebMvcAutoConfiguration</code>）。</p>
<p>在Spring默认基础上，自动配置添加了以下特性：</p>
<ul>
<li><p>引入<code>ContentNegotiatingViewResolver</code>和<code>BeanNameViewResolver</code> beans.</p>
<ul>
<li><p>自动配置了视图解析器ViewResolver(根据方法返回值获取视图对象View，视图对象决定如何渲染？重定向or转发)</p>
</li>
<li><p><code>ContentNegotiatingViewResolver</code>:组合所有的视图解析器的（通过源码可分析出）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentNegotiatingViewResolver</span></span></span><br><span class="line"><span class="class">//146</span></span><br><span class="line"><span class="class">@<span class="title">Nullable</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">View</span> <span class="title">resolveViewName</span>(<span class="title">String</span> <span class="title">viewName</span>, <span class="title">Locale</span> <span class="title">locale</span>) <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        RequestAttributes attrs = RequestContextHolder.getRequestAttributes();</span><br><span class="line">        Assert.state(attrs <span class="keyword">instanceof</span> ServletRequestAttributes, <span class="string">"No current ServletRequestAttributes"</span>);</span><br><span class="line">        List&lt;MediaType&gt; requestedMediaTypes = <span class="keyword">this</span>.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());</span><br><span class="line">        <span class="keyword">if</span> (requestedMediaTypes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//选择所有候选的视图对象</span></span><br><span class="line">            List&lt;View&gt; candidateViews = <span class="keyword">this</span>.getCandidateViews(viewName, locale, requestedMediaTypes);</span><br><span class="line">            <span class="comment">//从候选中选择最合适的视图对象</span></span><br><span class="line">            View bestView = <span class="keyword">this</span>.getBestView(candidateViews, requestedMediaTypes, attrs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//存入所有视图解析器</span></span><br><span class="line"> <span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line"><span class="comment">//107</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initServletContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">   Collection&lt;ViewResolver&gt; matchingBeans = 			BeanFactoryUtils.beansOfTypeIncludingAncestors(</span><br><span class="line">   <span class="comment">//从容器中获取所有的视图解析器    </span></span><br><span class="line">   <span class="keyword">this</span>.obtainApplicationContext(), ViewResolver<span class="class">.<span class="keyword">class</span>).<span class="title">values</span>()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义视图解析器：可以@Bean向容器中添加一个我们自定义的视图解析器，即可被容器管理使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ViewResolver <span class="title">MyViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span></span>&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String s, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DispatcherServlet.doDispatch 断点后,发送任意请求，可查看已被容器自动管理了</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自动注册<code>Converter</code>,<code>GenericConverter</code>,and<code>Formatter</code>beans。</p>
<ul>
<li><p><code>Converter</code>：转换器；如：文本类型转换目标类型，true转boolean类型</p>
</li>
<li><p><code>GenericConverter</code>：转换器，Spring内部在注册时，会将Converter先转换为GenericConverter之后，再统一对GenericConverter注册。</p>
</li>
<li><p><code>Formatter</code>：格式化器；如：2020/10/6 格式化Date类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//WebMvcAutoConfiguration.mvcConversionService  295</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FormattingConversionService <span class="title">mvcConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          Format format = <span class="keyword">this</span>.mvcProperties.getFormat();</span><br><span class="line">            WebConversionService conversionService = <span class="keyword">new</span> WebConversionService((<span class="keyword">new</span> DateTimeFormatters()).dateFormat(format.getDate()).timeFormat(format.getTime()).dateTimeFormat(format.getDateTime()));</span><br><span class="line">            <span class="keyword">this</span>.addFormatters(conversionService);</span><br><span class="line">            <span class="keyword">return</span> conversionService;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//将格式化器添加到容器</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configurers.addFormatters(registry);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>对<code>HttpMessageConverters</code>的支持。</p>
<ul>
<li>SpringMVC用它来转换Http请求和响应的;</li>
<li>可以通过@Bean向容器中添加一个我们自定义的<code>HttpMessageConverters</code>,即可被容器管理使用</li>
</ul>
</li>
<li><p>自动注册<code>MessageCodesResolver</code></p>
<ul>
<li>定义错误代码生成规则</li>
</ul>
</li>
<li><p>自动注册<code>ConfigurableWebBindingInitializer</code></p>
<ul>
<li>初始化所有Web数据绑定器对象，比如请求数据—–》JavaBean</li>
</ul>
</li>
<li><p>对静态资源的支持，包括Webjars的支持</p>
</li>
<li><p>对静态首页index.html的支持</p>
</li>
<li><p>对自定义<code>Favicon</code>图标的支持</p>
</li>
</ul>
<p>如果想保留Spring Boot MVC的特性，而且还想扩展新的功能（拦截器，格式化器，视图控制器等），你可以在你自定义的<code>WebMvcConfigurer</code>类上增加<code>@Configuration</code>注解。</p>
<p>如果你想全面控制Spring MVC(也就是不使用默认配置功能)，你在自定义的Web配置类上添加<code>@Configuration</code>和<code>@EnableWebMvc</code>注解。</p>
<h3 id="扩展SpringMVC功能"><a href="#扩展SpringMVC功能" class="headerlink" title="扩展SpringMVC功能"></a>扩展SpringMVC功能</h3><ul>
<li><p>扩展一个视图解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/test"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果想保留Spring Boot MVC的特性，而且还想扩展新的功能（拦截器，格式化器，视图控制器等），你可以在你自定义的<code>WebMvcConfigurer</code>类上增加<code>@Configuration</code>注解。</p>
<p><strong>自定义配置类保留了所有的自动配置，也能用我们扩展的功能</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.创建一个WebMvcConfigurer类型的子类</span></span><br><span class="line"><span class="comment"> * 2.类上用<span class="doctag">@Configuration</span>标识它是一个配置类</span></span><br><span class="line"><span class="comment"> * 3.不能<span class="doctag">@EnableWebMvc</span>标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringMvcConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加视图控制 ctrl+i</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//发送 /text 请求会来的success页面</span></span><br><span class="line">        registry.addViewController(<span class="string">"/test"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>原理：</strong></p>
<p>1.自定义WebMvcConfigurer自动配置时会导入：<code>@Import({WebMvcAutoConfiguration.EnableWebMvcConfiguration.class})</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入EnableWebMvcConfiguration.class</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;WebMvcAutoConfiguration.EnableWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(</span>&#123;WebMvcProperties<span class="class">.<span class="keyword">class</span>, <span class="title">ResourceProperties</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Order</span>(0)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>2.EnableWebMvcConfiguration 继承了 DelegatingWebMvcConfiguration</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">        proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>3.分析 DelegatingWebMvcConfiguration ， 会将所有web配置组件加到WebMvcConfigurerComposite中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存储了所有的mvc配置类组件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          一个参考实现：将所有的WebMvcConfigurer相关配置都来一起调用</span></span><br><span class="line"><span class="comment">          public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        Iterator var2 = this.delegates.iterator();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        while(var2.hasNext()) &#123;</span></span><br><span class="line"><span class="comment">            WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();</span></span><br><span class="line"><span class="comment">            delegate.addViewControllers(registry);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>4.保留原来的配置类，也添加了新的配置类，所有的WebMvcConfigurer都会一起起作用</p>
<h3 id="全面控制SpringMVC"><a href="#全面控制SpringMVC" class="headerlink" title="全面控制SpringMVC"></a>全面控制SpringMVC</h3><p>如果你想全面控制Spring MVC(也就是不使用默认配置功能)，你在自定义的Web配置类上添加<code>@Configuration</code>和<code>@EnableWebMvc</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringMvcConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加视图控制</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//发送 /text 请求会来的success页面</span></span><br><span class="line">        registry.addViewController(<span class="string">"/test"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>原理：</strong>为什么添加<code>@EnableWebMvc</code>自动配置就失效了？</p>
<p>1.<code>@EnableWebMvc</code>的核心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>2.继承了WebMvcConfigurationSupport类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>而在 WebMvcAutoConfiguration 上使用了 <code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *而 @ConditionalOnMissingBean 表示的是没有WebMvcConfigurationSupport这个组件,</span></span><br><span class="line"><span class="comment"> *WebMvcAutoConfiguration自动配置类才会生效.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;WebMvcConfigurationSupport<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(-2147483638)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123;DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">TaskExecutionAutoConfiguration</span>.<span class="title">class</span>, <span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] SERVLET_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>4.相反<code>@EnableWebMvc</code>将<code>WebMvcConfigurationSupport</code>组件导入进来，使得WebMvcAutoConfiguration就失效了</p>
<p>5.<code>WebMvcConfigurationSupport</code>只是SpringMVC最基本的功能</p>
</li>
</ol>
</li>
</ul>
<h3 id="总结SpringMVC配置"><a href="#总结SpringMVC配置" class="headerlink" title="总结SpringMVC配置"></a>总结SpringMVC配置</h3><ul>
<li>在Spring Boot中自已配置组件的时候，先看容器中有没有公司自已配置的（@Bean、@Component）,如果 有就用公司自已配置的; 如果没有，才自动配置</li>
<li>在Spring Boot中会有非常多的xxxConfigurer帮助我们进行扩展配置</li>
<li>在Spring Boot中会有很多的xxxCustomizer帮助我们进行定制配置</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot数据访问操作</title>
    <url>/2020/10/15/SpringBoot%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="整合JDBC实战"><a href="#整合JDBC实战" class="headerlink" title="整合JDBC实战"></a>整合JDBC实战</h3><a id="more"></a>

<h4 id="JDBC相关配置"><a href="#JDBC相关配置" class="headerlink" title="JDBC相关配置"></a>JDBC相关配置</h4><ul>
<li><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql驱动包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jdbc启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>application.yml</p>
<p><mark>注意：mysql 8.x版本驱动包，要使用<code>com.mysql.cj.jdbc.Driver</code>作为驱动类</mark></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    #使用 MySQL连接驱动是8.0以上，需要在Url后面加上时区, GMT%2B8代表中国时区，不然报时区错误</span><br><span class="line">    url: jdbc:mysql://localhost:3306/jdbc?serverTimezone=GMT%2B8</span><br><span class="line">    # 注意： 新版本驱动包，要使用以下类作为驱动类</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot07DataJdbcApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//查看采用的数据源连接池  com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        System.out.println(<span class="string">"dataSource"</span> + dataSource.getClass());</span><br><span class="line">        System.out.println(<span class="string">"-------------------------------"</span>);</span><br><span class="line">		<span class="comment">//获取数据库连接</span></span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果</p>
<ul>
<li>Spring默认采用的数据源连接池是<code>com.zaxxer.hikari.HikariDataSource</code>；</li>
<li>数据源相关配置都在<code>DataSourceProperties</code>中；</li>
</ul>
</li>
</ul>
<h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ol>
<li><p>以下说明mysql服务没有启动 ，需要启动mysql服务（可以用数据库连接工具试试看是否可以连接，不可用说明没有启动）</p>
<p><mark>The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.</mark></p>
</li>
<li><p>时区异常：</p>
<p>需要配置文件中指定时区：<code>jdbc:mysql://localhost:3306/jdbc?serverTimezone=GMT%2B8</code></p>
<p><mark>The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents more than one</mark></p>
</li>
</ol>
<h4 id="JDBC自动配置原理："><a href="#JDBC自动配置原理：" class="headerlink" title="JDBC自动配置原理："></a>JDBC自动配置原理：</h4><ol>
<li><p>支持的数据源，提供Hikari.class,Tomcat.class,Ddcp2.class,Generic.class</p>
<p>各种连接池数据源相关配置：DataSourceConfiguration</p>
<p>可以通过spring.datasource.type修改数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Conditional</span>(&#123;DataSourceAutoConfiguration.PooledDataSourceCondition<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(</span>&#123;DataSource<span class="class">.<span class="keyword">class</span>, <span class="title">XADataSource</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">//提供了 <span class="title">Hikari</span>.<span class="title">class</span>, <span class="title">Tomcat</span>.<span class="title">class</span>, <span class="title">Dbcp2</span>.<span class="title">class</span>, <span class="title">Generic</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123;Hikari<span class="class">.<span class="keyword">class</span>, <span class="title">Tomcat</span>.<span class="title">class</span>, <span class="title">Dbcp2</span>.<span class="title">class</span>, <span class="title">Generic</span>.<span class="title">class</span>, <span class="title">DataSourceJmxConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">protected</span> <span class="title">static</span> <span class="title">class</span> <span class="title">PooledDataSourceConfiguration</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="title">PooledDataSourceConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>JdbcTemplateAutoConfiguration</code>自动配置类提供了<code>JdbcTemplate</code>操作数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="comment">//@ResponseBody   </span></span><br><span class="line"><span class="comment">//@RestController类似于@ResponseBody和@Controller的组合</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/provider"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps =</span><br><span class="line">                jdbcTemplate.queryForList(<span class="string">"select * from provider"</span>);</span><br><span class="line">        System.out.println(maps);</span><br><span class="line">        <span class="keyword">return</span> maps.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="高级配置Druid连接池与监控管理"><a href="#高级配置Druid连接池与监控管理" class="headerlink" title="高级配置Druid连接池与监控管理"></a>高级配置Druid连接池与监控管理</h3><blockquote>
<p>Hikari性能上比Druid更好，但是Druid有配套的监控安全管理功能</p>
</blockquote>
<h4 id="整合Druid操作步骤"><a href="#整合Druid操作步骤" class="headerlink" title="整合Druid操作步骤"></a>整合Druid操作步骤</h4><ol>
<li><p>引入Druid依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Druid全局配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"><span class="comment"># 数据源基本配置</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/jdbc?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="comment"># 8.x版本驱动包，要使用以下类作为驱动类</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 指定 Druid 数据源</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 数据源其他配置, DataSourceProperties中没有相关属性,默认无法绑定</span></span><br><span class="line">  <span class="attr">initialSize:</span> <span class="number">8</span></span><br><span class="line">  <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">  <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">  <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">  <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">  <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙，logback是slf4j的实现类</span></span><br><span class="line">  <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">  <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">25</span></span><br><span class="line">  <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通用测试类测试，发现数据源已经切换为DruidDataSource，但是配置中的属性没有与它绑定上</p>
</li>
<li><p>自定义配置类，将配置中的属性与DruidDataSource属性绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定数据源配置</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="配置Druid监控"><a href="#配置Druid监控" class="headerlink" title="配置Druid监控"></a>配置Druid监控</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定数据源配置</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置一个Driod的监控</span></span><br><span class="line"><span class="comment">     * 1.配置一个Druid的后台管理Servlet</span></span><br><span class="line"><span class="comment">     * 2.配置一个Druid的filer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//1.配置一个Druid的后台管理Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//StatViewServlet是 配置管理后台的Servlet</span></span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean =</span><br><span class="line">                <span class="comment">//现在要进行druid监控的配置处理操作 注意请求是 /druid/*</span></span><br><span class="line">                <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//访问的用户名和密码</span></span><br><span class="line">        bean.addInitParameter(<span class="string">"loginUsername"</span>,<span class="string">"root"</span>);</span><br><span class="line">        bean.addInitParameter(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">//白名单 允许访问的ip 默认所有ip访问</span></span><br><span class="line">        bean.addInitParameter(<span class="string">"allow"</span>,<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//黑名单 禁止访问的ip</span></span><br><span class="line">        <span class="comment">//bean.addInitParameter("deny","127.0.10.1");</span></span><br><span class="line">        <span class="comment">//是否可以重置数据源</span></span><br><span class="line">        bean.addInitParameter(<span class="string">"resetEnable"</span>,<span class="string">"false"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.配置一个Druid的filer</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;Filter&gt; bean =</span><br><span class="line">                <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        <span class="comment">//配置初始化参数</span></span><br><span class="line">        Map&lt;String,String&gt; initPrams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置拦截请求</span></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">        <span class="comment">//排除请求</span></span><br><span class="line">        initPrams.put(WebStatFilter.PARAM_NAME_EXCLUSIONS,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="整合MyBatis-3-x注解版-实战"><a href="#整合MyBatis-3-x注解版-实战" class="headerlink" title="整合MyBatis 3.x注解版 实战"></a>整合MyBatis 3.x注解版 实战</h3><h4 id="搭建MyBatis环境"><a href="#搭建MyBatis环境" class="headerlink" title="搭建MyBatis环境"></a>搭建MyBatis环境</h4><ul>
<li><p>创建Module</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/bF5WJiDwqTGD.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/bF5WJiDwqTGD.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/bF5WJiDwqTGD.png"></a></p>
</li>
<li><p>导入Druid数据源依赖，创建后自动会引入MyBatis启动器，是由MyBatis官方提供的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Druid数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Druid数据源（application.yml修改mybatis库）与监控      [参考上面]</p>
</li>
<li><p>创建mybatis库与导入表和数据、实体类</p>
</li>
</ul>
<h4 id="注解版MyBatis操作"><a href="#注解版MyBatis操作" class="headerlink" title="注解版MyBatis操作"></a>注解版MyBatis操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span><span class="comment">//避免直接引用时红线报错</span></span><br><span class="line"><span class="meta">@Mapper</span><span class="comment">//指定这是操作数据的mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProviderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from provider where pid = #&#123;pid&#125;"</span>)</span><br><span class="line">    <span class="function">Provider <span class="title">getProviderByPid</span><span class="params">(Integer pid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//useGeneratedKeys是否使用自增组件，keyProperty指定实体类中的哪一个属性封装主键值</span></span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"pid"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into provider(providerName) values(#&#123;providerName&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addProvider</span><span class="params">(Provider provider)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from provider where pid = #&#123;pid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteProviderByPid</span><span class="params">(Integer pid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update provider set providerName=#&#123;providerName&#125; where pid=#&#123;pid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateProvider</span><span class="params">(Provider provider)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><mark>注：</mark>上面@Insert插入数据时，使用@Options接收插入的主键值：</p>
<p>useGeneratedKeys是否自增主键，keyProperty指定实体中哪个属性封装主键</p>
<p><code>@Options(useGeneratedKeys = true,keyProperty = &quot;pid&quot;)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="meta">@RestController</span><span class="comment">//类似@Controller和@ResponseBody的组合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProviderMapper providerMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/provider/&#123;pid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Provider <span class="title">getProvider</span><span class="params">(@PathVariable(<span class="string">"pid"</span>)</span> Integer pid)</span>&#123;</span><br><span class="line">        Provider providerByPid = providerMapper.getProviderByPid(pid);</span><br><span class="line">        <span class="keyword">return</span> providerByPid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/provider"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Provider <span class="title">addProvider</span><span class="params">(Provider provider)</span></span>&#123;</span><br><span class="line">        providerMapper.addProvider(provider);</span><br><span class="line">        <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>自定义MyBatis配置类，替代mybatis配置文件</p>
<ul>
<li><p>开启驼峰命名方式。不然provider_code不会自动转成providerCode 获取不到provider_code信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ConfigurationCustomizer configurationCustomizer = <span class="keyword">new</span> ConfigurationCustomizer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(org.apache.ibatis.session.Configuration configuration)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//开启驼峰命名方式</span></span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> configurationCustomizer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在启动类上使用<code>@MapperScan(&quot;包名&quot;)</code>自动装配指定包下所有的Mapper，省的在每个Mapper接口上写<code>@Mapper</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//会自动装配指定包下所有Mapper</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.bdu.springboot.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot07DataMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot07DataMybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="整合MyBatis-3-x-配置文件版-实战"><a href="#整合MyBatis-3-x-配置文件版-实战" class="headerlink" title="整合MyBatis 3.x 配置文件版 实战"></a>整合MyBatis 3.x 配置文件版 实战</h3><p>MyBatis官网：<a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener"> http://www.mybatis.org/mybatis-3/zh/index.html</a></p>
<ul>
<li><p>Mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Qi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020/10/18 18:05</span></span><br><span class="line"><span class="comment"> * MyBatis配置文件版</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BillMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Bill <span class="title">getBillByBid</span><span class="params">(Integer bid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertBill</span><span class="params">(Bill bill)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在resources创建以下目录和核心配置文件与Mapper映射文件</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Lykv1NHojOqn.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/Lykv1NHojOqn.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Lykv1NHojOqn.png"></a></p>
</li>
<li><p>mybatis核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>BillMapper映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.bdu.springboot.mapper.BillMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBillByBid"</span> <span class="attr">resultType</span>=<span class="string">"com.bdu.springboot.entities.Bill"</span>&gt;</span></span><br><span class="line">        select * from bill where bid = #&#123;bid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBill"</span>&gt;</span></span><br><span class="line">        insert into bill(bill_code,bill_name)</span><br><span class="line">        values (#&#123;billCode&#125;,#&#123;billName&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>application.yml中指定配置文件路径</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#MyBatis相关配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment">#核心配置文件路径</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="comment">#映射配置文件路径</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建BillController来测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BillController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BillMapper billMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/bill/&#123;bid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bill <span class="title">getBill</span><span class="params">(@PathVariable Integer bid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> billMapper.getBillByBid(bid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/bill"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bill <span class="title">addBill</span><span class="params">(Bill bill)</span></span>&#123;</span><br><span class="line">        billMapper.addBill(bill);</span><br><span class="line">        <span class="keyword">return</span> bill;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8080/bill/1后" target="_blank" rel="noopener">http://localhost:8080/bill/1后</a> 发现billCode、billName等没有获取到，需要配置文件中开启驼峰命名</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/rtekRtkteBwt.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/rtekRtkteBwt.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/rtekRtkteBwt.png"></a></p>
</li>
<li><p><code>mybatis-config.xml</code>开启驼峰命名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启驼峰命名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>控制台打印SQL语句</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印SQL</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.bdu.springboot.mapper.BillMapper:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="整合Spring-Data-JPA-实战"><a href="#整合Spring-Data-JPA-实战" class="headerlink" title="整合Spring Data JPA 实战"></a>整合Spring Data JPA 实战</h3><h4 id="什么是Spring-Data"><a href="#什么是Spring-Data" class="headerlink" title="什么是Spring Data"></a>什么是Spring Data</h4><p>Spring Data 是Spring Boot底层默认进行数据访问的技术，为了简化构建基于Spring框架应用的数据访问技术，包括 非关系数据库、Map-Reduce框架、云数据服务等；另外也包含对关系数据库的访问支持。</p>
<p>Spring Data包含多个模块： </p>
<ul>
<li>Spring Data Commons 提供共享的基础框架，适合各个子项目使用，支持跨数据库持久化</li>
<li>Spring Data JPA</li>
<li>Spring Data KeyValue</li>
<li>Spring Data LDAP</li>
<li>Spring Data MongoDB</li>
<li>Spring Data Redis</li>
<li>Spring Data REST</li>
<li>Spring Data for Apache Cassandra</li>
<li>Spring Data for Apache Geode</li>
<li>Spring Data for Apache Solr</li>
<li>Spring Data for Apache GemFilre</li>
<li>Spring Data Couchbase (community module)</li>
<li>Spring Data Elasticsearch (community module)</li>
<li>Spring Data Neo4j (community modlule)</li>
</ul>
<h5 id="Spring-Data-特点"><a href="#Spring-Data-特点" class="headerlink" title="Spring Data 特点"></a>Spring Data 特点</h5><ul>
<li>Spring Data项目为大家提供统一的API来对不同数据访问层进行操作；</li>
</ul>
<h5 id="Spring-Data-统一的核心接口"><a href="#Spring-Data-统一的核心接口" class="headerlink" title="Spring Data 统一的核心接口"></a>Spring Data 统一的核心接口</h5><ol>
<li><p><code>Repository</code>：统一的跟接口，其他接口继承该接口</p>
</li>
<li><p><code>CrudRepository</code>：基本的增删改查接口，提供了最基本的对实体类CRUD操作</p>
</li>
<li><p><code>PagingAndSortingRepository</code>：增加了分页和排序操作</p>
</li>
<li><p><code>JpaRepository</code>：增加了批量操作，并重写了父接口一些方法的返回类型</p>
</li>
<li><p><code>JpaSpecificationExecutor</code>：用来做动态查询，可以实现带查询条件的分页（不属于Repository体系，支持JPA Criteria查询相关的方法）</p>
</li>
</ol>
<h5 id="Spring-Data-JPA、JPA与Hibernate关系"><a href="#Spring-Data-JPA、JPA与Hibernate关系" class="headerlink" title="Spring Data JPA、JPA与Hibernate关系"></a>Spring Data JPA、JPA与Hibernate关系</h5><p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/@RdH8L2lQBc0.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/@RdH8L2lQBc0.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/@RdH8L2lQBc0.png"></a></p>
<ul>
<li>JPA是一种规范，而Hibernate是实现这种规范的底层实现，Spring Data JPA对持久化接口JPA再抽象一层，针对持久层业务再进一步统一简化。</li>
</ul>
<h4 id="整合Spring-Data-JPA实战"><a href="#整合Spring-Data-JPA实战" class="headerlink" title="整合Spring Data JPA实战"></a>整合Spring Data JPA实战</h4><p>JPA的底层遵守ORM（对象关系映射）规范，因此JPA其实也就是java实体对象和关系型数据库建立起映射关系，通过面向对象编程的思想操作关系型数据库的规范。</p>
<ol>
<li><p>创建Module</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/W5htNagtBjQy.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/W5htNagtBjQy.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/W5htNagtBjQy.png"></a></p>
</li>
<li><p>添加数据源、新建JPA数据库</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:/localhost:3306/taotao?serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建实体类，并使用JPA注解进行配置映射关系</p>
</li>
</ol>
<ul>
<li><p>类上使用JPA注解<code>@Entity</code>标注，说明它是和数据表映射的类；<code>@Table(name=&quot;表名&quot;)</code>指定对应映射的表名，省略默认表名就是类名。</p>
</li>
<li><p><code>@Id</code>标识主键，<code>@GeneratedValue(strategy=GenerationType.IDENTITY)</code>标识自增长主键</p>
</li>
<li><p><code>@Column</code>标识字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span> <span class="comment">//说明 它是和数据库表映射的类</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tbl_user"</span>) <span class="comment">//指定对应映射的表名，省略不写默认表名是类同 user</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span><span class="comment">//指定主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//标识自增长主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"user_name"</span>,length = <span class="number">5</span>)<span class="comment">//与数据表对应的一个字段</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Column</span><span class="comment">//省略不写 默认字段名就是属性名</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="4">
<li><p>创建<code>UserRepository</code>接口继承<code>JpaRepository</code>，就会crud及分页等基本功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bdu.springboot.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bdu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Qi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020/10/18 23:59</span></span><br><span class="line"><span class="comment"> * 自定义接口继承JpaRepository，就会crud及分页等基本功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//指定的泛型&lt;操作的实体类,主键的类型&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JPA配置  — 在全局配置文件中添加（spring.jpa.* 开头）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/jpa?serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="comment">#会根据映射实体类自动 创建或更新数据表</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="comment">#控制台显示SQL语句</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#默认创建表的类型是MyISAM 是非事务安全的，所以无法实现事务回滚</span></span><br><span class="line">    <span class="comment">#指定如下方言：创建表的类型是Innodb，才可以进行对事务的回滚。</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="Spring-Boot中的事务管理"><a href="#Spring-Boot中的事务管理" class="headerlink" title="Spring Boot中的事务管理"></a>Spring Boot中的事务管理</h3><h4 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h4><p>我们在开发企业应用时，对于业务人员的一个操作实际是对数据读写的多步操作的结合。由于数据操作在顺序执行的过程中，任何一步操作都有可能发送异常，异常会导致后续操作无法完成，此时由于业务逻辑并未正确完成，之前成功操作的数据并不可靠，需要在这种情况下进行回退。</p>
<p>事务的作用就是为了保证用户的每一个操作都是可靠的，事务中的每一步操作都必须成功执行，只要有发生异常就回退到事务开始未进行操作的状态。</p>
<p>事务管理是Spring框架中最为常用的功能之一，我们在使用Spring Boot开发应用时，大部分情况下也都需要使用事务。</p>
<h4 id="事务管理操作"><a href="#事务管理操作" class="headerlink" title="事务管理操作"></a>事务管理操作</h4><p>在Spring Boot中，当我们使用了spring-boot-starter-jdbc或spring-boot-starter-jpa依赖的时候，框架会自动默认分别注入DataSourceTransactionManager或JpaTransactionManager。所以我们不需要任何额外配置就可以用<strong>@Transaction</strong>注解进行事务的使用。</p>
<ol>
<li><mark>强调</mark>Hibernate在创建表时：</li>
</ol>
<ul>
<li><p>默认创建表的类型时MyISAM，是非事务安全的，所以无法实现事务回滚，需要指定<strong>Innodb</strong>才可以进行对事务的回滚。</p>
</li>
<li><p>需要指定 <code>spring.jpa.database-platform=org.hibernate.dialect.MySQL57Dialect</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">jpa:</span></span><br><span class="line">    <span class="comment">#会根据映射实体类自动 创建或更新数据表</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="comment">#控制台显示SQL语句</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#默认创建表的类型是MyISAM 是非事务安全的，所以无法实现事务回滚</span></span><br><span class="line">    <span class="comment">#指定如下方言：创建表的类型是Innodb，才可以进行对事务的回滚。</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li><p>创建Service层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bdu.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bdu.springboot.entity.User;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Qi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020/10/19 10:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function">Boolean <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Service层实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *事务管理：</span></span><br><span class="line"><span class="comment">         *1. 在启动类上 ，使用 <span class="doctag">@EnableTransactionManagement</span> 开启注解方式事务支持</span></span><br><span class="line"><span class="comment">         *2. 在 Service层方法上添加 <span class="doctag">@Transactional</span> 进行事务管理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟转账</span></span><br><span class="line">        <span class="comment">//转出  成功</span></span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"1"</span>,<span class="string">"1"</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"12"</span>,<span class="string">"2"</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"123"</span>,<span class="string">"3"</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"1234"</span>,<span class="string">"4"</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"12345"</span>,<span class="string">"5"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转入 失败    用户名长度大于5会报错，</span></span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="string">"123456"</span>,<span class="string">"6"</span>));</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser2</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        userService.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>事务管理步骤：</strong></p>
<ol>
<li>在启动类上，使用<code>@EnableTransactionManagement</code>开启注解方式事务管理</li>
<li>在Service层方法上添加<code>@Transactional</code>进行当前方法的事务管理（如果标注在类上 则对所有方法进行管理）</li>
</ol>
<h4 id="事务的隔离级别和传播行为"><a href="#事务的隔离级别和传播行为" class="headerlink" title="事务的隔离级别和传播行为"></a>事务的隔离级别和传播行为</h4><ul>
<li>除了指定事务管理器之后，还能对事务进行隔离级别和传播行为的控制，下面分别详细解释：</li>
</ul>
<h5 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h5><p>隔离级别是指在发生并发的事务之间的隔离程度，与我们开发时候主要相关的包括：脏读、不可重复读、幻读。</p>
<p><strong>脏读：</strong>A事务执行过程中修改了id=1的数据，未提交前，B事务读取了A修改的id=1的值，而A事务却回滚了，这样B事务就形成了脏读。</p>
<p><strong>不可重复读：</strong>A事务先读取了一条数据，然后执行逻辑的时候，B事务将这条数据改变了，然后A事务再次读取的时候，发现数据不匹配了，就是所谓的不可重复读。</p>
<p><strong>幻读：</strong>A事务先根据条件查询到了N条数据，然后B事务新增了M条符合A事务查询条件的数据，导致了A事务再次查询发现有N+M条数据了，就产生了幻读。</p>
<ul>
<li><p>我们可以看到<code>org.springframework.transaction.annotation.Isolation</code>，枚举类中定义了五个表示隔离级别的值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Isolation &#123;</span><br><span class="line">	DEFAULT(-<span class="number">1</span>),</span><br><span class="line">	READ_UNCOMMITTED(<span class="number">1</span>),</span><br><span class="line">	READ_COMMITTED(<span class="number">2</span>),</span><br><span class="line">	REPEATABLE_READ(<span class="number">4</span>),</span><br><span class="line">	SERIALIZABLE(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>DEFAULT</code>：这是默认值，表示使用底层数据库默认隔离级别。对大部分数据库而言，通常这值就是：<code>READ_COMMITTED</code>。</li>
<li><code>READ_UNCOMMITTED</code>：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</li>
<li><code>READ_COMMITTED</code>：<strong>该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以放止脏读，这也是大多数情况下的推荐值，性能最好。</strong></li>
<li><code>REPEATABLE_READ</code>:该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足查询，这些新增的记录也会被忽略。该级别可以放止脏读和不可重复读。</li>
<li><code>SERIALIZABLE</code>：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以放止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>
</ul>
</li>
<li><p>指定方式：通过使用<code>isolation</code>属性设置，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(isolation = Isolation.DEFAULT)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h5><p>传播行为是指 如果在开始当前事务之前，已经存在一个事务，此时可以指定这个要开始的这个事务的执行行为。</p>
<ul>
<li><p>我们可以看到<code>org.springframework.transaction.annotation.Propagation</code>枚举类中定义了6个表示传播行为的枚举值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Propagation &#123;</span><br><span class="line">	REQUIRED(<span class="number">0</span>),</span><br><span class="line">	SUPPORTS(<span class="number">1</span>),</span><br><span class="line">	MANDATORY(<span class="number">2</span>),</span><br><span class="line">	REQUIRES_NEW(<span class="number">3</span>),</span><br><span class="line">	NOT_SUPPORTED(<span class="number">4</span>),</span><br><span class="line">	NEVER(<span class="number">5</span>),</span><br><span class="line">	NESTED(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>REQUIRED</code>：（默认）如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>
<li><code>SUPPORTS</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>
<li><code>MANDATORY</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li>
<li><code>REQUIRES_NEW</code>：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>
<li><code>NOT_SUPPORTED</code>：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>
<li><code>NEVER</code>：以非事务方式运行，如果当前存在事务，则抛出异常。</li>
<li><code>NESTED</code>：如果当前存在事务，则创建一个事务做为当前事务的嵌套事务来运行；如果当前没有事务，则该值等价于<code>REQUIRED</code>。</li>
</ul>
</li>
<li><p>指定方式：通过使用<code>propagation</code>属性设置，例如：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br></pre></td></tr></table></figure>
























]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot日志配置</title>
    <url>/2020/09/27/SpringBoot%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Spring-Boot日志配置"><a href="#Spring-Boot日志配置" class="headerlink" title="Spring Boot日志配置"></a>Spring Boot日志配置</h2><ul>
<li>在市场上存在非常多的日志框架：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">日志抽象层</th>
<th align="center">日志实现</th>
</tr>
</thead>
<tbody><tr>
<td align="center">jboss-logging(不适合企业项目开发使用)<br />JCL（jakarta Commoms Logging）（2014年后不再维护）<br />SLF4j（Simple Logging Facade for java）（与log4j Logback同一个人开发）</td>
<td align="center">JUL(java.util.logging)（担心被抢市场，推出的）<br />Log4j（存在性能问题）<br />Logback（Log4j同一个人开发的新框架，做了重大升级）<br />Log4j2（apache开发的很强大，借了log4j的名，但当前很多框架未适配上）</td>
</tr>
</tbody></table>
<a id="more"></a>

<p>Spring Boot采用了slf4j+logback的组合形式，Spring Boot也提供了对UL、log4j2、Logback提供了默认配置</p>
<ul>
<li><p>Spring官网参考文档</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-logging" target="_blank" rel="noopener">Spring官网参考文档</a></p>
</li>
</ul>
<h3 id="默认日志配置"><a href="#默认日志配置" class="headerlink" title="默认日志配置"></a>默认日志配置</h3><ul>
<li><p>Spring Boot默认配置好了日志，只要启动Spring Boot项目就会在控制台输出日志信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot02LoggingApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//日志记录器</span></span><br><span class="line">	Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//1.下面自定义的都是日志级别，由低到高：trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">		<span class="comment">//2.spring boot默认设定的时info级别日志（也称root级别）</span></span><br><span class="line">		<span class="comment">//3.可以进行调整日志级别，设定某个级别后，就只打印设定的这个级别及后面高级别的日志信息</span></span><br><span class="line">		<span class="comment">// 没有指定级别的就用SpringBoot默认规定的级别：root级别</span></span><br><span class="line">		<span class="comment">//4.可修改指定包的日志级别：</span></span><br><span class="line">		<span class="comment">//  指定某个包下面的所有日志级别：logging.level.包名=级别名</span></span><br><span class="line">		<span class="comment">//跟踪运行信息</span></span><br><span class="line">		logger.trace(<span class="string">"这是trace日志信息"</span>);</span><br><span class="line">		<span class="comment">//调试信息</span></span><br><span class="line">		logger.debug(<span class="string">"这是debug日志信息"</span>);</span><br><span class="line">		<span class="comment">//自定义信息</span></span><br><span class="line">		logger.info(<span class="string">"这是info日志信息"</span>);</span><br><span class="line">		<span class="comment">//警告信息：如果运行结果是不预期的值，则可以进行警告</span></span><br><span class="line">		logger.warn(<span class="string">"这是warn日志信息"</span>);</span><br><span class="line">		<span class="comment">//错误信息：出现异常捕获时</span></span><br><span class="line">		logger.error(<span class="string">"这是error日志信息"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改日志默认级别</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调整日志级别： trace &lt; debug &lt; info &lt; warn &lt; error</span></span><br><span class="line"><span class="comment"># com.mengxuegu包下的级别</span></span><br><span class="line"><span class="string">logging.level.com.mengxuegu=trace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置root级别</span></span><br><span class="line"><span class="string">logging.level.root=debug</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="修改日志默认配置"><a href="#修改日志默认配置" class="headerlink" title="修改日志默认配置"></a>修改日志默认配置</h3><p><code>application.properties</code>中修改日志默认配置</p>
<h4 id="修改日志文件生成路径"><a href="#修改日志文件生成路径" class="headerlink" title="修改日志文件生成路径"></a>修改日志文件生成路径</h4><table>
<thead>
<tr>
<th><code>logging.file</code></th>
<th><code>logging.path</code></th>
<th>实例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>（none）</td>
<td>(none)</td>
<td></td>
<td>只在控制台输出</td>
</tr>
<tr>
<td>指定文件名</td>
<td>(none)</td>
<td>springboot.log</td>
<td>输出到当前项目根路径下的springboot.log文件中</td>
</tr>
<tr>
<td>(none)</td>
<td>指定目录</td>
<td>/springboot/log</td>
<td>输出到当前项目所在磁盘根路径下的/springboot/log目录中的spring.log文件中</td>
</tr>
<tr>
<td>指定文件名</td>
<td>指定目录</td>
<td></td>
<td>当两个同时指定时，采用的时logging.file指定。推荐使用<code>logging.file</code>设置即可，因为它可自定义文件名</td>
</tr>
</tbody></table>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#输出到当前项目根路径下的 springboot.log 文件中</span></span><br><span class="line"><span class="comment">#logging.file=springboot.log</span></span><br><span class="line"><span class="comment">#输出到当前项目所在磁盘根路径下的 /springboot/log目录中的 spring.log 文件中,</span></span><br><span class="line"><span class="string">logging.path=springboot/log</span></span><br></pre></td></tr></table></figure>

<h4 id="修改日志输出格式"><a href="#修改日志输出格式" class="headerlink" title="修改日志输出格式"></a>修改日志输出格式</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日志输出格式说明：</span></span><br><span class="line"><span class="comment"># %d 输出日期时间，</span></span><br><span class="line"><span class="comment"># %thread 输出当前线程名，</span></span><br><span class="line"><span class="comment"># %-5level 输出日志级别，左对齐5个字符宽度</span></span><br><span class="line"><span class="comment"># %logger&#123;50&#125; 输出全类名最长50个字符，超过按照句点分割</span></span><br><span class="line"><span class="comment"># %msg 日志信息</span></span><br><span class="line"><span class="comment"># %n 换行符</span></span><br><span class="line"><span class="comment"># 修改控制台输出的日志格式</span></span><br><span class="line"><span class="string">logging.pattern.console=%d&#123;yyyy-MM-dd&#125;</span> <span class="string">[%thread]</span> <span class="string">%-5level</span> <span class="string">%logger&#123;50&#125;</span> <span class="bullet">-</span> <span class="string">%msg%n</span></span><br><span class="line"><span class="comment"># 修改文件中输出的日志格式</span></span><br><span class="line"><span class="string">logging.pattern.file=%d&#123;yyyy-MM-dd</span> <span class="string">HH:mm:ss.SSS&#125;</span> <span class="string">&gt;&gt;&gt;</span> <span class="string">[%thread]</span> <span class="string">&gt;&gt;&gt;</span> <span class="string">%-5level</span> <span class="string">&gt;&gt;&gt;</span> <span class="string">%logger&#123;50&#125;</span> <span class="string">&gt;&gt;&gt;</span> <span class="string">%msg%n</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class="line"><span class="xml">scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class="line"><span class="xml">debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class="line"><span class="xml">--&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"false"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 定义日志的根目录 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/logs/log"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 定义日志文件名称 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"appName"</span> <span class="attr">value</span>=<span class="string">"mengxuegu-spring-boot"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">         日志输出格式说明：</span></span><br><span class="line"><span class="xml">                %d        输出日期时间</span></span><br><span class="line"><span class="xml">                %thread 输出当前线程名</span></span><br><span class="line"><span class="xml">                %-5level   输出日志级别，左对齐5个字符宽度</span></span><br><span class="line"><span class="xml">                %logger</span><span class="template-variable">&#123;50&#125;</span><span class="xml"> 输出全类名最长50个字符，超过按照句点分割</span></span><br><span class="line"><span class="xml">                %msg   日志信息</span></span><br><span class="line"><span class="xml">                %n     换行符</span></span><br><span class="line"><span class="xml">        --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"> - [%thread] - %-5level - %logger</span><span class="template-variable">&#123;50&#125;</span><span class="xml"> - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"appLogAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 指定日志文件的名称 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$</span><span class="template-variable">&#123;LOG_HOME&#125;</span><span class="xml">/$</span><span class="template-variable">&#123;appName&#125;</span><span class="xml">.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名</span></span><br><span class="line"><span class="xml">        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。</span></span><br><span class="line"><span class="xml">        --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">            滚动时产生的文件的存放位置及文件名称 %d</span><span class="template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml">：按天进行日志滚动 </span></span><br><span class="line"><span class="xml">            %i：当文件大小超过maxFileSize时，按照i进行文件滚动</span></span><br><span class="line"><span class="xml">            --&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$</span><span class="template-variable">&#123;LOG_HOME&#125;</span><span class="xml">/$</span><span class="template-variable">&#123;appName&#125;</span><span class="xml">-%d</span><span class="template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml">-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。</span></span><br><span class="line"><span class="xml">         假设设置每天滚动，且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。</span></span><br><span class="line"><span class="xml">         注意，删除旧文件是，那些为了归档而创建的目录也会被删除。</span></span><br><span class="line"><span class="xml">            --&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>365<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy</span></span><br><span class="line"><span class="xml">            --&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 日志输出格式： --&gt;</span>     </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"> [ %thread ] - [ %-5level ] [ %logger</span><span class="template-variable">&#123;50&#125;</span><span class="xml"> : %line ] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">      logger主要用于存放日志对象，也可以定义日志类型、级别</span></span><br><span class="line"><span class="xml">      name：表示匹配的logger类型前缀，也就是包的前半部分</span></span><br><span class="line"><span class="xml">      level：要记录的日志级别，包括 TRACE <span class="tag">&lt; <span class="attr">DEBUG</span> &lt; <span class="attr">INFO</span> &lt; <span class="attr">WARN</span> &lt; <span class="attr">ERROR</span></span></span></span><br><span class="line"><span class="xml">      additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，</span></span><br><span class="line"><span class="xml">      false：表示只用当前logger的appender-ref，true：</span></span><br><span class="line"><span class="xml">      表示当前logger的appender-ref和rootLogger的appender-ref都有效</span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- hibernate logger --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.mengxuegu"</span> <span class="attr">level</span>=<span class="string">"debug"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Spring framework logger --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，</span></span><br><span class="line"><span class="xml">    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。 </span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"appLogAppender"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="分析日志底层实现"><a href="#分析日志底层实现" class="headerlink" title="分析日志底层实现"></a>分析日志底层实现</h3><ul>
<li><p>在web项目当中引用了spring-boot-start-web依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">spring-boot-starter-web 中引入了 spring-boot-starter 启动器</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">spring-boot-starter 中引入了 spring-boot-starter-logging 日志启动器</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">spring-boot-starter-logging 日志启动器 采用的是 logback 日志框架</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>总结：SpringBoot中默认日志启动器为<code>spring-boot-start-logging</code>,默认采用的时<code>logback</code>日志框架</li>
</ul>
</li>
<li><p>在spring-boot-2.0.6.RELEASE.jar!\org\springframework\boot\logging\logback\base.xml 做了日志 的默认配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志格式默认规定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志文件默认生成路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--控制台日志信息默认配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文件中日志信息默认配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/file-appender.xml"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别默认为： info --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>日志文件采用方式为：滚动文件遍加器</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/EA*WXskX2@I^.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/EA*WXskX2@I%5E.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/EA*WXskX2@I^.png"></a></p>
</li>
<li><p>在下面类中会读取上面xml中配置的信息</p>
<p>spring-boot-2.0.6.RELEASE.jar!org.springframework.boot.logging.LoggingSystemProperties</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/TdxWQnL*Cf5J.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/TdxWQnL*Cf5J.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/TdxWQnL*Cf5J.png"></a></p>
</li>
<li><p>如果spring boot的日志功能无法满足我们的需求（比如异步日志记录等），我们可以自己定义日志的配置文件。</p>
</li>
</ul>
</li>
</ul>
<h3 id="自定义日志配置"><a href="#自定义日志配置" class="headerlink" title="自定义日志配置"></a>自定义日志配置</h3><h4 id="自定义Logback日志配置"><a href="#自定义Logback日志配置" class="headerlink" title="自定义Logback日志配置"></a>自定义Logback日志配置</h4><ul>
<li><p>在类路径下，存放对应日志框架的自定义文件即可；spring boot就不会使用它默认的日志配置文件了。</p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>自定义日志配置文件名</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><code>logback spring.xml</code>,<code>logback spring.groovy</code>,<code>logback.xml</code>,<code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j</td>
<td><code>log4j2-spring.xml</code>,<code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK(Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody></table>
</li>
<li><p>在<code>resources</code>目录下创建<code>logback.xml</code>,文件内容如下，Spring Boot就会采用以下日志配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class="line"><span class="comment">scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class="line"><span class="comment">debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"false"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志的根目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/logs/log"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志文件名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"appName"</span> <span class="attr">value</span>=<span class="string">"mengxuegu-spring-boot"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			日志输出格式说明：</span></span><br><span class="line"><span class="comment">				    %d 		输出日期时间</span></span><br><span class="line"><span class="comment">				    %thread 输出当前线程名</span></span><br><span class="line"><span class="comment">				    %-5level  	输出日志级别，左对齐5个字符宽度</span></span><br><span class="line"><span class="comment">				    %logger&#123;50&#125; 输出全类名最长50个字符，超过按照句点分割</span></span><br><span class="line"><span class="comment">				    %msg  	日志信息</span></span><br><span class="line"><span class="comment">				    %n    	换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; - [%thread] - %-5level - %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"appLogAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定日志文件的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;appName&#125;.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名</span></span><br><span class="line"><span class="comment">        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">				滚动时产生的文件的存放位置及文件名称 %d&#123;yyyy-MM-dd&#125;：按天进行日志滚动 </span></span><br><span class="line"><span class="comment">				%i：当文件大小超过maxFileSize时，按照i进行文件滚动</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;appName&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。</span></span><br><span class="line"><span class="comment">			假设设置每天滚动，且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。</span></span><br><span class="line"><span class="comment">			注意，删除旧文件是，那些为了归档而创建的目录也会被删除。</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>365<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出格式： --&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [ %thread ] - [ %-5level ] [ %logger&#123;50&#125; : %line ] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		logger主要用于存放日志对象，也可以定义日志类型、级别</span></span><br><span class="line"><span class="comment">		name：表示匹配的logger类型前缀，也就是包的前半部分</span></span><br><span class="line"><span class="comment">		level：要记录的日志级别，包括 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</span></span><br><span class="line"><span class="comment">		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，</span></span><br><span class="line"><span class="comment">		false：表示只用当前logger的appender-ref，true：</span></span><br><span class="line"><span class="comment">		表示当前logger的appender-ref和rootLogger的appender-ref都有效</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hibernate logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.mengxuegu"</span> <span class="attr">level</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring framework logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，</span></span><br><span class="line"><span class="comment">    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。 </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"appLogAppender"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>logback.xml</code>:是直接就被日志框架加载了</p>
<p><code>logback-spring.xml</code>:配置项不会被日志框架直接加载，而是由Spring Boot解析日志配置文件，进而可以使用SpringBoot的Profile特殊配置</p>
</li>
</ul>
<h4 id="使用Profile特殊配置"><a href="#使用Profile特殊配置" class="headerlink" title="使用Profile特殊配置"></a>使用Profile特殊配置</h4><ul>
<li><p>使用日志Profile特殊配置，可根据不同的环境激活不同的日志配置</p>
<ul>
<li><p>将自定义日志配置文件名<code>logback.xml</code>改为<code>logback-spring.xml</code></p>
</li>
<li><p>修改日志配置文件中第25行， 如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; === [%thread] === %-5level ==== %logger&#123;50&#125; -</span><br><span class="line">%msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; &gt;&gt;&gt; [%thread] &gt;&gt;&gt; %-5level &gt;&gt;&gt; %logger&#123;50&#125; -</span><br><span class="line">%msg%n<span class="tag">&lt;/<span class="name">pattern</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指定运行环境  在application.properties加入<code>spring.profiles.active=dev</code></p>
<p>如果使用<code>logback.xml</code>作为日志配置文件，还指定Profile特殊配置，则会有以下报错</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ERROR in ch.qos.logback.core.joran.spi.Interpreter@28:40 - no applicable action for [<span class="string">springProfile</span>], current ElementPath is [<span class="string">[configuration</span>][<span class="symbol">appender</span>][<span class="string">layout</span>][<span class="symbol">springProfile</span>]]</span><br><span class="line">at</span><br><span class="line">org.springframework.boot.logging.logback.LogbackLoggingSystem.loadConfiguration(LogbackLoggingSystem.java:169)</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a>切换日志框架</h3><ul>
<li>将SpringBoot默认的<code>logback</code>切换为<code>log4j2</code>日志框架， <a href="https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-logging" target="_blank" rel="noopener">参考链接</a></li>
</ul>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/0b05EcCIQE2N.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/0b05EcCIQE2N.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/0b05EcCIQE2N.png"></a></p>
<ul>
<li><p>在项目的pom.xml切换log4j2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">先排除 spring-boot-starter-logging 日志启动器</span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">再使用 log4j2 日志启动器</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 错误处理机制</title>
    <url>/2020/10/13/SpringBoot%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>我们所开发的项目大多是直接面向用户的，而程序出现异常往往是不可避免的，那该如何减少程序异常对用户体验的影响呢？</p>
<p>下面来介绍SpringBoot为我们提供的处理方式。</p>
<a id="more"></a>

<h3 id="默认的错误处理机制"><a href="#默认的错误处理机制" class="headerlink" title="默认的错误处理机制"></a>默认的错误处理机制</h3><h4 id="出现错误时页面效果"><a href="#出现错误时页面效果" class="headerlink" title="出现错误时页面效果"></a>出现错误时页面效果</h4><ul>
<li><p>浏览器发送一个不存在的请求时，会报404</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Uv4442MOE3zs.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/Uv4442MOE3zs.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Uv4442MOE3zs.png"></a></p>
</li>
<li><p>服务器内部发生错误的时候，页面会返回500</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BillController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/bills"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//模拟500错误</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"bill/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Bn*ErCY37bAy.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/Bn*ErCY37bAy.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Bn*ErCY37bAy.png"></a></p>
</li>
<li><p>无论是发生什么错误，SpringBoot都会返回一个状态码以及一个错误页面，这个错误页面是怎么来的呢？</p>
</li>
</ul>
<h4 id="底层原理分析"><a href="#底层原理分析" class="headerlink" title="底层原理分析"></a>底层原理分析</h4><blockquote>
<p>底层原理关注<code>ErrorMvcAutoConfiguration</code>错误自动配置类</p>
</blockquote>
<p><strong>第一步：</strong></p>
<p><code>ErrorPageCustomizer</code>错误页面定制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorPageCustomizer</span> <span class="keyword">implements</span> <span class="title">ErrorPageRegistrar</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerErrorPages</span><span class="params">(ErrorPageRegistry errorPageRegistry)</span> </span>&#123;</span><br><span class="line">        ErrorPage errorPage = <span class="keyword">new</span> ErrorPage(</span><br><span class="line">            <span class="keyword">this</span>.dispatcherServletPath.getRelativePath(</span><br><span class="line">      <span class="comment">//出现错误后来到/error请求进行处理（类似web.xml注册的错误页面规则）</span></span><br><span class="line">            <span class="keyword">this</span>.properties.getError().getPath())); <span class="comment">//private String path = "/error";</span></span><br><span class="line">        errorPageRegistry.addErrorPages(<span class="keyword">new</span> ErrorPage[]&#123;errorPage&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当应用出现了4xx或5xx之类的错误，ErrorPageCustomizer就会被激活，它主要用于定制错误 处理的响应规则，就会发送一个/error请求，它会交给BasicErrorController进行处理</p>
<p><strong>第二步：</strong></p>
<p><code>BasicErrorController</code>就会接收/error请求处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过请求头判断调用以下哪个访问：text/html</span></span><br><span class="line">    <span class="comment">//响应HTML类型数据 接收浏览器发送的请求</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(produces = &#123;<span class="string">"text/html"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">        Map&lt;String, Object&gt; model = Collections.unmodifiableMap(<span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class="line">        response.setStatus(status.value());</span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面，包括页面地址与页面内容，里面有一个ErrorViewResolver</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">this</span>.resolveErrorView(request, response, status, model);</span><br><span class="line">        <span class="comment">//没有找到，则找error视图，</span></span><br><span class="line">        <span class="comment">//在ErrorMvcAutoConfiguration的defaultErrorView中</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView != <span class="keyword">null</span> ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过请求头判断：*/*</span></span><br><span class="line">    <span class="comment">//响应json类型数据 接收其他客户端发送的请求</span></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">        HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">        <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(status);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; body = <span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(body, status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>BasicErrorController</code>会接收一个/error请求，两个方法处理 </p>
<p>​    第一个errorHtml响应html数据</p>
<p>​    还有一个error用来响应json数据，</p>
<p>使用了ErrorViewResolver(DefaultErrorViewResolver)组件进行封装视图</p>
<p><strong>第三步：</strong></p>
<p><code>DefaultErrorViewResolver</code>去解析具体响应的错误页面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorViewResolver</span> <span class="keyword">implements</span> <span class="title">ErrorViewResolver</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">this</span>.resolve(String.valueOf(status.value()), model);</span><br><span class="line">        <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">            <span class="comment">//找4xx 5xx页面</span></span><br><span class="line">            modelAndView = <span class="keyword">this</span>.resolve((String)SERIES_VIEWS.get(</span><br><span class="line">                status.series()), model);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//SpringBoot默认根据装填码响应状态码页面 如error/404 (templates/errr/404.html)</span></span><br><span class="line">        String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">        <span class="comment">//如果模板引擎解析这个页面地址，则使用模板引擎解析</span></span><br><span class="line">        TemplateAvailabilityProvider provider = </span><br><span class="line">            <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName, </span><br><span class="line">            <span class="keyword">this</span>.applicationContext);</span><br><span class="line">        <span class="comment">//如果模板引擎可用，返回errorViewName指定的视图</span></span><br><span class="line">        <span class="keyword">return</span> provider != <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(errorViewName, model) </span><br><span class="line">       <span class="comment">//如果模板引擎不可用，则调用以下方法，在静态资源目录下找errorViewName对应的页面</span></span><br><span class="line">            : <span class="keyword">this</span>.resolveResource(errorViewName, model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolveResource</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从静态资源目录下找状态码的错误页面，如404.html</span></span><br><span class="line">        String[] var3 = <span class="keyword">this</span>.resourceProperties.getStaticLocations();</span><br><span class="line">        <span class="keyword">int</span> var4 = var3.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> var5 = <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">            String location = var3[var5];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Resource resource = <span class="keyword">this</span>.applicationContext.getResource(location);</span><br><span class="line">                resource = resource.createRelative(viewName + <span class="string">".html"</span>);</span><br><span class="line">                <span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> DefaultErrorViewResolver.HtmlResourceView(resource), model);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//还可以定义4xx 5xx的页面信息</span></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">        Map&lt;Series, String&gt; views = <span class="keyword">new</span> EnumMap(Series<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        views.put(Series.CLIENT_ERROR, <span class="string">"4xx"</span>);</span><br><span class="line">        views.put(Series.SERVER_ERROR, <span class="string">"5xx"</span>);</span><br><span class="line">        SERIES_VIEWS = Collections.unmodifiableMap(views);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>通过以上分析则可以自定义错误页面</strong></p>
<p><strong>第四步：</strong></p>
<p><code>DefaultErrorAttributes</code>错误页面可获取的数据信息</p>
<p>通关BasicErrorController的方法中响应的module可定位到响应哪些数据，从而引出<code>ErrorAttributes</code>的实现类<code>DefaultErrorAttributes</code>,<code>DefaultErrorAttributes</code>中绑定的所有值都可以在页面获取到。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractErrorController</span> <span class="keyword">implements</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//以下接口实现类 DefaultErrorAttributes 封装了响应的错误数据。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ErrorAttributes errorAttributes;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorAttributes</span> <span class="keyword">implements</span> <span class="title">ErrorAttributes</span>, <span class="title">HandlerExceptionResolver</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; errorAttributes = <span class="keyword">this</span>.getErrorAttributes(webRequest, options.isIncluded(Include.STACK_TRACE));</span><br><span class="line">        <span class="keyword">if</span> (Boolean.TRUE.equals(<span class="keyword">this</span>.includeException)) &#123;</span><br><span class="line">            options = options.including(<span class="keyword">new</span> Include[]&#123;Include.EXCEPTION&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!options.isIncluded(Include.EXCEPTION)) &#123;</span><br><span class="line">            errorAttributes.remove(<span class="string">"exception"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!options.isIncluded(Include.STACK_TRACE)) &#123;</span><br><span class="line">            errorAttributes.remove(<span class="string">"trace"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!options.isIncluded(Include.MESSAGE) &amp;&amp; errorAttributes.get(<span class="string">"message"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            errorAttributes.put(<span class="string">"message"</span>, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!options.isIncluded(Include.BINDING_ERRORS)) &#123;</span><br><span class="line">            errorAttributes.remove(<span class="string">"errors"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> errorAttributes;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">下面省略一大波可获取的数据</span><br><span class="line">timestamp：时间戳</span><br><span class="line">status：状态码</span><br><span class="line">error：错误提示</span><br><span class="line">exception：异常对象</span><br><span class="line">message：异常消息</span><br><span class="line">errors：JSR303数据校验出现的错误</span><br></pre></td></tr></table></figure>



<h3 id="自定义错误响应页面"><a href="#自定义错误响应页面" class="headerlink" title="自定义错误响应页面"></a>自定义错误响应页面</h3><ul>
<li><p>第一种：有模板引擎</p>
<ul>
<li><p><code>error/状态码</code> ：精准匹配，将错误页面命名为<code>错误状态码.html</code>放在模板引擎目录<code>templates</code>下的<code>error</code>目录下，发生对应状态码错误时，就会响应对应的模板页面</p>
</li>
<li><p><code>error/4xx</code>、<code>error/5xx</code>：模糊匹配，可以将错误页面命名为<code>4xx</code>和<code>5xx</code>，用来匹配对应类型的所有错误</p>
</li>
<li><p>采取精准优先</p>
</li>
<li><p>错误页面可获取的数据信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">timestamp：时间戳</span></span><br><span class="line"><span class="attr">status：状态码</span></span><br><span class="line"><span class="attr">error：错误提示</span></span><br><span class="line"><span class="attr">exception：异常对象</span></span><br><span class="line"><span class="attr">message：异常消息</span></span><br><span class="line"><span class="attr">errors：JSR303数据校验出现的错误</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>第二种：没有模板引擎（模板引擎找不到对应的错误页面）</p>
<ul>
<li>在静态资源目录下的error目录中找</li>
</ul>
</li>
<li><p>第三种：模板目录与静态目录下都找不到对应的错误页面，就响应SpringBoot默认的错误页面</p>
<p>通过<code>BasicErrorController</code>的errorhtml方法最后一行可知，没有找到则找error视图对象，error定义在<code>ErrorMvcAutoConfiguration</code>的<code>defaultErrorView</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Conditional</span>(&#123;ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">protected</span> <span class="title">static</span> <span class="title">class</span> <span class="title">WhitelabelErrorViewConfiguration</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ErrorMvcAutoConfiguration.StaticView defaultErrorView = <span class="keyword">new</span> ErrorMvcAutoConfiguration.StaticView();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">WhitelabelErrorViewConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span>(</span><br><span class="line">            name = &#123;<span class="string">"error"</span>&#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span>(</span><br><span class="line">            name = &#123;<span class="string">"error"</span>&#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">defaultErrorView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.defaultErrorView;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="自定义数据进行响应"><a href="#自定义数据进行响应" class="headerlink" title="自定义数据进行响应"></a>自定义数据进行响应</h3><ul>
<li><p>分析：</p>
<p>出现错误以后，会发送<code>/error</code>请求，会被<code>BasicErrorController</code>处理，而响应的数据是由getErrorAttributes封装的（就是ErrorController的实现类AbstractErrorController.getErrorAttributes的方法），所以我们只需要自定义<code>ErrorAttributes</code>实现类即可</p>
<ul>
<li><p>自定义<code>ErrorAttributes</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//向容器中添加组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest, options);</span><br><span class="line">        map.put(<span class="string">"cuowu"</span>,<span class="string">"自定义错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>错误页面获取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">4xx错误。。</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>[[$&#123;cuowu&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot的Web开发(1)</title>
    <url>/2020/09/29/SpringBoot%E7%9A%84Web%E5%BC%80%E5%8F%91(1)/</url>
    <content><![CDATA[<ul>
<li><p>Web开发是项目实战中至关重要的一部分，Web开发的核心内容主要包括嵌入的Servlet容器和SpringMVC</p>
</li>
<li><p>Web开发官方文档：        <a href="https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-spring-mvc" target="_blank" rel="noopener">官方文档</a></p>
<a id="more"></a>

</li>
</ul>
<h3 id="Web开发支持"><a href="#Web开发支持" class="headerlink" title="Web开发支持"></a>Web开发支持</h3><ul>
<li><p>Spring  Boot为Web开发提供了<code>spring-boot-starter-web</code>启动器作为基本支持，为我们提供了嵌入的Tomcat以及Spring MVC的依赖支持。（参考：pom.xml）</p>
</li>
<li><p>也提供了很多不同场景的自动配置类，让我们只需要在配置文件中指定少量的配置即可启动项目。自动配置类存储在<code>spring-boot-autoconfigure.jar</code>的<code>org.springframework.book.autoconfigure</code>包下。</p>
<p><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/uev0U%5E9L*xjr.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/uev0U^9L*xjr.png"></p>
</li>
<li><p>自动配置场景SpringBoot帮我们配置了什么？是否修改？能修改哪些配置？是否可以拓展？…</p>
</li>
<li><p>自动配置类举例：</p>
<ul>
<li><p>文件名可以看出</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">xxxxAutoConfiguration :</span>向容器中添加自动配置组件</span><br><span class="line"><span class="string">xxxxProperties :</span>使用自动配置类 来封装配置文件内容</span><br></pre></td></tr></table></figure>
</li>
<li><p>SpringMVC配置 ：WebMvcAutoConfiguration和webMvcProperties</p>
<p><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/I@Qhvzupc1lS.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/I@Qhvzupc1lS.png"></p>
</li>
<li><p>内嵌Servlet容器 ：ServletWebServerFactoryAutoConfiguration和ServerProperties</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/4VXlrnJ4mMTb.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/4VXlrnJ4mMTb.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/4VXlrnJ4mMTb.png"></a></p>
</li>
<li><p>上传文件的属性 ：MultipartAutoConfiguration和MultiparProperties</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/F2jpq1Q0Dwav.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/F2jpq1Q0Dwav.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/F2jpq1Q0Dwav.png"></a></p>
</li>
<li><p>JDBC : DataSourceAutoConfiguration 和DataSourceProperties</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/0^!cJq4aF1JM.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/0%5E!cJq4aF1JM.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/0^!cJq4aF1JM.png"></a></p>
</li>
<li><p>等等……</p>
</li>
</ul>
<h3 id="静态资源的映射规则"><a href="#静态资源的映射规则" class="headerlink" title="静态资源的映射规则"></a>静态资源的映射规则</h3><ul>
<li>对静态资源的映射规则，可通过分析WebMvcAutoConfiguration自动配置类得到</li>
</ul>
<h4 id="webjars资源映射"><a href="#webjars资源映射" class="headerlink" title="webjars资源映射"></a>webjars资源映射</h4><ul>
<li><p>在 WebMvcAuotConfiguration.addResourceHandlers() 分析webjars 资源映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">               logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">               CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">               <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">         </span><br><span class="line"><span class="comment">//收到 /webjars/**请求后 ，会去classpath:/META-INF/resources/webjars/ 查找资源文件</span></span><br><span class="line">                  <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">               &#125;</span><br><span class="line">    </span><br><span class="line">               String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">               <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">               &#125;</span><br><span class="line">    </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>1.所有<code>/webjars/**</code>请求，都会去<code>classpath:/META-INF/resources/webjars/</code>目录找对应资源文件</p>
<p>2.webjars ：以jar包的方式引入静态资源</p>
<p>​         webjars官网 ：<a href="https://www.webjars.org/" target="_blank" rel="noopener">https://www.webjars.org/</a></p>
<p>3.在官网打开资源文件的依赖配置信息，然后粘贴到pom.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入 jquery webjars--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.访问localhost:8080/web.jars/jquery/3.5.5/jquery.js会在下面路径中查找</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/GnEhl62x!5lu.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/GnEhl62x!5lu.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/GnEhl62x!5lu.png"></a></p>
</li>
</ul>
<h4 id="其他静态资源映射"><a href="#其他静态资源映射" class="headerlink" title="其他静态资源映射"></a>其他静态资源映射</h4><ul>
<li><p>在WebMvcAutoConfiguration.addResourceHandlers()分析 访问其他资源映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">                CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line">				<span class="comment">//接收 /**</span></span><br><span class="line">                String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>staticPathPattern处理其他访问的静态路径，从WebMVCProperties构造器中获取到/**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.localeResolver = WebMvcProperties.LocaleResolver.ACCEPT_HEADER;</span><br><span class="line">       <span class="keyword">this</span>.format = <span class="keyword">new</span> WebMvcProperties.Format();</span><br><span class="line">       <span class="keyword">this</span>.dispatchTraceRequest = <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">this</span>.dispatchOptionsRequest = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">this</span>.ignoreDefaultModelOnRedirect = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">this</span>.publishRequestHandledEvents = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">this</span>.throwExceptionIfNoHandlerFound = <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">this</span>.logResolvedException = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 接收 /**请求</span></span><br><span class="line">       <span class="keyword">this</span>.staticPathPattern = <span class="string">"/**"</span>;</span><br><span class="line">       <span class="keyword">this</span>.async = <span class="keyword">new</span> WebMvcProperties.Async();</span><br><span class="line">       <span class="keyword">this</span>.servlet = <span class="keyword">new</span> WebMvcProperties.Servlet();</span><br><span class="line">       <span class="keyword">this</span>.view = <span class="keyword">new</span> WebMvcProperties.View();</span><br><span class="line">       <span class="keyword">this</span>.contentnegotiation = <span class="keyword">new</span> WebMvcProperties.Contentnegotiation();</span><br><span class="line">       <span class="keyword">this</span>.pathmatch = <span class="keyword">new</span> WebMvcProperties.Pathmatch();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ResourceProperties根据请求查找资源文件，从以下四个路径中查找（静态资源目录）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.resources"</span>,</span><br><span class="line">    ignoreUnknownFields = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/"</span>, <span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> String[] staticLocations;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> addMappings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties.Chain chain;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties.Cache cache;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/resources/"</span>, </span><br><span class="line"><span class="string">"classpath:/static/"</span>, </span><br><span class="line"><span class="string">"classpath:/public/"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>总结</p>
<ul>
<li><p>当接收到<code>/**</code>请求访问资源时，会被映射到下面4个类路径下的静态资源目录中查找</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">classpath:</span>/META-INF<span class="meta-keyword">/resources/</span></span><br><span class="line"><span class="symbol">classpath:</span><span class="meta-keyword">/resources/</span></span><br><span class="line"><span class="symbol">classpath:</span><span class="meta-keyword">/static/</span></span><br><span class="line"><span class="symbol">classpath:</span><span class="meta-keyword">/public/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问localhost:8080/style.css会在上面四个路径中查找文件</p>
</li>
</ul>
</li>
</ul>
<h4 id="欢迎页映射"><a href="#欢迎页映射" class="headerlink" title="欢迎页映射"></a>欢迎页映射</h4><ul>
<li><p>在 WebMvcAuotConfiguration.welcomePageHandlerMapping() 分析 欢迎页映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">            WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(<span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, </span><br><span class="line"> <span class="comment">//=====查找欢迎页  =====</span></span><br><span class="line">                                                                                                <span class="keyword">this</span>.getWelcomePage(), <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">           ....</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>getWelcomePage() 方法获取 欢迎页面 可存储路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            String[] locations =</span><br><span class="line">                <span class="comment">//2.上面说的4个静态资源路径加上"/"路径</span></span><br><span class="line">                WebMvcAutoConfiguration.getResourceLocations(</span><br><span class="line">                <span class="comment">//1.获取上面说的4个静态资源路径</span></span><br><span class="line">                <span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">    		<span class="comment">//在上面路径下查找index.html页面</span></span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).</span><br><span class="line">                filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//上面获取的路径中查找index.html页面</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">"index.html"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>分析后，会从4个静态资源目录+根路径<code>/</code>中 查找index.html页面</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">classpath:/META-INF/resources/</span><br><span class="line">classpath:/resources/</span><br><span class="line">classpath:/<span class="keyword">static</span>/</span><br><span class="line">classpath:/<span class="keyword">public</span>/</span><br><span class="line">/: 当前项目根路径下</span><br></pre></td></tr></table></figure>
</li>
<li><p>会在静态资源目录下与根路径查找（按该顺序）index.html页面；收到”/**”请求映射</p>
</li>
<li><p>访问localhost:8080/会在上面5个目录中查找index.html页面（因为/页属于/**）</p>
</li>
</ul>
<h4 id="图标映射"><a href="#图标映射" class="headerlink" title="图标映射"></a>图标映射</h4><ul>
<li><p>Spring Boot 会在静态资源目录下 与 根路径(按该顺序) 查找 favicon.ico 页面； 如果存在这样的文件，Spring Boot 会自动将其设置为应用图标。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">classpath:/META-INF/resources/</span><br><span class="line">classpath:/resources/</span><br><span class="line">classpath:/<span class="keyword">static</span>/</span><br><span class="line">classpath:/<span class="keyword">public</span>/</span><br><span class="line">/: 当前项目根路径下</span><br></pre></td></tr></table></figure>

































</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot入门项目实践1</title>
    <url>/2020/09/16/springboot%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B51/</url>
    <content><![CDATA[<h2 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><a id="more"></a>
<ul>
<li>jdk1.8</li>
<li>Maven3.x</li>
<li>IntelliJ IDEA</li>
<li>Spring Boot</li>
</ul>
<h3 id="修改maven配置文件"><a href="#修改maven配置文件" class="headerlink" title="修改maven配置文件"></a>修改maven配置文件</h3><ul>
<li>在maven目录conf文件夹下settings.xml配置文件添加如下内容<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开始处更改下载依赖的存放路径， 以下目录需要已经创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\javasource\maven-repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在 mirrors 标签下 添加阿里云maven私服库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 profiles 标签下指定jdk版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="IntelliJ-IDEA设置"><a href="#IntelliJ-IDEA设置" class="headerlink" title="IntelliJ IDEA设置"></a>IntelliJ IDEA设置</h3></li>
<li>添加maven环境<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/R8CXuSw^LYMD.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/R8CXuSw%5ELYMD.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/R8CXuSw^LYMD.png"></a></li>
</ul>
<h3 id="快速构建Spring-Boot项目"><a href="#快速构建Spring-Boot项目" class="headerlink" title="快速构建Spring Boot项目"></a>快速构建Spring Boot项目</h3><ul>
<li>需求：浏览器发送/hello请求，服务器接收请求并处理，响应Hello World 字符串</li>
<li>分析：构建Spring Boot项目，事实上建立的就是一个Maven项目<h4 id="创建Mven工程"><a href="#创建Mven工程" class="headerlink" title="创建Mven工程"></a>创建Mven工程</h4></li>
<li>在IDEA上新建一个空的jar类型的maven工程<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/G6aE4BbSG7D7.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/G6aE4BbSG7D7.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/G6aE4BbSG7D7.png"></a><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/4!qwhzJzP0N@.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/4!qwhzJzP0N@.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/4!qwhzJzP0N@.png"></a><h4 id="修改pom-xml文件"><a href="#修改pom-xml文件" class="headerlink" title="修改pom.xml文件"></a>修改pom.xml文件</h4></li>
<li>在pom.xml中添加spring boot相关的父级依赖，<code>spring-boot-starter-parent</code>是一个特殊的starter，它提供了项目相关的默认依赖，使用它之后，常用的包依赖可以省去<code>version</code>标签</li>
<li>在<code>dependencies</code>添加构建web项目相关的依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>等待下载结束，会发现工程自动添加了很多jar包，这些jar包正是开发时需要导入的jar包<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/vO9GaAxoAFGz.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/vO9GaAxoAFGz.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/vO9GaAxoAFGz.png"></a></li>
</ul>
<h4 id="创建控制器Controller"><a href="#创建控制器Controller" class="headerlink" title="创建控制器Controller"></a>创建控制器Controller</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bdu.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"helloWorld..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建一个引导类"><a href="#创建一个引导类" class="headerlink" title="创建一个引导类"></a>创建一个引导类</h4><ul>
<li>主要作用是作为启动spring boot项目的入口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bdu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMailAppliation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(HelloMailAppliation<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4></li>
<li>运行引导类后，会出现如下一个标识<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/hzMzsOHXh4Wt.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/hzMzsOHXh4Wt.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/hzMzsOHXh4Wt.png"></a></li>
<li>在浏览器地址输入 <code>localhost:8080/hello</code>即可看到运行结果<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/UMNmNhJs7Yz7.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/UMNmNhJs7Yz7.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/UMNmNhJs7Yz7.png"></a><h3 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h3></li>
<li>在pom.xml添加如下插件后，将这个工程打成jar包后，可直接通过<code>java -jar</code>的命令运行<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--可以将当前项目打包成一个jar包进行运行--&gt;</span><br><span class="line">   &lt;build&gt;</span><br><span class="line">       &lt;plugins&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br><span class="line">       &lt;/plugins&gt;</span><br><span class="line">   &lt;/build&gt;</span><br></pre></td></tr></table></figure></li>
<li>如下操作进行打成jar包，从控制台可发现打成jar包所在目录<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/A1Y0bvwEGg54.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/A1Y0bvwEGg54.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/A1Y0bvwEGg54.png"></a></li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>markdown使用手册_基础篇</title>
    <url>/2020/05/11/markdown%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C_%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<blockquote>
<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p>
</blockquote>
<blockquote>
<p>不说废话 直接来干货 反正也是我自己看</p>
</blockquote>
<a id="more"></a>


<hr>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">样式</a></li><li class="tab"><a href="#tab-2">代码</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5></div><div class="tab-pane" id="tab-2"><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br></pre></td></tr></table></figure></div></div></div>



<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>样式:</p>
<blockquote>
<p>一级引用</p>
</blockquote>
<blockquote>
<blockquote>
<p>二级引用</p>
</blockquote>
</blockquote>
<p>嵌套引用</p>
<blockquote>
<p>1    </p>
<blockquote>
<p>2</p>
<blockquote>
<p>3</p>
</blockquote>
</blockquote>
</blockquote>
<p>代码:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span> 二级引用</span><br><span class="line"></span><br><span class="line">嵌套引用</span><br><span class="line">&gt;<span class="number">1</span>    </span><br><span class="line"><span class="meta">&gt;&gt;</span><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h1 id="字体与分割线"><a href="#字体与分割线" class="headerlink" title="字体与分割线"></a>字体与分割线</h1><p>样式：<br>分割线：</p>
<hr>
<h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a><strong>粗体</strong></h2><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a><em>斜体</em></h2><h2 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a><strong><em>斜体加粗</em></strong></h2><h2 id="键盘体"><a href="#键盘体" class="headerlink" title="键盘体"></a><kbd>键盘体</kbd></h2><h2 id="加框文字-这是不加框的文字"><a href="#加框文字-这是不加框的文字" class="headerlink" title="加框文字 这是不加框的文字"></a><code>加框文字</code> 这是不加框的文字</h2><h2 id="行内代码println-a-println-a"><a href="#行内代码println-a-println-a" class="headerlink" title="行内代码println(a); println(a);"></a>行内代码<code>println(a);</code> println(a);</h2><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a><del>删除线</del></h2><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a><ins>下划线</ins></h2><p>代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**粗体**</span> 或者 <span class="strong">__粗体__</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">*斜体*</span> 或者 <span class="emphasis">_斜体_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">***斜体加粗**</span>* 或者  <span class="strong">___斜体加粗__</span>_</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>键盘体<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> (html标签)</span><br><span class="line"></span><br><span class="line"><span class="code">`加框文字`</span></span><br><span class="line"></span><br><span class="line"><span class="code">``行内代码`</span>`</span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ins</span>&gt;</span></span>下划线<span class="xml"><span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span> (html标签)</span><br><span class="line"></span><br><span class="line">分割线：使用三个或者三个以上的(-)或者(*)</span><br><span class="line">例如：  ---   或者  <span class="emphasis">***</span></span><br></pre></td></tr></table></figure>

<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表样式：</p>
<ul>
<li>列表内容A</li>
</ul>
<ul>
<li>列表内容B</li>
</ul>
<ul>
<li>列表内容C</li>
</ul>
<p>有序列表样式：</p>
<ol>
<li>列表内容1</li>
<li>列表内容2</li>
<li>列表内容3</li>
</ol>
<p>列表嵌套：只要在上一级和下一级之间敲三个空格即可<br>（同类型和不同类型的列表都可以嵌套）<br>例如：</p>
<ul>
<li>一级列表A<ol>
<li>二级列表1</li>
<li>二级列表2</li>
<li>二级列表3</li>
</ol>
</li>
</ul>
<ul>
<li>一级列表B<ol>
<li>二级列表1</li>
<li>二级列表2</li>
<li>二级列表3</li>
</ol>
</li>
</ul>
<p>代码：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">无序列表用+ - * 任何一种都可以</span><br><span class="line">- 列表内容A</span><br><span class="line">+ 列表内容B</span><br><span class="line">* 列表内容C</span><br><span class="line"></span><br><span class="line">有序列表用 数字+.的形式</span><br><span class="line"><span class="number">1.</span> 列表内容<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 列表内容<span class="number">2</span></span><br><span class="line"><span class="number">3.</span> 列表内容<span class="number">3</span></span><br><span class="line"></span><br><span class="line">列表嵌套：只要在上一级和下一级之间敲三个空格即可</span><br><span class="line">（同类型和不同类型的列表都可以嵌套）</span><br><span class="line">例如：</span><br><span class="line">* 一级列表A</span><br><span class="line">   <span class="number">1.</span> 二级列表<span class="number">1</span></span><br><span class="line">   <span class="number">2.</span> 二级列表<span class="number">2</span></span><br><span class="line">   <span class="number">3.</span> 二级列表<span class="number">3</span></span><br><span class="line">- 一级列表B</span><br><span class="line">   <span class="number">1.</span> 二级列表<span class="number">1</span></span><br><span class="line">   <span class="number">2.</span> 二级列表<span class="number">2</span></span><br><span class="line">   <span class="number">3.</span> 二级列表<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h1 id="插入媒体与超链接"><a href="#插入媒体与超链接" class="headerlink" title="插入媒体与超链接"></a>插入媒体与超链接</h1><p>代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">插入图片：</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">图片地址 "可选标题"</span>)</span><br><span class="line"></span><br><span class="line">插入视频等其他媒体：</span><br><span class="line">可以直接使用HTML的标签，也可以在现在主流媒体网站的分享选项中，找到插入的代码。CtrlC即可！</span><br><span class="line"></span><br><span class="line">超链接 和 邮箱地址：：</span><br><span class="line">[<span class="string">超链接名</span>](<span class="link">超链接Url "可选标题"</span>)</span><br><span class="line">或者</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">邮箱地址</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">注意：可选标题都可以不写，这是鼠标移上去显示的名称。</span><br><span class="line">Markdown语法不支持链接在新的标签页中打开，不过有些网站做了特殊处理，是可以的。有的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</span><br></pre></td></tr></table></figure>
<p>效果：<br>图片：<br><img src="https://www.baidu.com/img/bd_logo1.png" alt="图片描述" title="百度"><br>超链接：<br><a href="https://www.baidu.com" target="_blank" rel="noopener" title="百度">百度</a><br>邮箱：<br><a href="mailto:&#49;&#x35;&#x38;&#x34;&#53;&#52;&#54;&#x37;&#54;&#x30;&#x40;&#x71;&#113;&#46;&#99;&#111;&#109;">&#49;&#x35;&#x38;&#x34;&#53;&#52;&#54;&#x37;&#54;&#x30;&#x40;&#x71;&#113;&#46;&#99;&#111;&#109;</a></p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>样式：</p>
<table>
<thead>
<tr>
<th align="left">表头A</th>
<th align="center">表头B</th>
<th align="right">表头C</th>
</tr>
</thead>
<tbody><tr>
<td align="left">内容居左</td>
<td align="center">内容居中</td>
<td align="right">内容居右</td>
</tr>
<tr>
<td align="left">内容居左</td>
<td align="center">内容居中</td>
<td align="right">内容居右</td>
</tr>
</tbody></table>
<p>代码:</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">表头A</span>|<span class="string">表头B</span>|<span class="string">表头C</span>|</span><br><span class="line">|<span class="string">:--</span>|<span class="string">:--:</span>|<span class="string">--:</span>|</span><br><span class="line">|<span class="string">内容居左</span>|<span class="string">内容居中</span>|<span class="string">内容居右</span>|</span><br><span class="line">|<span class="string">内容居左</span>|<span class="string">内容居中</span>|<span class="string">内容居右</span>|</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，有时候可以多加几个，不过有可能有些编辑器会出问题。</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 |<span class="string"> 包起来。也可以省略。</span></span><br></pre></td></tr></table></figure>

<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>样式：</p>
<figure class="highlight java"><figcaption><span>这是代码</span><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">&#123;```&#125;[指定一种语言（也可以不指定）] [title] [url] [link <span class="built_in">text</span>]</span><br><span class="line">（常见的支持：HTML、C、C#、CSS、Delphi、Java、JavaScript、JSON、Php、Python、Shell、SQL、XML、Matlab、GO等等还有很多）</span><br><span class="line">例如：</span><br><span class="line">&#123;```&#125;Java 这是代码 https:<span class="comment">//www.baidu.com 百度</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.<span class="built_in">println</span>(<span class="string">"Hello World"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#123;```&#125;</span><br><span class="line">使用时去掉大括号</span><br><span class="line"></span><br><span class="line">或者代码区块使用 <span class="number">4</span> 个空格或者一个制表符（Tab 键）</span><br></pre></td></tr></table></figure>

<h1 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h1><p>MarkDown 还有<del>脚注（[^ 要注明的文本]）</del>（没试出来不知道是不是写的有啥问题），</p>
<p>使用反斜杠、感叹号、花括号进行  <strong><u><span class="label danger">转义</span></u></strong> 等等，</p>
<p>这些之外，他还全面支持 <strong><u><span class="label danger">HTML标签</span></u></strong>，有些时候也可以使用 HTML 标签来编写文档。</p>
<p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax <strong><u><span class="label danger">对数学公式进行渲染</span></u></strong> </p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot入门项目实践2</title>
    <url>/2020/09/19/springboot%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B52/</url>
    <content><![CDATA[<h2 id="Sprng-Boot项目底层原理"><a href="#Sprng-Boot项目底层原理" class="headerlink" title="Sprng Boot项目底层原理"></a>Sprng Boot项目底层原理</h2><h3 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h3><a id="more"></a>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--当前hello项目的 父级依赖--&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.06.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>spring-boot-starter-parent</code>是当前项目的父级依赖<ol>
<li><code>spring-boot-starter</code>:Spring Boot场景启动器，Spring Boot将所有的功能场景抽取出来，做成一个个starter（启动器），只需项目里引入相关场景的starter，就会将它所有依赖导入进来。要用什么功能就导入什么场景的启动器。（各种启动器可参见官方文档starter）</li>
<li><code>spring-boot-starter-parent</code>:它父依赖<code>spring-boot-dependencies</code>,参见下面：<figure class="highlight"><table><tr><td class="code"><pre><span class="line"> &lt;!--spring-boot-starter-parent 的 父级依赖--&gt;</span><br><span class="line"> &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>spring-boot-dependencies</code>是管理了Spring Boot项目中的所有依赖版本<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/2tXn1rQ0!r1w.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/2tXn1rQ0!r1w.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/2tXn1rQ0!r1w.png"></a></li>
<li>以后我们导入依赖默认不需要写版本号，也就是可以省去<code>version</code>标签。（当前没有在dependencies中管理的依赖自然需要声明版本号）</li>
</ol>
</li>
</ol>
</li>
<li>spring-boot-starter-web  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>依赖导入了Web项目运行所需要的组件；如Tomcat/SpringMVC等</li>
</ol>
</li>
</ul>
<h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mengxuegu;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  *  @SpringBootApplication 用于标识一个引导类,说明当前是Spring Boot项目</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMailAppliation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         SpringApplication.run(HelloMailAppliation<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>通常有一个名为*Application的入口类，里面定义一个main方法，使用<code>SpringApplication.run(HelloMailAppliation.class, args);</code>来启动SpringBoot应用项目</p>
</li>
<li><p>@SpringBootApplication注解说明：</p>
<ul>
<li>标注在某个类上，说明这个类是spring boot的引导类，spring boot就应该运行这个类的main方法来启动SpringBoot应用；</li>
<li>@SpringBootApplication是以下三个注解的总和：<ol>
<li><code>@SpringBootConfiguration</code>:用于定义一个Spring Boot的配置类（配置类等同配置文件）<ul>
<li>引用了@Configuration注解，是Spring底层的一个注解，用于定义Spring的配置类。</li>
<li>配置类也是容器中的一个组件 @Component</li>
</ul>
</li>
<li><code>EnableAutoConfiguration</code>:<ul>
<li>告诉Spring Boot开启自动配置功能，这样Spring Boot会自动根据你导入的依赖jar包来自动配置项目。</li>
<li>@AutoConfigurationPackage–》@Import({Registrar.class})<ul>
<li>会将引导类(@SpringBootApplication标注的类)所在的包及下面所有子包里面的所有组件扫描到Spring容器;</li>
</ul>
</li>
<li>@Import({AutoConfigurationImportSelector,class})<ul>
<li>将所有需要导入的组件以全类名的方式返回;这些组件就会被添加到容器中</li>
<li>会给容器导入非常多的自动配置类(xxxxAutoConfiguration),就是导入并配置好当前项目中所需的组件，省去我们手动编写配置去注入组件。</li>
</ul>
</li>
<li>Spring Boot在启动的时候从(spring-boot-autoconfigure-2.0.6.RELEASE.jar)类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作； 以前我们需要自己配置的文件，自动配置类都帮我们完成了；</li>
</ul>
</li>
<li><code>@ComponentScan</code>:该注解标识的类会被Spring自动扫描并且装入bean容器。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="使用Spring初始化器创建Spring-Boot项目"><a href="#使用Spring初始化器创建Spring-Boot项目" class="headerlink" title="使用Spring初始化器创建Spring Boot项目"></a>使用Spring初始化器创建Spring Boot项目</h2><ul>
<li><p>注：初始化向导需要联网创建Spring Boot项目<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/AG!vhJr4lkR*.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/AG!vhJr4lkR*.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/AG!vhJr4lkR*.png"></a><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/ifwDvvi7gYn8.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/ifwDvvi7gYn8.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/ifwDvvi7gYn8.png"></a></p>
</li>
<li><p>引入功能模块<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/DbBbA2DRw*9i.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/DbBbA2DRw*9i.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/DbBbA2DRw*9i.png"></a></p>
</li>
<li><p>默认生成的Spring Boot项目：<br>  <a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/7FrynvD3FXSf.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/7FrynvD3FXSf.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/7FrynvD3FXSf.png"></a></p>
<ul>
<li>删除不需要的文件与目录，<code>spring-boot-starter-test</code>是Spring Boot单元测试模块</li>
</ul>
</li>
<li><p>引导类已经生成了，我们只需要实现业务即可<br>  <a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Zj7TyXMvIX^6.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/Zj7TyXMvIX%5E6.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Zj7TyXMvIX^6.png"></a></p>
</li>
<li><p><code>resources</code>文件夹中目录结构</p>
<ul>
<li><code>static</code>:保存所有静态资源文件，js css images</li>
<li><code>templates</code>:保存所有的模板页面（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面），可以使用模块引擎（freemarker、thymeleaf）</li>
<li><code>application.properties</code>:Spring Boot应用的配置文件，可以修改一些默认配置如修改默认端口<code>server.prot=8081</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot入门项目实践3</title>
    <url>/2020/09/20/springboot%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B53/</url>
    <content><![CDATA[<h2 id="Spring-Boot核心配置"><a href="#Spring-Boot核心配置" class="headerlink" title="Spring Boot核心配置"></a>Spring Boot核心配置</h2><h3 id="Spring-Boot的配置文件"><a href="#Spring-Boot的配置文件" class="headerlink" title="Spring Boot的配置文件"></a>Spring Boot的配置文件</h3><a id="more"></a>
<ul>
<li>Spring Boot使用一个全局配置文件，放置在<code>src/main/resources</code>目录或类路径的<code>/config</code>下<ul>
<li><code>application.properties</code></li>
<li><code>application.yml</code></li>
</ul>
</li>
<li>配置文件的作用：修改Spring Boot自动配置的默认值</li>
<li>yml是YAML(YAML Ain’t Markup Language)不是一个标记语言<ul>
<li>标记语言：以前的配置文件大多都使用的是xxxx.xml文件</li>
<li>YAML：以数据为中心，配置数据的时候具有面向对象的特征；比json、xml等更适合做配置文件<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标记语言</span></span><br><span class="line"><span class="params">&lt;server&gt;</span></span><br><span class="line">    <span class="params">&lt;port&gt;</span><span class="number">8081</span><span class="params">&lt;/port&gt;</span></span><br><span class="line"><span class="params">&lt;/server&gt;</span></span><br><span class="line"><span class="comment">//YAML</span></span><br><span class="line">server</span><br><span class="line"><span class="symbol">    port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="YAML语法格式"><a href="#YAML语法格式" class="headerlink" title="YAML语法格式"></a>YAML语法格式</h3><h4 id="YAML基本语法"><a href="#YAML基本语法" class="headerlink" title="YAML基本语法"></a>YAML基本语法</h4><ul>
<li><code>key: value</code>表示一对键值对（冒号后面必须要有空格）</li>
<li>使用空格缩进表示层级关系</li>
<li>左侧缩进的空格数目不重要，只要同一层级元素左侧对齐即可</li>
<li>key与value大小写敏感<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">  contextPath: /info</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="YMAL常用写法"><a href="#YMAL常用写法" class="headerlink" title="YMAL常用写法"></a>YMAL常用写法</h4><ul>
<li><p>字面量：数值，字符串，布尔，日期</p>
<ul>
<li>字符串默认不用加上引号；<ul>
<li>使用双引号不会转义特殊字符，特殊字符最终会转成本来想表示含义输出<br><code>name: &quot;AA \n BBB&quot;</code>输出：<code>AA换行BBB</code></li>
<li>使用单引号会转义特殊字符，特殊字符当作一个普通字符串输出<br><code>name: &#39;AA \n BBB&#39;</code>输出<code>AA \n BBB</code></li>
</ul>
</li>
</ul>
</li>
<li><p>对象&amp;Map</p>
<ul>
<li><code>key: value</code> value存储对象，每个值换一行写，注意左对齐<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">emp:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">A</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">salary:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="string">//行内写法</span></span><br><span class="line"><span class="attr">emp:</span> <span class="string">&#123;lastName:</span> <span class="string">A,age:</span> <span class="number">18</span><span class="string">,salary:</span> <span class="number">10000</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>数组（List、Set）</p>
<ul>
<li>用<code>-值</code>表示数组中的一个元素<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fortes:</span></span><br><span class="line">  <span class="string">-java</span></span><br><span class="line">  <span class="string">-python</span></span><br><span class="line">  <span class="string">-hadoop</span></span><br><span class="line"></span><br><span class="line"><span class="string">//行内写法</span></span><br><span class="line"><span class="attr">fortes:</span> <span class="string">[java,python,hadoop]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="yaml配置文件注入值"><a href="#yaml配置文件注入值" class="headerlink" title="yaml配置文件注入值"></a>yaml配置文件注入值</h3><ul>
<li><p>编写JavaBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、@ConfigurationProperties 告诉SpringBoot将配置文件中对应属性的值，映射到这个组件类中,进行一一绑定</span></span><br><span class="line"><span class="comment">// prefix = "emp"：配置文件中的前缀名，哪个前缀与下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment">//2、@Component 必须将当前组件作为SpringBoot中的一个组件，才能使用容器提供的</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"emp"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Forte forte;</span><br><span class="line"></span><br><span class="line">    getter/setter/toString</span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Forte</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer time;</span><br></pre></td></tr></table></figure></li>
<li><p>如果出现提示处理器没有发现：<br>  <a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/TJPkm5OK2rek.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/TJPkm5OK2rek.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/TJPkm5OK2rek.png"></a><br>  在pom.xml导入配置文件处理器，然后重新运行测试类</p>
  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;!--导入配置文件处理器，在编写配置文件时就会提示--&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写<code>application.yml</code>配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">emp:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">28</span></span><br><span class="line">  <span class="attr">salary:</span> <span class="number">20000</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birthday:</span> <span class="number">1991</span><span class="string">/10/10</span></span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="attr">key1:</span> <span class="string">value1</span></span><br><span class="line">    <span class="attr">key2:</span> <span class="string">value2</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">one</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">two</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">three</span></span><br><span class="line">  <span class="attr">forte:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">java</span></span><br><span class="line">    <span class="attr">time:</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用spring boot单元测试类进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01HelloInitApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Emp emp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台会输出设置好的emp的值<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/XGkmvXeXz3Ax.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/XGkmvXeXz3Ax.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/XGkmvXeXz3Ax.png"></a></p>
</li>
</ul>
<h3 id="properties-配置文件注入值"><a href="#properties-配置文件注入值" class="headerlink" title="properties 配置文件注入值"></a>properties 配置文件注入值</h3><ul>
<li>将<code>application.yml</code>配置文件中的内容注释掉</li>
<li>编写<code>application.properties</code>配置文件<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#emp配置的值</span></span><br><span class="line"><span class="string">emp.last-name=李四</span></span><br><span class="line"><span class="string">emp.age=30</span></span><br><span class="line"><span class="string">emp.birthday=1989/9/12</span></span><br><span class="line"><span class="string">emp.boss=false</span></span><br><span class="line"><span class="string">emp.salary=230000</span></span><br><span class="line"><span class="string">emp.map.key1=value1</span></span><br><span class="line"><span class="string">emp.map.key2=value2</span></span><br><span class="line"><span class="string">emp.list=one,two,three</span></span><br><span class="line"><span class="string">emp.forte.name=python</span></span><br><span class="line"><span class="string">emp.forte.time=3</span></span><br></pre></td></tr></table></figure>
<a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/6fSsD^z61Ou1.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/6fSsD%5Ez61Ou1.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/6fSsD^z61Ou1.png"></a></li>
<li>运行后，发现控制台出现中午乱码 进行如下设置重新输入中文值就不会出现乱码<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/2n6cKMLyA7U7.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/2n6cKMLyA7U7.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/2n6cKMLyA7U7.png"></a></li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot入门项目实践4</title>
    <url>/2020/09/24/springboot%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B54/</url>
    <content><![CDATA[<h3 id="比较-Value和-ConfigurationProperties获取值"><a href="#比较-Value和-ConfigurationProperties获取值" class="headerlink" title="比较@Value和@ConfigurationProperties获取值"></a>比较<code>@Value</code>和<code>@ConfigurationProperties</code>获取值</h3><a id="more"></a>
<ul>
<li><p>使用<code>@Value</code>获取值，把Emp类中的<code>@ConfigurationProperties</code>注释掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@ConfigurationProperties(prefix="emp")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Value</span> 类似于Spring中的xml配置文件中的数据注入方式：</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Emp"&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;property name="lastName" value="字面量/#&#123;SpEL&#125;  Spring表达式/$&#123;key&#125;从配置文件取值"&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;emp.last-name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;10*2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"8000"</span>)</span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Forte forte;</span><br></pre></td></tr></table></figure></li>
<li><p>运行结果如下<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/QiW1GDIka9Xb.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/QiW1GDIka9Xb.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/QiW1GDIka9Xb.png"></a></p>
</li>
<li><p>总结@Value与@ConfigurationProperties 获取值的差异</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">@ConfigurationProperties</th>
<th align="center">@Value</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">实现功能</td>
<td align="center">批量注入配置文件的属性值</td>
<td align="center">一个一个指定</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">松散绑定(松散语法)</td>
<td align="center">支持</td>
<td align="center">不支持</td>
<td align="center">last-name == lastName<br />last_name == lastName</td>
</tr>
<tr>
<td align="center">SpEL</td>
<td align="center">不支持</td>
<td align="center">支持</td>
<td align="center">#{10*2}</td>
</tr>
<tr>
<td align="center">复杂类型封装</td>
<td align="center">支持</td>
<td align="center">不支持</td>
<td align="center">${emp.map}</td>
</tr>
<tr>
<td align="center">JSR303数据校验</td>
<td align="center">支持</td>
<td align="center">不支持</td>
<td align="center">如下</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="JSR300数据校验-配置文件注入的值"><a href="#JSR300数据校验-配置文件注入的值" class="headerlink" title="JSR300数据校验_配置文件注入的值"></a>JSR300数据校验_配置文件注入的值</h3><ul>
<li>校验是否为合法邮箱：<ul>
<li>取消<code>@ConfigurationProperties(prefix=&quot;emp&quot;)</code>前面的注释</li>
<li>在Emp类上添加<code>@Validated</code>数据校验注解</li>
<li>在lastName属性上添加<code>@Email</code>注解</li>
<li>验证<code>@ConfigurationPorperties</code>会进行校验，而<code>@Value</code>不会进行校验值<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"emp"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Value</span> 类似于Spring中的xml配置文件中的数据注入方式：</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Emp"&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;property name="lastName" value="字面量/#&#123;SpEL&#125;  Spring表达式/$&#123;key&#125;从配置文件取值"&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Value("$&#123;emp.last-name&#125;</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="comment">//    @Value("#&#123;10*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="comment">//    @Value("8000")</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Forte forte;</span><br><span class="line"></span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="comment">//输入@Email时报错 在pom文件中导入</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>总结 使用场景：<ul>
<li>如果只是在某个业务逻辑中需要获取配置文件中的某个属性值，就用<code>@Value</code> <ul>
<li>在spring boot路径下新建<code>controller.EmpController</code>类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;emp.last-name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/say"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行启动类在浏览器访问<code>http://localhost:8081/say</code><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/5lFp*aG^bgqj.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/5lFp*aG%5Ebgqj.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/5lFp*aG^bgqj.png"></a></li>
</ul>
</li>
<li>如果专门使用javaBean和配置文件进行映射，就使用<code>@ConfigurationProperties</code></li>
</ul>
</li>
</ul>
<h3 id="加载指定配置文件"><a href="#加载指定配置文件" class="headerlink" title="加载指定配置文件"></a>加载指定配置文件</h3><h4 id="PropertySource加载局部配置文件"><a href="#PropertySource加载局部配置文件" class="headerlink" title="@PropertySource加载局部配置文件"></a><code>@PropertySource</code>加载局部配置文件</h4><p><code>@ConfigurationProperties</code>默认从全局配置文件（application.properties/application.yml）中获取值，所有配置数据写在全局配置文件中，显得太臃肿了，可将它们抽取出来放到其他局部配置文件中。</p>
<ul>
<li><p><code>@PropertySource</code>:用于加载局部配置文件</p>
<ul>
<li><p>1.将全局配置文件中的emp相关配置抽取到 resources/<code>emp.properties</code>文件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">emp.last-name=李四</span><br><span class="line">emp.age=<span class="number">30</span></span><br><span class="line">emp.birthday=<span class="number">1989</span>/<span class="number">9</span>/<span class="number">12</span></span><br><span class="line">emp.boss=<span class="keyword">false</span></span><br><span class="line">emp.salary=<span class="number">230000</span></span><br><span class="line">emp.map.key1=value1</span><br><span class="line">emp.map.key2=value2</span><br><span class="line">emp.list=one,two,three</span><br><span class="line">emp.forte.name=python</span><br><span class="line">emp.forte.time=<span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>2.<code>@PropertySource</code>:加载指定的配置文件；value属性是数组类型，用于指定文件位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:emp.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"emp"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 类似于 Spring 中的 xml 配制文件中的数据注入方式：</span></span><br><span class="line"><span class="comment">* &lt;bean class="Emp"&gt;</span></span><br><span class="line"><span class="comment">* &lt;property name="name" value="普通数据类型/ #&#123;SpEL&#125;Spring表达式/ $&#123;key&#125;从配制文件取值"&gt;</span></span><br><span class="line"><span class="comment">* &lt;/property&gt;</span></span><br><span class="line"><span class="comment">* &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// @Value("$&#123;emp.last-name&#125;")</span></span><br><span class="line"><span class="comment">//@Email</span></span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="comment">// @Value("#&#123;10*2&#125;")</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="comment">// @Value("8000")</span></span><br><span class="line"><span class="keyword">private</span> Double salary;</span><br><span class="line"><span class="keyword">private</span> Boolean boss;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="keyword">private</span> Map map;</span><br><span class="line"><span class="keyword">private</span> List list;</span><br><span class="line"><span class="comment">//特长</span></span><br><span class="line"><span class="keyword">private</span> Forte forte;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="ImportResource使用xml配置"><a href="#ImportResource使用xml配置" class="headerlink" title="@ImportResource使用xml配置"></a><code>@ImportResource</code>使用xml配置</h4><ul>
<li>SpringBoot提倡零配置，即无xml配置，但是在实际开发中可能有一些特殊要求必须使用xml配置；这时我们可以通过Spring提供的<code>@ImportResource</code>来加载xml配置文件。<br /></li>
<li><code>@ImportResource</code>:加载Spring的xml配置文件内容加载到容器使用<ul>
<li>创建业务类：<code>com.bdu.springbooot.service.EmpService</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"add()......."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建resources/spring01.xml文件，添加一下内容<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"empService"</span> <span class="attr">class</span>=<span class="string">"com.bdu.springboot.service.EmpService"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>将Spring的配置文件加载到容器中，使用<code>@ImportRescource</code>标注在一个配置类上，下面是主配置类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:spring01.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01HelloInitApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot01HelloInitApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>单元测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01HelloInitApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext context;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testXml</span><span class="params">()</span></span>&#123;</span><br><span class="line">        EmpService empService = (EmpService) context.getBean(<span class="string">"empService"</span>);</span><br><span class="line">        System.out.println(empService);</span><br><span class="line">        empService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Emp emp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>结果<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/oXQMKe7!MWce.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/oXQMKe7!MWce.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/oXQMKe7!MWce.png"></a></li>
</ul>
</li>
</ul>
<h4 id="自定义配置类向容器注入组件"><a href="#自定义配置类向容器注入组件" class="headerlink" title="自定义配置类向容器注入组件"></a>自定义配置类向容器注入组件</h4><ul>
<li>Spring Boot推荐使用注解的方式向容器中注入组件，操作如下：<ul>
<li>创建配置类<code>springboot.config.EmpConfig</code></li>
<li>使用<code>@Configuration</code>配置类，来表示对应Spring配置文件</li>
<li>使用<code>@Bean</code>向容器中注入组件对象</li>
<li>把上面<code>@importResource</code>注解注释掉测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Qi</span></span><br><span class="line"><span class="comment">* <span class="doctag">@data</span> 2020/9/25 23:16</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Configuration</span> 他是spring里的注解，用于标识当前类是一个配置类，来表示对应spring配置文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1.返回值就是注入容器的组件对象</span></span><br><span class="line"><span class="comment">    * 2.方法名就是这个组件的id值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Bean</span> 标识的方法用于向容器中注入组件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmpService <span class="title">empService2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"EmpService组件注入成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmpService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>再次测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01HelloInitApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext context;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testXml</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        EmpService empService = (EmpService) context.getBean("empService");</span></span><br><span class="line"><span class="comment">//        System.out.println(empService);</span></span><br><span class="line"><span class="comment">//        empService.add();</span></span><br><span class="line">        EmpService empService2 = (EmpService) context.getBean(<span class="string">"empService2"</span>);</span><br><span class="line">     System.out.println(<span class="string">"empService2"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>使用外置Servlet容器</title>
    <url>/2020/10/15/%E4%BD%BF%E7%94%A8%E5%A4%96%E7%BD%AEServlet%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="比较嵌入式与外置Servlet容器"><a href="#比较嵌入式与外置Servlet容器" class="headerlink" title="比较嵌入式与外置Servlet容器"></a>比较嵌入式与外置Servlet容器</h3><ul>
<li>嵌入式Servlet容器：运行启动类就可启动，或将项目打成可执行jar包<ul>
<li>优点：简单、快捷；</li>
<li>缺点：默认不支持JSP、优化定制比较复杂 使用定制器，还需要知道每个功能的底层原理</li>
</ul>
</li>
<li>外置Servlet容器：配置Tomcat，将项目部署到Tomcat中运行</li>
</ul>
<a id="more"></a>

<h3 id="使用Tomcat9-x作为外置Servlet容器"><a href="#使用Tomcat9-x作为外置Servlet容器" class="headerlink" title="使用Tomcat9.x作为外置Servlet容器"></a>使用Tomcat9.x作为外置Servlet容器</h3><p>操作步骤：</p>
<ol>
<li><p>必须创建一个war类型的项目</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/djhkDTZ1MyP6.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/djhkDTZ1MyP6.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/djhkDTZ1MyP6.png"></a></p>
</li>
<li><p>IDEA上指定web.xml与修改好目录结构</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/FAq5vcJytMfH.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/FAq5vcJytMfH.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/FAq5vcJytMfH.png"></a></p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/inKcKH!yG!pJ.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/inKcKH!yG!pJ.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/inKcKH!yG!pJ.png"></a></p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Xp5zTn@Y0x!u.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/Xp5zTn@Y0x!u.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Xp5zTn@Y0x!u.png"></a></p>
</li>
<li><p>添加外置Tomcat</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/XD!8WD!XJBmi.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/XD!8WD!XJBmi.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/XD!8WD!XJBmi.png"></a></p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/ZHJguwS@IF7c.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/ZHJguwS@IF7c.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/ZHJguwS@IF7c.png"></a></p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Dsp@C2Lv@BRQ.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/Dsp@C2Lv@BRQ.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Dsp@C2Lv@BRQ.png"></a></p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/puqplkeXgZHW.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/puqplkeXgZHW.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/puqplkeXgZHW.png"></a></p>
</li>
</ol>
<p>   <a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/d9O*!e6rYTZX.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/d9O*!e6rYTZX.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/d9O*!e6rYTZX.png"></a></p>
<ol start="4">
<li><p>在pom.xml将嵌入式的Tomcat指定为provided（Spring初始化器已经默认指定了）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果使用了外置容器，则将tomcat启动器标识为provided--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>直接开发项目功能即可，然后启动Tomcat即可访问</p>
</li>
<li><p>注：</p>
<p>关于Tomcat启动控制台出现中文乱码的问题</p>
<p>点开help，点击如图</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/xGmnIYheC6sV.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/xGmnIYheC6sV.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/xGmnIYheC6sV.png"></a></p>
<p>点进去之后，加入代码<code>-Dfile.encoding=UTF-8</code></p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/!DhmKZ6C@GYL.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/!DhmKZ6C@GYL.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/!DhmKZ6C@GYL.png"></a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot入门项目实践5</title>
    <url>/2020/09/26/springboot%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B55/</url>
    <content><![CDATA[<h3 id="Profile多环境支持"><a href="#Profile多环境支持" class="headerlink" title="Profile多环境支持"></a>Profile多环境支持</h3><h4 id="Profile介绍"><a href="#Profile介绍" class="headerlink" title="Profile介绍"></a>Profile介绍</h4><ul>
<li>Profile是Spring用来针对不同的环境要求，提供不同的配置支持，全局Profile配置使用的文件名可以是<code>application-{profile}.properties</code>/<code>application-{profile}.yml</code><a id="more"></a>
<ul>
<li>如：application-dev.properties/application.properties</li>
</ul>
</li>
<li>演示案例：我们的项目环境分为开发（dev）和生产（prod）环境，开发环境下端口为8082，生产环境下端口号为8888.<h4 id="properties文件演示案例"><a href="#properties文件演示案例" class="headerlink" title="properties文件演示案例"></a>properties文件演示案例</h4></li>
<li>创建两个文件<code>application-dev.properties</code>与<code>application-prod.properties</code><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/nDd@T7ffdDKQ.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/nDd@T7ffdDKQ.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/nDd@T7ffdDKQ.png"></a><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/bqDg2t51CoM1.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/bqDg2t51CoM1.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/bqDg2t51CoM1.png"></a></li>
<li>激活指定profile<ul>
<li>在主配置文件<code>application.properties</code>中指定<code>spring.profiles.active=dev</code><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Zren2xFY08IB.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/Zren2xFY08IB.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Zren2xFY08IB.png"></a></li>
<li>未指定哪个profile文件时，默认使用<code>application.properties</code>中的配置<h4 id="yml文件演示案例"><a href="#yml文件演示案例" class="headerlink" title="yml文件演示案例"></a>yml文件演示案例</h4></li>
</ul>
</li>
<li>在<code>application.yml</code>中配置<ul>
<li>yml支持多文档块方式<code>---</code><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8081</span> <span class="comment"># 默认端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line"><span class="attr">active:</span> <span class="string">prod</span> <span class="comment">#激活哪个profile , 当前激活的是 dev 开发环境</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#指定属于哪个环境, dev 环境时使用</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profiles:</span> <span class="string">prod</span> <span class="comment">#指定属于哪个环境, prod 环境时使用</span></span><br></pre></td></tr></table></figure>
<h4 id="多种方式激活指定profile"><a href="#多种方式激活指定profile" class="headerlink" title="多种方式激活指定profile"></a>多种方式激活指定profile</h4></li>
</ul>
</li>
<li>方式1：在主配置文件中指定<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application.properties</span></span><br><span class="line"><span class="string">spring.profiles.active=dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line"><span class="attr">active:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure></li>
<li>方式2：命令行参数指定<ul>
<li>可以直接在测试的时候，配置传入命令行参数<code>--spring.profiles.active=dev</code><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/YD0ih1duI7Jn.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/YD0ih1duI7Jn.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/YD0ih1duI7Jn.png"></a><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/CDxjwFpAHpwh.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/CDxjwFpAHpwh.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/CDxjwFpAHpwh.png"></a></li>
<li>打jar包运行<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot<span class="number">-02</span>-config<span class="number">-0.0</span><span class="number">.1</span>-SNAPSHOT.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure></li>
<li>虚拟机参数指定<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">-Dspring.profiles.active</span>=dev</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<h3 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h3><ul>
<li><p>SpringBoot启动时，会扫描以下位置的<code>application.properties</code>和<code>application.yml</code>文件作为Spring Boot的默认配置文件：</p>
<table>
<thead>
<tr>
<th align="center">配置文件位置</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>file:./config</code></td>
<td align="center">当前项目的config目录下（最高级别）</td>
</tr>
<tr>
<td align="center"><code>file:./</code></td>
<td align="center">当前项目的根目录下</td>
</tr>
<tr>
<td align="center"><code>classpath:/config</code></td>
<td align="center">类路径的config目录下</td>
</tr>
<tr>
<td align="center"><code>classpath:/</code></td>
<td align="center">类路径的跟目录下（最低级别）</td>
</tr>
</tbody></table>
</li>
<li><p>以上按照优先级从低到高的顺序，将所有位置的配置文件全部加载，高优先级的配置内容会覆盖低优先级的配置内容</p>
</li>
<li><p>注意：如果使用IDEA创建的项目是Module（如果是Project则忽略），当项目的根目录不是你这个项目所有目录（是Project所在目录），这样使用file：存放配置文件时会找不到配置<br>解决方式：更改工作路径直接为Module所有目录<code>$MODULE_DIR$</code><br>通过System.getProperty(“user.dir”)获取的时module的路径<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/dCrEfe66d91e.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/dCrEfe66d91e.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/dCrEfe66d91e.png"></a></p>
</li>
<li><p>配置文件能写什么？怎么写？<br>  <a href="https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener" title="百度">配置文件能配置的属性参照</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Hexo和Github搭建博客</title>
    <url>/2020/04/30/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  每个人心中都有一个属于自己的博客，因为疫情在家无聊就想着来做一个自己的博客，于是在网上遍寻教程，经过n次失败，终于搭建成功！<br>  我用来搭建的工具是Hexo，是一个基于node.js的静态博客框架，生产静态网页托管在GitHub上(学生嘛  家境贫寒 )。</p>
<a id="more"></a>



<h2 id="windows平台步骤"><a href="#windows平台步骤" class="headerlink" title="windows平台步骤"></a>windows平台步骤</h2><ol>
<li><strong>你需要一台可以上网的电脑</strong></li>
<li><strong>安装Git</strong> </li>
<li><strong>安装Node.Js</strong> </li>
<li><strong>安装Hexo</strong> </li>
<li><strong>注册GitHub账号，并创建项目</strong></li>
<li><strong>生成SSH并添加到GitHub</strong></li>
<li><strong>上传到GitHub</strong></li>
</ol>
<h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h2><p>到Git官网下载，网站地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p>
<p>安装步骤：双击下载好的exe文件，一路next就好了<br>如果想知道具体步骤请<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html" target="_blank" rel="noopener">移步</a></p>
<p>安装好后，打开gitbash，查看版本：    命令<kbd>git version</kbd><br>             <img src="https://img-blog.csdnimg.cn/20200429181755676.png#pic_center" alt="在这里插入图片描述"><br>如果返回了版本号，那就说明git安装成功了。</p>
<h2 id="2-安装Node-Js"><a href="#2-安装Node-Js" class="headerlink" title="2.安装Node.Js"></a>2.安装Node.Js</h2><p>到Node.Js官网下载，网址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br>安装步骤与git一致，打开gitbash，查看版本：    命令<kbd>node -v</kbd><br><img src="https://img-blog.csdnimg.cn/20200429183634197.png#pic_center" alt="在这里插入图片描述"><br><strong>与git不同的是安装完后要配置一下</strong><br>NodeJS和NPM安装好了以后并不能直接使用，默认情况下，NPM安装的模块并不会安装到NodeJS的程序目录，比如我们安装的时候设置的D盘，“D:\Program Files\nodejs”，而我们使用npm安装一个cluster模块他会出现在C盘默认的路径下面，所以，如果我们不修改npm的模块安装目录，那么它默认情况下都会安装到这里，随着你测试开发各种不同的项目，安装的模块越来越多，这个文件夹的体积就会越来越大，直到占满你的C盘。所以我们要修改npm的配置。</p>
<ol>
<li>在nodejs文件夹下，创建两个为文件夹： <strong>node_global   和 node_cecal</strong></li>
<li>使用下面命令将npm的全局模块目录和缓存目录配置到我们刚才创建的那两个目录<br><strong>npm config set prefix “node_global文件的路径”<br>npm config set cache “node_cache的文件路径”</strong><br>例如：npm config set prefix “D:\Program Files\nodejs\node_global”</li>
<li>高级系统设置——环境变量<br>新增系统变量：<br>变量名填：NODE_PATH<br>变量值填：（文件路径）<br><img src="https://img-blog.csdnimg.cn/20200429184305532.png#pic_center" alt="在这里插入图片描述"><br>还需要在Path变量名中修改nodejs文件默认路径<br><img src="https://img-blog.csdnimg.cn/20200429184634355.png#pic_center" alt="在这里插入图片描述"><br>修改完成后测试：<br>输入命令：node 回车——再输入 require(‘cluster’)<br><img src="https://img-blog.csdnimg.cn/20200429184809318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4MjE4ODk=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>出现以上内容说明配置完成<h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h2>首先安装国内淘宝镜像源<kbd>npm install -g cnpm --registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></kbd><br>等待安装完成后就可以用<em>cnpm</em>来安装hexo博客了<br>命令：<kbd>cnpm install -g hexo-cli</kbd><br>安装完成后用<kbd>hexo -v</kbd>来验证一下<br><img src="https://img-blog.csdnimg.cn/20200429190627868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4MjE4ODk=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后创建一个你用来存放博客的文件夹，cd到该目录下,初始化命令<kbd>hexo init</kbd>初始化完成后会在该文件夹下看到以下文件：<br><img src="https://img-blog.csdnimg.cn/20200429191123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4MjE4ODk=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这就安装完成了  输入<kbd>hexo s</kbd>就可以实现本地访问了  <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><h2 id="4-注册GitHub账户-并创建项目"><a href="#4-注册GitHub账户-并创建项目" class="headerlink" title="4.注册GitHub账户 并创建项目"></a>4.注册GitHub账户 并创建项目</h2>创建一个GitHub账号，创建一个repo，名称为<kbd>yourname.github.io</kbd>,其中yourname是你的github名称，如下：<br><img src="https://img-blog.csdnimg.cn/20200429191447405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4MjE4ODk=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200429192035385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4MjE4ODk=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
</ol>
<h2 id="5-生成SSH并添加到GitHub"><a href="#5-生成SSH并添加到GitHub" class="headerlink" title="5.生成SSH并添加到GitHub"></a>5.生成SSH并添加到GitHub</h2><p>回到gitbash中.在gitbash中输入：<kbd>ssh-keygen -t rsa -C "你注册GitHub的邮箱”</kbd>，生产SSH，然后在C盘用户目录下找到 <strong>.ssh</strong>文件夹 ，用记事本打开<strong>id_rsa.pub</strong>将上面获取的ssh放到github中：<img src="https://img-blog.csdnimg.cn/20200429192947175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4MjE4ODk=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>添加一个 <strong>New SSH key</strong> ，title随便取，key就填刚刚那一段。<br>在gitbash中验证是否添加成功：<kbd>ssh -T <a href="mailto:git@github.com">git@github.com</a></kbd></p>
<p>用编辑器打开你的blog项目，修改 <strong>_config.yml</strong> 文件的一些配置(冒号之后都是有一个半角空格的)<br><kbd>deploy:<br>  type: git<br>  repo: <a href="mailto:git@github.com">git@github.com</a>:yourname/yourname.github.io.git(这个地方填你新建GitHub项目的ssh地址)<br>  branch: master</kbd><br>回到gitbash中，进入你的blog目录，分别执行以下命令：<br><kbd>hexo clean<br>hexo generate<br>hexo serverr</kbd></p>
<h2 id="6-上传到GitHub"><a href="#6-上传到GitHub" class="headerlink" title="6.上传到GitHub"></a>6.上传到GitHub</h2><p>先安装一波：<kbd>cnpm install hexo-deployer-git --save</kbd>（这样才能将你写好的文章部署到github服务器上并让别人浏览到）<br>执行命令(建议每次都按照如下步骤部署)：<br><kbd>hexo clean<br>         hexo generate<br>         hexo deploy                 </kbd><br>         注意deploy的过程中要输入你的username及email 。按他给的格式执行后，再次执行上次命令。<br>         在浏览器中输入<kbd><a href="http://yourgithubname.github.io" target="_blank" rel="noopener">http://yourgithubname.github.io</a></kbd>就可以看到你的个人博客了。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p> 以上是我折腾了两天才尝试出来的，如果有错请大佬提醒。主题我还在继续研究，等我弄好了再来发表安装主题的教程。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>npm</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实战_账单管理系统完整版(一)</title>
    <url>/2020/10/19/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98_%E8%B4%A6%E5%8D%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li>数据访问层采用MyBatis配置文件版</li>
</ul>
<h3 id="项目环境搭建"><a href="#项目环境搭建" class="headerlink" title="项目环境搭建"></a>项目环境搭建</h3><ol>
<li><p>构建新项目，复制之前spring-boot-bill,粘贴为spring-boot-08-bill,然后导入spring-boot-08bill</p>
<a id="more"></a>

<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/tzzQL7!dXjZA.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/tzzQL7!dXjZA.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/tzzQL7!dXjZA.png"></a></p>
</li>
<li><p>在Project.Struture中重命名Module名字</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/pfoUONdKCtDf.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/pfoUONdKCtDf.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/pfoUONdKCtDf.png"></a></p>
</li>
<li><p>修改pom.xml的artifactId值和name值</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/DRL4zLEbXBQD.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/DRL4zLEbXBQD.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/DRL4zLEbXBQD.png"></a></p>
</li>
<li><p><code>Shift+F6</code>重命名启动类与测试类</p>
</li>
<li><p>重命名后，看下当前Module目录下是否存在原来的class文件，有则按delete删除它，不然运行测试类会报如下错误：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.IllegalStateException</span>: <span class="selector-tag">Found</span> <span class="selector-tag">multiple</span> <span class="keyword">@SpringBootConfiguration</span> annotated classes [<span class="attribute">Genericbean:</span> class [com.mengxuegu.springboot.SpringBoot05BillApplication];</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动启动类，测试能正常访问</p>
</li>
<li><p>删除静态目录下的resources\static\error自定义错误页面，保留模块路径下的templates\error即可</p>
</li>
</ol>
<h3 id="数据源相关配置"><a href="#数据源相关配置" class="headerlink" title="数据源相关配置"></a>数据源相关配置</h3><ol>
<li><p>添加依赖，使用Mybatis作为 数据访问层</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据源相关--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MyBatis启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Druid数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建bill数据库，导入创建表与数据脚本bill.sql</p>
</li>
<li><p>指定Druid数据源，application.yml（要修改库名）与DruidConfig.java（<a href="https://qkgit.github.io/2020/10/15/SpringBoot%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">参考上一篇文章</a>配置Druid连接池）</p>
</li>
<li><p>resource类路径下添加Mybatis配置，并在yml配置中指定路径</p>
<p>核心配置文件：mybatis/mybatis-config.xml</p>
<p>映射配置文件：mybatis/mapper/ProviderMapper.xml</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#MyBatis相关配置</span><br><span class="line">mybatis:</span><br><span class="line">  #核心配置文件路径</span><br><span class="line">  config-location: classpath:mybatis/mybatis-config.xml</span><br><span class="line">  #映射配置文件路径</span><br><span class="line">  mapper-locations: classpath:mybatis/mapper/*.xml</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>配置国际化信息 和 hiddenmethod   SpringBoot 2.2.X默认不支持put，delete等请求方式</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="comment"># 引入国际化信息</span></span><br><span class="line">	<span class="attr">messages:</span></span><br><span class="line">    	<span class="attr">basename:</span> <span class="string">i18n.login</span></span><br><span class="line">  	<span class="comment"># 配置hiddenmethod   SpringBoot 2.2.X默认不支持put，delete等请求方式</span></span><br><span class="line">  	<span class="attr">mvc:</span></span><br><span class="line">    	<span class="attr">hiddenmethod:</span></span><br><span class="line">      	<span class="attr">filter:</span></span><br><span class="line">        	<span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>访问Druid监控后台</li>
</ol>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式Servlet容器自定义配置</title>
    <url>/2020/10/14/%E5%B5%8C%E5%85%A5%E5%BC%8FServlet%E5%AE%B9%E5%99%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="注册Servlet三大组件Servlet-Filter-Listener"><a href="#注册Servlet三大组件Servlet-Filter-Listener" class="headerlink" title="注册Servlet三大组件Servlet/Filter/Listener"></a>注册Servlet三大组件<code>Servlet/Filter/Listener</code></h3><ul>
<li><p>以前Web应用使用外置Tomcat容器部署，可在web.xml文件中注册Servlet三大组件；</p>
</li>
<li><p>而由Spring Boot默认是以jar包的方式运行嵌入式Servlet容器来启动应用，没有web.xml文件，Spring提供以下Bean来注册三大组件：</p>
<a id="more"></a>

<ul>
<li><code>ServletRegistrationBean</code>：注册自定义Servlet</li>
<li><code>FilterRegistrationBean</code>：注册自定义Filer</li>
<li><code>ServletListenerRegistrationBean</code>：注册自定义Listenert</li>
</ul>
</li>
<li><p>Servlet组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bdu.springboot.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Qi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020/10/14 22:38</span></span><br><span class="line"><span class="comment"> * 自定义servlet组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理get请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"hello Servlet seccess"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Filter组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bdu.springboot.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Qi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020/10/14 23:07</span></span><br><span class="line"><span class="comment"> * 自定义filter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"filter初始化操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"filter销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyFilter过滤完成"</span>);</span><br><span class="line">        <span class="comment">//放行请求</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Listener组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bdu.springboot.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Qi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020/10/14 23:16</span></span><br><span class="line"><span class="comment"> * 自定义Listenter组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringBoot.Servlet应用启动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringBoot.Servlet应用销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bdu.springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bdu.springboot.filter.MyFilter;</span><br><span class="line"><span class="keyword">import</span> com.bdu.springboot.listener.MyListener;</span><br><span class="line"><span class="keyword">import</span> com.bdu.springboot.servlet.HelloServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletListenerRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Qi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020/10/14 22:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletCinfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册Servlet组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">helloServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//参数1：自定义Servlet，参数2：url映射</span></span><br><span class="line">        ServletRegistrationBean&lt;HelloServlet&gt;bean=</span><br><span class="line">                <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> HelloServlet(),<span class="string">"/hello"</span>);</span><br><span class="line">        <span class="comment">//设置servlet组件参数配置，如下面加载顺序</span></span><br><span class="line">        bean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册filter组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myfilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        <span class="comment">//设置自定义filter</span></span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">        <span class="comment">//过滤哪一些请求</span></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册监听器Listener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean bean = <span class="keyword">new</span> ServletListenerRegistrationBean(<span class="keyword">new</span> MyListener());</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/C5Wd!qMjibHd.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/C5Wd!qMjibHd.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/C5Wd!qMjibHd.png"></a></p>
</li>
</ul>
<h3 id="分析自动注册的SpringMVC前端控制器"><a href="#分析自动注册的SpringMVC前端控制器" class="headerlink" title="分析自动注册的SpringMVC前端控制器"></a>分析自动注册的SpringMVC前端控制器</h3><p>SpringBoot在<code>DispatcherServletAutoConfiguration</code>自动配置中，帮我们注册SpringMVC的前端控制器：<code>DispatcherServlet</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = &#123;<span class="string">"dispatcherServletRegistration"</span>&#125;)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(value = &#123;DispatcherServlet<span class="class">.<span class="keyword">class</span>&#125;,<span class="title">name</span> </span>= &#123;<span class="string">"dispatcherServlet"</span>&#125;)</span><br><span class="line"><span class="comment">//注册了前端控制器</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        DispatcherServlet dispatcherServlet, </span></span></span><br><span class="line"><span class="function"><span class="params">        WebMvcProperties webMvcProperties, </span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;MultipartConfigElement&gt; multipartConfig)</span> </span>&#123;</span><br><span class="line">            DispatcherServletRegistrationBean registration = </span><br><span class="line">                <span class="keyword">new</span> DispatcherServletRegistrationBean(dispatcherServlet, </span><br><span class="line">         <span class="comment">// / 拦截所有请求(包括静态资源);但不会拦截jsp请求; 而 /* 会拦截jsp           </span></span><br><span class="line">                  webMvcProperties.getServlet().getPath());</span><br><span class="line">            registration.setName(<span class="string">"dispatcherServlet"</span>);</span><br><span class="line">            registration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">            multipartConfig.ifAvailable(registration::setMultipartConfig);</span><br><span class="line">            <span class="keyword">return</span> registration;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="修改Servlet容器配置"><a href="#修改Servlet容器配置" class="headerlink" title="修改Servlet容器配置"></a>修改Servlet容器配置</h3><p>参考pom.xml可知，SpringBoot默认使用Tomcat作为嵌入式的Servlet容器，SpringBoot2.3.4版本默认使用的是Tomcat9.0.38版本的容器</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/7w0o!T86r6H8.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/7w0o!T86r6H8.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/7w0o!T86r6H8.png"></a></p>
<h4 id="修改Servlet容器配置-1"><a href="#修改Servlet容器配置-1" class="headerlink" title="修改Servlet容器配置"></a>修改Servlet容器配置</h4><ul>
<li><p>方式1：在application全局配置文件中，修改<code>server</code>开头的有关配置【ServerProperties】</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#项目服务相关</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment">#修改Servlet相关配置 server.servlet.xxx</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/servlet</span></span><br><span class="line"><span class="comment">#修改Tomcat相关配置 server.tomcat.xxx</span></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">utf-8</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法2：使用定制器修改Servlet容器配置（spring1.x与spring2.x不同）</p>
</li>
</ul>
<p><strong>SpringBoot 1.x:</strong></p>
<p>通过实现嵌入式的Servlet容器定制器<code>EmbeddedServletContainerCustomizer</code>的customize方法，来修改Servlet容器的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletConfig</span> </span>&#123;</span><br><span class="line">	<span class="comment">//Spring Boot 1.x：</span></span><br><span class="line">	<span class="meta">@Bean</span> <span class="comment">//一定要将这个定制器加入到容器中</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">embeddedServletContainerCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class="line">			<span class="comment">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">			container.setPort(<span class="number">8083</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>SpringBoot 2.x:</strong></p>
<p>在2.x版本改为实现<code>WebServerFactoryCustomizer</code>接口的customize方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//springboot2.x</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer <span class="title">webServerFactoryCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> WebServerFactoryCustomizer() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(WebServerFactory factory)</span> </span>&#123;</span><br><span class="line">			ConfigurableWebServerFactory serverFactory = (ConfigurableWebServerFactory)factory;</span><br><span class="line">         <span class="comment">//修改端口号，如果配置文件中与定制器中的配置冲突，默认采用定制器的配置</span></span><br><span class="line">		serverFactory.setPort(<span class="number">8081</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>如果配置文件中与定制器中的配置冲突，默认采用定制器的配置</strong></p>
<h3 id="切换为其他嵌入式Servlet容器"><a href="#切换为其他嵌入式Servlet容器" class="headerlink" title="切换为其他嵌入式Servlet容器"></a>切换为其他嵌入式Servlet容器</h3><ul>
<li><p>SpringBoot默认针对Servlet容器提供以下支持：</p>
<ul>
<li>Tomcat(默认使用)</li>
<li>Jetty：支持长连接项目（如：聊天页面）</li>
<li>Undertow：不支持JSP，但是并发性能高，是高性能非阻塞的容器</li>
</ul>
</li>
<li><p>默认Tomcat容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">在spring-boot-starter-web启动器中默认引入了tomcat容器</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>切换Jetty容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 排除tomcat容器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>切换Undertow容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 排除tomcat容器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入其他的undertow容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实战_账单管理系统完整版(三)</title>
    <url>/2020/11/01/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98_%E8%B4%A6%E5%8D%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h3 id="重构登录功能"><a href="#重构登录功能" class="headerlink" title="重构登录功能"></a>重构登录功能</h3><ol>
<li><p>UserMapper.java增加一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">getUserByUsername</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByUsername"</span> <span class="attr">resultType</span>=<span class="string">"com.bdu.springboot.entities.User"</span>&gt;</span></span><br><span class="line">        select * from `user` where upper (username) = upper (#&#123;username&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>LoginController.login(….)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpSession session,</span></span></span><br><span class="line"><span class="function"><span class="params">            String username,</span></span></span><br><span class="line"><span class="function"><span class="params">            String password,</span></span></span><br><span class="line"><span class="function"><span class="params">            Map&lt;String,Object&gt; map</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断用户名 密码是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(username)</span><br><span class="line">                &amp;&amp; !StringUtils.isEmpty(password))&#123;</span><br><span class="line">            User user = userMapper.getUserByUsername(username);</span><br><span class="line">            <span class="keyword">if</span> (user != <span class="keyword">null</span> &amp;&amp; user.getPassword().equals(password))&#123;</span><br><span class="line">                <span class="comment">//登录成功</span></span><br><span class="line">                <span class="comment">//将username存入session</span></span><br><span class="line">                session.setAttribute(<span class="string">"loginUser"</span>,user);</span><br><span class="line">                <span class="comment">//重定向 redirect:可以重定向到任意一个请求中（包括其他项目），地址栏改变</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"redirect:/main"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main/login"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h3 id="密码修改模块"><a href="#密码修改模块" class="headerlink" title="密码修改模块"></a>密码修改模块</h3><blockquote>
<p>需求：先使用Ajax异步校验输入的原密码是否正确，正确则JS校验新密码输入是否一致，一致则提交修改然后注销重新回到登录页面。</p>
</blockquote>
<ol>
<li><p>Session存入User对象并重构 主页 用户名 显示</p>
</li>
<li><p>main/password.html抽取公共代码片段</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">th:replace</span>=<span class="string">"main/public :: #public_left(activeUri='pwd')"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>JS，注意js中引入thymeleaf行内表达式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> th:inline=<span class="string">"javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//要使用thymeleaf行内表达式则上面要使用：th:inline="javascript" 标识</span></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> isCheck = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//原密码失去焦点</span></span><br><span class="line">        $(<span class="string">'#oldPassword'</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> oldPassword = $(<span class="keyword">this</span>).val().trim();</span><br><span class="line">            <span class="keyword">if</span> (!oldPassword)&#123;</span><br><span class="line">                $(<span class="string">'#pwdText'</span>).css(<span class="string">'color'</span>,<span class="string">'red'</span>);</span><br><span class="line">                isCheck = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">                      <span class="comment">//themeleaf行内表达式</span></span><br><span class="line">            <span class="keyword">var</span> url = [[@&#123;/user/pwd/&#125;]]+oldPassword;</span><br><span class="line">            <span class="comment">//异步判断密码是否正确</span></span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url:url,</span><br><span class="line">                dataType:<span class="string">'json'</span>,</span><br><span class="line">                method:<span class="string">'GET'</span>,</span><br><span class="line">                success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line">                    isCheck = data;</span><br><span class="line">                    data?$(<span class="string">"#pwdText"</span>).replaceWith(<span class="string">"&lt;span id='pwdText'&gt;*原密码正确&lt;/span&gt;"</span>)</span><br><span class="line">                        :$(<span class="string">"#pwdText"</span>).replaceWith(<span class="string">"&lt;span id='pwdText'&gt;*原密码错误&lt;/span&gt;"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                error:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                    $(<span class="string">'#pwdText'</span>).html(<span class="string">"校验密码异常"</span>);</span><br><span class="line">                    isCheck=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//判断两次密码是否一致</span></span><br><span class="line">        $(<span class="string">"#save"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(isCheck) &#123;</span><br><span class="line">                <span class="keyword">if</span>($(<span class="string">"#newPassword"</span>).val() &amp;&amp; $(<span class="string">"#reNewPassword"</span>).val()</span><br><span class="line">                    &amp;&amp; $(<span class="string">"#newPassword"</span>).val() == $(<span class="string">"#reNewPassword"</span>).val()) &#123;</span><br><span class="line">                    $(<span class="string">"#pwdForm"</span>).submit();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="string">"#reNewPwdText"</span>).replaceWith(<span class="string">"&lt;span id='reNewPwdText' style='color: red'&gt;*保证和新密码一致&lt;/span&gt;"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>控制层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前往密码修改页面</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/user/pwd"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toPwdUpdatePage</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"main/password"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//校验密码是否正确</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"user/pwd/&#123;oldPwd&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">checkPwd</span><span class="params">(@PathVariable(<span class="string">"oldPwd"</span>)</span> String oldPwd,</span></span><br><span class="line"><span class="function">                          HttpSession session)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"输入的旧密码为："</span>+oldPwd);</span><br><span class="line">      User user = (User) session.getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">      <span class="keyword">if</span> (user.getPassword().equals(oldPwd))&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/user/pwd"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">updatePwd</span><span class="params">(HttpSession session,String password)</span></span>&#123;</span><br><span class="line">      <span class="comment">//获取session中的登录信息</span></span><br><span class="line">      User user = (User) session.getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">      <span class="comment">//更新密码</span></span><br><span class="line">      user.setPassword(password);</span><br><span class="line">      userMapper.updateUser(user);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"redirect:/logout"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实战_账单管理系统完整版(二)</title>
    <url>/2020/10/20/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98_%E8%B4%A6%E5%8D%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h3 id="完成供应商管理模块"><a href="#完成供应商管理模块" class="headerlink" title="完成供应商管理模块"></a>完成供应商管理模块</h3><ol>
<li><p>创建数据访问层 mapper.ProviderMapper</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bdu.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bdu.springboot.entities.Provider;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Qi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020/10/17 22:44</span></span><br><span class="line"><span class="comment"> * 使用MyBatis配置文件版</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Mapper//指定这是操作数据的mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProviderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Provider&gt; <span class="title">getProviders</span><span class="params">(Provider provider)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Provider <span class="title">getProviderByPid</span><span class="params">(Integer pid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addProvider</span><span class="params">(Provider provider)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteProviderByPid</span><span class="params">(Integer pid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateProvider</span><span class="params">(Provider provider)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>扫描Mapper，在启动类上添加<code>@MapperScan(&quot;com.bdu.springboot.mapper&quot;)</code></p>
</li>
<li><p>在mybatis/mapper/ProviderMapper.xml添加SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.bdu.springboot.mapper.ProviderMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getProviders"</span> <span class="attr">resultType</span>=<span class="string">"com.bdu.springboot.entities.Provider"</span>&gt;</span></span><br><span class="line">        select * from provider where 1=1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"providerName != null and providerName != ''"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            and providerName like '%$&#123;providerName&#125;%'</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getProviderByPid"</span> <span class="attr">resultType</span>=<span class="string">"com.bdu.springboot.entities.Provider"</span>&gt;</span></span><br><span class="line">        select * from provider where pid=#&#123;pid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addProvider"</span>&gt;</span></span><br><span class="line">        INSERT INTO `provider`(`provider_code`, `providerName`, `people`, `phone`, `address`, `fax`, `describe`, `create_date`)</span><br><span class="line">        VALUES ( #&#123;providerCode&#125;, #&#123;providerName&#125;, #&#123;people&#125;, #&#123;phone&#125;, #&#123;address&#125;, #&#123;fax&#125;, #&#123;describe&#125;,now())</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteProviderByPid"</span>&gt;</span></span><br><span class="line">        delete from provider where pid=#&#123;pid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateProvider"</span>&gt;</span></span><br><span class="line">        UPDATE `bill`.`provider` SET `provider_code` =  #&#123;providerCode&#125;, `providerName` =#&#123;providerName&#125;,</span><br><span class="line">         `people` = #&#123;people&#125;,`phone` = #&#123;phone&#125;, `address` = #&#123;address&#125;, `fax` = #&#123;fax&#125;,</span><br><span class="line">         `describe` = #&#123;describe&#125;, `create_date` = now() WHERE `pid` = #&#123;pid&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot08BillApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	ProviderMapper providerMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Provider p = <span class="keyword">new</span> Provider();</span><br><span class="line">		p.setProviderName(<span class="string">"A货"</span>);</span><br><span class="line">		List&lt;Provider&gt; providers = providerMapper.getProviders(p);</span><br><span class="line">		System.out.println(providers.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">		Provider provider = providerMapper.getProviderByPid(<span class="number">2</span>);</span><br><span class="line">		System.out.println(provider);</span><br><span class="line"></span><br><span class="line">		provider.setProviderName(<span class="string">"B货域名供应商....."</span>);</span><br><span class="line">		<span class="keyword">int</span> i = providerMapper.updateProvider(provider);</span><br><span class="line">		System.out.println(i);</span><br><span class="line"></span><br><span class="line">		providerMapper.addProvider(<span class="keyword">new</span> Provider(<span class="keyword">null</span>, <span class="string">"PR-AA"</span>, <span class="string">"梦学谷供应商111"</span>, <span class="string">"小张"</span>, <span class="string">"18888666981"</span>, <span class="string">"深圳软件园"</span>, <span class="string">"0911-0123456"</span>, <span class="string">"品质A"</span>));</span><br><span class="line"></span><br><span class="line">		providerMapper.deleteProviderByPid(<span class="number">8</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改providerController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProviderDao providerDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProviderMapper providerMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/providers"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Map&lt;String,Object&gt; map, Provider provider)</span></span>&#123;</span><br><span class="line">        Collection&lt;Provider&gt; providers = providerMapper.getProviders(provider);</span><br><span class="line">        map.put(<span class="string">"providers"</span>,providers);</span><br><span class="line">        map.put(<span class="string">"providerName"</span>,provider.getProviderName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"provider/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**前往</span></span><br><span class="line"><span class="comment">     *默认type=null详情页面</span></span><br><span class="line"><span class="comment">     *   type=update 修改页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/view/&#123;pid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">view</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(value = <span class="string">"type"</span>,defaultValue = <span class="string">"view"</span> )</span> String type,</span></span><br><span class="line"><span class="function">            @<span class="title">PathVariable</span><span class="params">(<span class="string">"pid"</span>)</span> Integer pid,</span></span><br><span class="line"><span class="function">            Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">        Provider provider = providerMapper.getProviderByPid(pid);</span><br><span class="line">        map.put(<span class="string">"provider"</span>,provider);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"provider/"</span>+type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改供应商信息</span></span><br><span class="line">    <span class="meta">@PutMapping</span> (<span class="string">"/provider"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Provider provider)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改供应商.."</span>+provider);</span><br><span class="line">        providerMapper.updateProvider(provider);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/providers"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前往添加供应商页面</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/provider"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"provider/add"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加数据</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/provider"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addProvider</span><span class="params">(Provider provider)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增加供应商.."</span>+provider);</span><br><span class="line">        providerMapper.addProvider(provider);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/providers"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除供应商</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"provider/&#123;pid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"pid"</span>)</span> Integer pid)</span>&#123;</span><br><span class="line">        providerMapper.deleteProviderByPid(pid);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/providers"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在修改数据时，没有获取providerCode值  需要添加一个隐藏框获取providerCode  否则修改后providerCode值为空</p>
<p>在update.html中加入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"updateForm"</span> <span class="attr">th:method</span>=<span class="string">"post"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/provider&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;provider!=null&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"pid"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;provider.pid&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;provider!=null&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--获取providerCode值--&gt;</span></span><br><span class="line">    			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"providerCode"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;provider.providerCode&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>





</li>
</ol>
<h3 id="账单管理模块"><a href="#账单管理模块" class="headerlink" title="账单管理模块"></a>账单管理模块</h3><ol>
<li><p>改造实体类，因为列表需要 供应商名称</p>
<p>Bill类中添加<code>private Integer pid</code></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer pid;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(Integer pid)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.pid = pid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建BillProvider类继承Bill后，包含了Bill的所有属性，只需要新增供应商的信息属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BillProvider</span> <span class="keyword">extends</span> <span class="title">Bill</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String providerName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProviderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> providerName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProviderName</span><span class="params">(String providerName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.providerName = providerName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>BillMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BillMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;BillProvider&gt;getBills(Bill bill);</span><br><span class="line"></span><br><span class="line">    <span class="function">Bill <span class="title">getBillByBid</span><span class="params">(Integer bid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBill</span><span class="params">(Bill bill)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBill</span><span class="params">(Bill bill)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBillById</span><span class="params">(Integer bid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>BillMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.bdu.springboot.mapper.BillMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBills"</span> <span class="attr">resultType</span>=<span class="string">"com.bdu.springboot.entities.BillProvider"</span>&gt;</span></span><br><span class="line">        select b.*, p.providerName from bill b left join provider p on b.pid = p.pid</span><br><span class="line">        where 1=1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"billName!=null and billName!=''"</span>&gt;</span></span><br><span class="line">            and b.bill_name like '%$&#123;billName&#125;%'</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"pid!=null"</span>&gt;</span></span><br><span class="line">            and b.pid = #&#123;pid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"pay != null"</span>&gt;</span></span><br><span class="line">            and b.pay = #&#123;pay&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBillByBid"</span> <span class="attr">resultType</span>=<span class="string">"com.bdu.springboot.entities.Bill"</span>&gt;</span></span><br><span class="line">        select b.*, p.providerName from bill b left join provider p on b.pid = p.pid</span><br><span class="line">        where bid = #&#123;bid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBill"</span>&gt;</span></span><br><span class="line">        INSERT INTO `bill`( `bill_code`, `bill_name`, `bill_com`, `bill_num`, `money`, `pay`, `pid`, `create_date`)</span><br><span class="line">        VALUES (#&#123;billCode&#125;, #&#123;billName&#125;, #&#123;billCom&#125;, #&#123;billNum&#125;, #&#123;money&#125;, #&#123;pay&#125;, #&#123;pid&#125;, now())</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBill"</span>&gt;</span></span><br><span class="line">        UPDATE `bill` SET</span><br><span class="line">        `bill_code` = #&#123;billCode&#125;, `bill_name` = #&#123;billName&#125;, `bill_com` = #&#123;billCom&#125;,`bill_num` = #&#123;billNum&#125;,</span><br><span class="line">         `money` =  #&#123;money&#125;, `pay` = #&#123;pay&#125;, `pid` = #&#123;pid&#125;, `create_date` = now()</span><br><span class="line">        WHERE `bid` = #&#123;bid&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBillById"</span>&gt;</span></span><br><span class="line">        delete from bill where bid=#&#123;bid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在测试类中测试接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot08BillApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	ProviderMapper providerMapper;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	BillMapper billMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Bill b = <span class="keyword">new</span> Bill();</span><br><span class="line">		b.setBillName(<span class="string">"com"</span>);</span><br><span class="line">		List&lt;BillProvider&gt; bills = billMapper.getBills(b);</span><br><span class="line">		System.out.println(bills.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">		Bill bill = billMapper.getBillByBid(<span class="number">2</span>);</span><br><span class="line">		System.out.println(bill);</span><br><span class="line"></span><br><span class="line">		bill.setBillName(<span class="string">"ESC包月云服务..."</span>);</span><br><span class="line">		<span class="keyword">int</span> i = billMapper.updateBill(bill);</span><br><span class="line">		System.out.println(i);</span><br><span class="line"></span><br><span class="line">		billMapper.addBill(<span class="keyword">new</span> Bill(<span class="number">3001</span>, <span class="string">"Bi-AA11"</span>, <span class="string">"粮油aaa"</span>,<span class="string">"斤"</span>, <span class="number">80</span>,<span class="number">480.8</span>, <span class="keyword">new</span> Provider(<span class="keyword">null</span>, <span class="string">"PR-BB"</span>, <span class="string">"梦学谷供应商222"</span>, <span class="string">"小李"</span>, <span class="string">"18888666982"</span>, <span class="string">"深圳软件园"</span>, <span class="string">"0911-0123453"</span>, <span class="string">"品质B"</span>),<span class="number">2</span>,<span class="number">1</span> ));</span><br><span class="line">		billMapper.deleteBillById(<span class="number">6</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p>修改public.html中的账单请求路径</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:id</span>=<span class="string">"$&#123;activeUri == 'bill' ?'active':''&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/bills&#125;"</span>&gt;</span>账单管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>BillController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BillController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProviderMapper providerMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BillMapper billMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/bills"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Map&lt;String,Object&gt; map, Bill bill)</span></span>&#123;</span><br><span class="line">        List&lt;BillProvider&gt; billProviders = billMapper.getBills(bill);</span><br><span class="line">        List&lt;Provider&gt; providers = providerMapper.getProviders(<span class="keyword">null</span>);</span><br><span class="line">        map.put(<span class="string">"billProviders"</span>,billProviders);</span><br><span class="line">        map.put(<span class="string">"providers"</span>,providers);</span><br><span class="line">        <span class="comment">//用于搜索回显数据</span></span><br><span class="line">        map.put(<span class="string">"billName"</span>,bill.getBillName());</span><br><span class="line">        map.put(<span class="string">"pid"</span>,bill.getPid());</span><br><span class="line">        map.put(<span class="string">"pay"</span>,bill.getPay());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"bill/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**前往</span></span><br><span class="line"><span class="comment">     *默认type=null详情页面</span></span><br><span class="line"><span class="comment">     *   type=update 修改页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/bill/&#123;bid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">view</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(value = <span class="string">"type"</span>,defaultValue = <span class="string">"view"</span> )</span> String type,</span></span><br><span class="line"><span class="function">            @<span class="title">PathVariable</span><span class="params">(<span class="string">"bid"</span>)</span> Integer bid,</span></span><br><span class="line"><span class="function">            Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">        BillProvider bill = (BillProvider) billMapper.getBillByBid(bid);</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">"update"</span>.equals(type))&#123;</span><br><span class="line">           List&lt;Provider&gt; providers = providerMapper.getProviders(<span class="keyword">null</span>);</span><br><span class="line">           map.put(<span class="string">"providers"</span>,providers);</span><br><span class="line">       &#125;</span><br><span class="line">        map.put(<span class="string">"bill"</span>,bill);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"bill/"</span>+type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改账单信息</span></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/bill"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Bill bill)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改供应商.."</span>+bill);</span><br><span class="line">        billMapper.updateBill(bill);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/bills"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前往添加账单页面</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/bill"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        List&lt;Provider&gt; providers = providerMapper.getProviders(<span class="keyword">null</span>);</span><br><span class="line">        map.put(<span class="string">"providers"</span>,providers);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"bill/add"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加账单数据</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/bill"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBill</span><span class="params">(Bill bill)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增加账单.."</span>+bill);</span><br><span class="line">        billMapper.addBill(bill);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/bills"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除账单</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"bill/&#123;bid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"bid"</span>)</span> Integer bid)</span>&#123;</span><br><span class="line">        billMapper.deleteBillById(bid);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/bills"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改各个页面信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--下拉框设置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>供应商：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"pid"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;pid == p.pid&#125;"</span> <span class="attr">th:each</span>=<span class="string">"p : $&#123;providers&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;p.pid&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.providerName&#125;"</span>&gt;</span>--供应商--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>





</li>
</ol>
<h3 id="用户管理模块"><a href="#用户管理模块" class="headerlink" title="用户管理模块"></a>用户管理模块</h3><ol>
<li><p>UserMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.bdu.springboot.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUsers"</span> <span class="attr">resultType</span>=<span class="string">"com.bdu.springboot.entities.User"</span>&gt;</span></span><br><span class="line">        select * from `user` where 1=1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null and username !=''"</span>&gt;</span></span><br><span class="line">            and username like '%$&#123;username&#125;%'</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.bdu.springboot.entities.User"</span>&gt;</span></span><br><span class="line">        select * from `user` where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span>&gt;</span></span><br><span class="line">        INSERT INTO `user`(`username`, `real_name`, `password`, `gender`, `birthday`, `user_type`)</span><br><span class="line">        VALUES (#&#123;username&#125;, #&#123;realName&#125;, #&#123;password&#125;, #&#123;gender&#125;, #&#123;birthday&#125;, #&#123;userType&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span>&gt;</span></span><br><span class="line">        UPDATE `user` SET</span><br><span class="line">        `username` = #&#123;username&#125;, `real_name` = #&#123;realName&#125;, `password` = #&#123;password&#125;,</span><br><span class="line">         `gender` = #&#123;gender&#125;, `birthday` = #&#123;birthday&#125;, `user_type` = #&#123;userType&#125;</span><br><span class="line">        WHERE `id` = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span>&gt;</span></span><br><span class="line">        delete from `user` where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot08BillApplicationTests</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		User u = <span class="keyword">new</span> User();</span><br><span class="line">		u.setUsername(<span class="string">"li"</span>);</span><br><span class="line">		List&lt;User&gt; users = userMapper.getUsers(u);</span><br><span class="line">		System.out.println(users.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">		User user = userMapper.getUserById(<span class="number">1</span>);</span><br><span class="line">		System.out.println(user);</span><br><span class="line">		user.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">		<span class="keyword">int</span> i = userMapper.updateUser(user);</span><br><span class="line">		System.out.println(i);</span><br><span class="line"></span><br><span class="line">		User user1 = <span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"MXG-AA"</span>, <span class="string">"xiaomeng1"</span>, <span class="string">"123456"</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">		<span class="keyword">int</span> addUser = userMapper.addUser(user1);</span><br><span class="line">		System.out.println(addUser);</span><br><span class="line"></span><br><span class="line">		userMapper.deleteUserById(<span class="number">5</span>);		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Map&lt;String,Object&gt; map, User user)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.getUsers(user);</span><br><span class="line">        map.put(<span class="string">"users"</span>,users);</span><br><span class="line">        map.put(<span class="string">"username"</span>,user.getUsername());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**前往</span></span><br><span class="line"><span class="comment">     * 默认 type=null   详情页面</span></span><br><span class="line"><span class="comment">     *     type=update  修改页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">view</span><span class="params">(@RequestParam(value = <span class="string">"type"</span>, defaultValue = <span class="string">"view"</span>)</span> String type,</span></span><br><span class="line"><span class="function">                       @PathVariable Integer id,</span></span><br><span class="line"><span class="function">                       Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">        User user = userMapper.getUserById(id);</span><br><span class="line">        map.put(<span class="string">"user"</span>,user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user/"</span>+type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改用户信息</span></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改用户信息.."</span>+user);</span><br><span class="line">        userMapper.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/users"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前往添加用户页面</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user/add"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加数据</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增加用户...."</span>+user);</span><br><span class="line">        userMapper.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/users"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        userMapper.deleteUserById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/users"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改页面信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:id</span>=<span class="string">"$&#123;activeUri == 'user' ?'active':''&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/users&#125;"</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><mark>注意：新增 修改页面  有 生日是Date类型，springboot默认识别<code>dd/MM/yyyy</code>格式但是如果要传入其他格式 如<code>yyyy-MM-dd</code>,则需要在配置文件中修改日期格式</mark></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定日期格式</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">mvc:</span></span><br><span class="line">		<span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span></span><br></pre></td></tr></table></figure>





</li>
</ol>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实战_账单管理系统(二)</title>
    <url>/2020/10/11/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98_%E8%B4%A6%E5%8D%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h3 id="登录模块开发"><a href="#登录模块开发" class="headerlink" title="登录模块开发"></a>登录模块开发</h3><ul>
<li><p>登录控制层</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            String username,</span></span></span><br><span class="line"><span class="function"><span class="params">            String password,</span></span></span><br><span class="line"><span class="function"><span class="params">            Map&lt;String,Object&gt; map</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(username)&amp;&amp;<span class="string">"123"</span>.equals(password))&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            <span class="comment">//重定向 redirect:可以重定向到任意一个请求中（包括其他项目），地址栏改变</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/main"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main/login"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>系统登录 - 账单管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/style.css&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"login_bg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"loginBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"loginHeader"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>账单管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"loginCont"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">style</span>=<span class="string">"color:#ff0000; margin-left: 130px"</span>&gt;</span>用户名错误！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"loginForm"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">th:method</span>=<span class="string">"post"</span> &gt;</span></span><br><span class="line">				</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputbox"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"user"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>  <span class="attr">required</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputbox"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mima"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"mima"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>  <span class="attr">required</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subBtn"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subBtn"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:value</span>=<span class="string">"#&#123;login.submit&#125;"</span> <span class="attr">value</span>=<span class="string">"Sign"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">th:value</span>=<span class="string">"#&#123;login.reset&#125;"</span> <span class="attr">value</span>=<span class="string">"Reset"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-left: 100px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index(l='zh_CN')&#125;"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">					<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index(l='en_US')&#125;"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="自定义拦截器-登录校验"><a href="#自定义拦截器-登录校验" class="headerlink" title="自定义拦截器-登录校验"></a>自定义拦截器-登录校验</h3><ul>
<li><p>非登录用户，只能访问登录页面，其他页面都不可以访问  在登录时将username存入session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpSession session,</span></span></span><br><span class="line"><span class="function"><span class="params">            String username,</span></span></span><br><span class="line"><span class="function"><span class="params">            String password,</span></span></span><br><span class="line"><span class="function"><span class="params">            Map&lt;String,Object&gt; map</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(username)&amp;&amp;<span class="string">"123"</span>.equals(password))&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            <span class="comment">//将username存入session</span></span><br><span class="line">            session.setAttribute(<span class="string">"loginUser"</span>,username);</span><br><span class="line">            <span class="comment">//重定向 redirect:可以重定向到任意一个请求中（包括其他项目），地址栏改变</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/main"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main/login"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义登录拦截器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用目标方法之前被拦截</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object loginUser = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span> (loginUser != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//已登录过 放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没登陆过</span></span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限，请先登录"</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/index"</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>添加拦截器到容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">          <span class="comment">//增加视图控制</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">              registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"main/login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/index"</span>).setViewName(<span class="string">"main/login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/main"</span>).setViewName(<span class="string">"main/index"</span>);</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">              registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor())</span><br><span class="line">                      <span class="comment">//指定要拦截的请求 /**表示拦截所有请求</span></span><br><span class="line">                      .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                      <span class="comment">//排除不需要拦截的请求路径</span></span><br><span class="line">                      .excludePathPatterns(<span class="string">"/"</span>,<span class="string">"/index"</span>,<span class="string">"/login"</span>)</span><br><span class="line">                      <span class="comment">//springboot2+之后需要将静态资源文件的访问路径手动排除</span></span><br><span class="line">                      .excludePathPatterns(<span class="string">"/css/*"</span>,<span class="string">"/img/*"</span>,<span class="string">"/js/*"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="主页模块开发-退出系统"><a href="#主页模块开发-退出系统" class="headerlink" title="主页模块开发-退出系统"></a>主页模块开发-退出系统</h3><ul>
<li><p>右上角和主页显示登录用户名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>下午好！<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: #fff21b"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.loginUser&#125;"</span>&gt;</span> Admin<span class="tag">&lt;/<span class="name">span</span>&gt;</span> , 欢迎你！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wFont"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.loginUser&#125;"</span>&gt;</span>Admin<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎来到账单管理系统!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"hours"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>点击<code>退出</code>，退出系统</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退出登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/logout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">   <span class="comment">//清空session中的用户信息</span></span><br><span class="line">   session.removeAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">   <span class="comment">//注销session</span></span><br><span class="line">   session.invalidate();</span><br><span class="line">   <span class="comment">//返回首页</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">"redirect:/"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="分析Restful架构"><a href="#分析Restful架构" class="headerlink" title="分析Restful架构"></a>分析Restful架构</h3><p>1.Restful架构：通过HTTP请求方式来区分对资源CRUD操作，请求URI是<code>/资源名称/资源标识</code></p>
<p>对比下：</p>
<table>
<thead>
<tr>
<th></th>
<th>普通CRUD</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getProvider</td>
<td>provider—GET</td>
</tr>
<tr>
<td>添加</td>
<td>addProvider?xxx</td>
<td>provider—POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateProvider?id=xxx</td>
<td>provider/{id}—PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteProvider?id=1</td>
<td>provider/{id}—DELETE</td>
</tr>
</tbody></table>
<p>2.项目使用Rest处理架构</p>
<table>
<thead>
<tr>
<th>项目功能</th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询所有供应商</td>
<td>providers</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个供应商详情</td>
<td>provider/1</td>
<td>GET</td>
</tr>
<tr>
<td>来到修改页面（查出供应商进行信息回显）</td>
<td>provider/1</td>
<td>GET</td>
</tr>
<tr>
<td>修改供应商</td>
<td>provider</td>
<td>PUT</td>
</tr>
<tr>
<td>前往添加页面</td>
<td>provider</td>
<td>GET</td>
</tr>
<tr>
<td>添加供应商</td>
<td>provider</td>
<td>POST</td>
</tr>
<tr>
<td>删除供应商</td>
<td>provider/1</td>
<td>DELETE</td>
</tr>
</tbody></table>
<h3 id="供应商列表查询"><a href="#供应商列表查询" class="headerlink" title="供应商列表查询"></a>供应商列表查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建控制台信息</span></span><br><span class="line">    Logger logger =  LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProviderDao providerDao;</span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/providers",method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/providers"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Map&lt;String,Object&gt; map,</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(value = <span class="string">"providerName"</span>,required = <span class="keyword">false</span>)</span> String providerName)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出到日志</span></span><br><span class="line">        logger.info(<span class="string">"查询名称"</span>+providerName);</span><br><span class="line"></span><br><span class="line">        Collection&lt;Provider&gt; providers = providerDao.getAll(providerName);</span><br><span class="line">        map.put(<span class="string">"providers"</span>,providers);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"provider/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"location"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>你现在所在的位置是:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>供应商管理页面<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"searchForm"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/providers&#125;"</span> <span class="attr">th:method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>供应商名称：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"providerName"</span> <span class="attr">placeholder</span>=<span class="string">"请输入供应商的名称"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"$('#searchForm').submit()"</span> <span class="attr">value</span>=<span class="string">"查询"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"add.html"</span>&gt;</span>添加供应商<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--供应商操作表格--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"providerTable"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"firstTr"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"10%"</span>&gt;</span>供应商编码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"20%"</span>&gt;</span>供应商名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"10%"</span>&gt;</span>联系人<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"10%"</span>&gt;</span>联系电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"10%"</span>&gt;</span>传真<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"10%"</span>&gt;</span>创建时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"30%"</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"p : $&#123;providers&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.pid&#125;"</span>&gt;</span>PRO-CODE—001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.providerName&#125;"</span>&gt;</span>测试供应商001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.people&#125;"</span>&gt;</span>韩露<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.phone&#125;"</span>&gt;</span>15918230478<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.fax&#125;"</span>&gt;</span>15918230478<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(p.createDate,'yyyy-MMM-dd HH:mm')&#125;"</span>&gt;</span>2015-11-12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"view.html"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/read.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"查看"</span> <span class="attr">title</span>=<span class="string">"查看"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"update.html"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/xiugai.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"修改"</span> <span class="attr">title</span>=<span class="string">"修改"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"delete"</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/schu.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"删除"</span> <span class="attr">title</span>=<span class="string">"删除"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="供应商详情查询"><a href="#供应商详情查询" class="headerlink" title="供应商详情查询"></a>供应商详情查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/view/&#123;pid&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">view</span><span class="params">(@PathVariable(<span class="string">"pid"</span>)</span> Integer pid,Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">   Provider provider = providerDao.getProvider(pid);</span><br><span class="line">   map.put(<span class="string">"provider"</span>,provider);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">"provider/view"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--provider/list.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/view/&#125; + $&#123;p.pid&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/read.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"查看"</span> <span class="attr">title</span>=<span class="string">"查看"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"update.html"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/xiugai.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"修改"</span> <span class="attr">title</span>=<span class="string">"修改"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"delete"</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/schu.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"删除"</span> <span class="attr">title</span>=<span class="string">"删除"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--pprovider/view.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"providerView"</span> &gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>供应商编码：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;provider.pid&#125;"</span>&gt;</span>PRO-CODE—001<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>供应商名称：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;provider.providerName&#125;"</span>&gt;</span>测试供应商001<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>联系人：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;provider.people&#125;"</span>&gt;</span>韩露<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>联系电话：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;provider.phone&#125;"</span>&gt;</span>15918230478<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>传真：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;provider.fax&#125;"</span>&gt;</span>15918230478<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>描述：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;provider.providerCode&#125;"</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/providers&#125;"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="供应商修改"><a href="#供应商修改" class="headerlink" title="供应商修改"></a>供应商修改</h3><ul>
<li><p>发送put请求修改供应商信息</p>
<ol>
<li>在SpringMVC中配置HiddentHttpMethodFilter(SpringBoot自动配置好了)</li>
<li>页面创建一个method=”post“表单</li>
<li>创建一个input标签name=”_method“，value=”指定请求方式“</li>
</ol>
</li>
<li><p>前往修改页面，方法重用详情查询的方法</p>
<ul>
<li><p>方法改造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *默认type=null详情页面</span></span><br><span class="line"><span class="comment">  *   type=update 修改页面</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/view/&#123;pid&#125;"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">view</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">         @RequestParam(value = <span class="string">"type"</span>,defaultValue = <span class="string">"view"</span> )</span> String type,</span></span><br><span class="line"><span class="function">         @<span class="title">PathVariable</span><span class="params">(<span class="string">"pid"</span>)</span> Integer pid,</span></span><br><span class="line"><span class="function">         Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">     Provider provider = providerDao.getProvider(pid);</span><br><span class="line">     map.put(<span class="string">"provider"</span>,provider);</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">return</span> <span class="string">"provider/"</span>+type;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//修改供应商信息</span></span><br><span class="line"> <span class="meta">@PutMapping</span> (<span class="string">"/provider"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Provider provider)</span></span>&#123;</span><br><span class="line">     System.out.println(provider);</span><br><span class="line">     provider.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">     providerDao.save(provider);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"redirect:/providers"</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">list.html</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/view/&#125; + $&#123;p.pid&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/read.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"查看"</span> <span class="attr">title</span>=<span class="string">"查看"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/view/&#125; + $&#123;p.pid&#125;+'?type=update'"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/xiugai.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"修改"</span> <span class="attr">title</span>=<span class="string">"修改"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"delete"</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/schu.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"删除"</span> <span class="attr">title</span>=<span class="string">"删除"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">update.html</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"updateForm"</span> <span class="attr">th:method</span>=<span class="string">"post"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/provider&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;provider!=null&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"pid"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;provider.pid&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;provider!=null&#125;"</span>/&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       发送put请求修改供应商信息</span></span><br><span class="line"><span class="comment">       1. 在SpringMVC中配置HiddenHttpMethodFilter（SpringBoot自动配置好了）</span></span><br><span class="line"><span class="comment">       2. 页面创建一个method="post"表单</span></span><br><span class="line"><span class="comment">       3. 创建一个input标签 name="_method"，value="指定请求方式"</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--div的class 为error是验证错误，ok是验证成功--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"providerName"</span>&gt;</span>供应商名称：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"providerName"</span> <span class="attr">id</span>=<span class="string">"providerName"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;provider.providerName&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"people"</span>&gt;</span>联系人：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"people"</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;provider.people&#125;"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"phone"</span>&gt;</span>联系电话：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phone"</span> <span class="attr">id</span>=<span class="string">"phone"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;provider.phone&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"address"</span>&gt;</span>联系地址：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;provider.address&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"fax"</span>&gt;</span>传真：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fax"</span> <span class="attr">id</span>=<span class="string">"fax"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;provider.fax&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"describe"</span>&gt;</span>描述：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"describe"</span> <span class="attr">id</span>=<span class="string">"describe"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;provider.describe&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"providerAddBtn"</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--&lt;a href="#"&gt;保存&lt;/a&gt;--&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--&lt;a href="providerList.html"&gt;返回&lt;/a&gt;--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"保存"</span> <span class="attr">onclick</span>=<span class="string">"$('#updateForm').submit();"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"返回"</span> <span class="attr">onclick</span>=<span class="string">"history.back(-1)"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h3 id="添加供应商"><a href="#添加供应商" class="headerlink" title="添加供应商"></a>添加供应商</h3><ul>
<li><p>前往添加供应商页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//前往添加供应商页面</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/provider"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	<span class="keyword">return</span> <span class="string">"provider/add"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交供应商数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加数据</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/provider"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addProvider</span><span class="params">(Provider provider)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"增加供应商.."</span>+provider);</span><br><span class="line">    providerDao.save(provider);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/providers"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">add.html</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"addForm"</span> <span class="attr">th:method</span>=<span class="string">"post"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/provider&#125;"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"保存"</span> <span class="attr">onclick</span>=<span class="string">"$('#addForm').submit()"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="供应商删除"><a href="#供应商删除" class="headerlink" title="供应商删除"></a>供应商删除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除供应商</span></span><br><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"provider/&#123;pid&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span>  String <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"pid"</span>)</span> Integer pid)</span>&#123;</span><br><span class="line">    providerDao.delete(pid);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/providers"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:attr</span>=<span class="string">"del_uri=@&#123;/provider/&#125; + $&#123;p.pid&#125;"</span> <span class="attr">class</span>=<span class="string">"delete"</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/schu.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"删除"</span> <span class="attr">title</span>=<span class="string">"删除"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--点击删除按钮后弹出的页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"zhezhao"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"deleteForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"remove"</span> <span class="attr">id</span>=<span class="string">"removeProv"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"removerChid"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">h2</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"removeMain"</span> &gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">p</span>&gt;</span>你确定要删除吗？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"yes"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"no"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表页面上点击删除按钮弹出删除框</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'.delete'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//灰背景遮挡效果</span></span><br><span class="line">        $(<span class="string">'.zhezhao'</span>).css(<span class="string">'display'</span>, <span class="string">'block'</span>);</span><br><span class="line">        $(<span class="string">'#removeProv'</span>).fadeIn();</span><br><span class="line">        <span class="comment">//获取点击删除的那个按键的del_uri 然后赋值给提价删除表单的那个action</span></span><br><span class="line">        $(<span class="string">"#deleteForm"</span>).attr(<span class="string">"action"</span>, $(<span class="keyword">this</span>).attr(<span class="string">"del_uri"</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//点击 确定</span></span><br><span class="line">    $(<span class="string">'#yes'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#deleteForm"</span>).submit();</span><br><span class="line">        $(<span class="string">'.zhezhao'</span>).css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span><br><span class="line">        $(<span class="string">'#removeProv'</span>).fadeOut();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//点击 取消</span></span><br><span class="line">    $(<span class="string">'#no'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'.zhezhao'</span>).css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span><br><span class="line">        $(<span class="string">'#removeProv'</span>).fadeOut();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实战_账单管理系统(一)</title>
    <url>/2020/10/08/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98_%E8%B4%A6%E5%8D%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><h4 id="创建并引入项目资源"><a href="#创建并引入项目资源" class="headerlink" title="创建并引入项目资源"></a>创建并引入项目资源</h4><a id="more"></a>

<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/wUURgw6WYE@z.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/wUURgw6WYE@z.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/wUURgw6WYE@z.png"></a></p>
<h4 id="Thymeleaf修改资源路径"><a href="#Thymeleaf修改资源路径" class="headerlink" title="Thymeleaf修改资源路径"></a>Thymeleaf修改资源路径</h4><ul>
<li><p>使用<code>th:href</code>修改资源路径；好处是会自动获取应用名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>账单管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/public.css&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/style.css&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"view.html"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/read.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"查看"</span> <span class="attr">title</span>=<span class="string">"查看"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"update.html"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/xiugai.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"修改"</span> <span class="attr">title</span>=<span class="string">"修改"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"delete"</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/img/schu.png&#125;"</span> <span class="attr">alt</span>=<span class="string">"删除"</span> <span class="attr">title</span>=<span class="string">"删除"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--webjars方式引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;webjars/jquery/3.5.1/jquery.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/js.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 上面会自动获取到应用名 /bill</span><br><span class="line">server.servlet.context-path=/bill</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="Thymeleaf引入片段时传入参数"><a href="#Thymeleaf引入片段时传入参数" class="headerlink" title="Thymeleaf引入片段时传入参数"></a>Thymeleaf引入片段时传入参数</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">id</span>=<span class="string">"public_left"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"leftH2"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"span1"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>功能列表 <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--接收引入时传入的activeUri参数值--&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">li</span> <span class="attr">th:id</span>=<span class="string">"$&#123;activeUri == 'bill' ?'active':''&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/bill/list.html&#125;"</span>&gt;</span>账单管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:id</span>=<span class="string">"$&#123;activeUri == 'provide' ?'active':''&#125;"</span> <span class="attr">id</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../provider/list.html"</span>&gt;</span>供应商管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:id</span>=<span class="string">"$&#123;activeUri == 'user' ?'active':''&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../user/list.html"</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:id</span>=<span class="string">"$&#123;activeUri == 'pwd' ?'active':''&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../main/password.html"</span>&gt;</span>密码修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../main/login.html"</span>&gt;</span>退出系统<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入公共片段时不要在main前面加/ 不然以jar包形式运行时解析不到--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入公共片段处，传入参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">th:replace</span>=<span class="string">"main/public :: #public_left(activeUri='user')"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="默认访问欢迎页"><a href="#默认访问欢迎页" class="headerlink" title="默认访问欢迎页"></a>默认访问欢迎页</h3><ul>
<li><p>默认访问的欢迎页是login.html</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">          <span class="comment">//增加视图控制</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">              registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"main/login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/index"</span>).setViewName(<span class="string">"main/login"</span>);</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改图标</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/9iTwj79E!a!L.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/9iTwj79E!a!L.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/9iTwj79E!a!L.png"></a></p>
</li>
</ul>
<h3 id="国际化信息"><a href="#国际化信息" class="headerlink" title="国际化信息"></a>国际化信息</h3><h4 id="SpringMVC国际化步骤"><a href="#SpringMVC国际化步骤" class="headerlink" title="SpringMVC国际化步骤"></a>SpringMVC国际化步骤</h4><ul>
<li>编写国际化配置文件，需要显示的国际化内容写到配置中</li>
<li>使用<code>ResourceBundleMessageSource</code>管理国际化资源文件</li>
<li>在JSP页面使用<code>&lt;fmt:message&gt;</code>标签取出国际化内容</li>
</ul>
<h4 id="SpringBoot国际化步骤"><a href="#SpringBoot国际化步骤" class="headerlink" title="SpringBoot国际化步骤"></a>SpringBoot国际化步骤</h4><ul>
<li><p>1.编写国际化配置文件，需要显示的国际化内容写到配置中</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类路径下创建 i18n 目录存放配置文件(i18n 是“国际化”的简称)</span></span><br><span class="line"><span class="meta">login.properties</span> <span class="string">(默认国际化文件)</span></span><br><span class="line"><span class="comment">#login_语言代码_国家代码.propertis</span></span><br><span class="line"><span class="meta">login_zh_CN.properties</span> <span class="string">(中文_中国 国际化文件)</span></span><br><span class="line"><span class="meta">login_en_US.properties</span> <span class="string">(英文_美国 国际化文件)</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>先修改properties文件的字符编码，不然出现乱码，进行如下设置：</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/a!pXi9QzVkm!.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/a!pXi9QzVkm!.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/a!pXi9QzVkm!.png"></a></p>
</li>
<li><p>类路径下创建<code>i18n</code>目录存放配置文件</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/TdMb7bbI9MlA.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/TdMb7bbI9MlA.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/TdMb7bbI9MlA.png"></a></p>
</li>
</ul>
</li>
<li><p>2.SpringBoot已经自动配置了管理国际化资源文件的组件<code>MessageSourceAutoConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        //国际化资源相关属性</span></span></span><br><span class="line"><span class="function"><span class="params">        MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//管理国际化资源的组件</span></span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">        <span class="comment">//设置国际化资源文件的基础名(就是去掉 语言_国家代码 之后的名称,自定义的就是login)</span></span><br><span class="line">         messageSource.setBasenames</span><br><span class="line">             (StringUtils.commaDelimitedListToStringArray</span><br><span class="line">              (StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String basename = <span class="string">"messages"</span>;</span><br><span class="line">    <span class="comment">//默认国际化族源文件的基础名（就是去掉 语言_国家 代码之后的名称，上面自定义的是login）  </span></span><br><span class="line">    即 如果我们定义为message。properties就可以放在类路径下，就可不做任何配置就会被直接加载</span><br></pre></td></tr></table></figure>

<ul>
<li><p>通过底层源码分析，得到结论：</p>
<ul>
<li><p>如果国际化资源文件的基础名为<code>message</code>，则可以直接将<code>message.properties</code>文件放到类路径下，就可不做任何配置，容器就会直接加载它。</p>
</li>
<li><p>如果 非<code>message</code>基础名，则在全局配置文件中指定位置（类似包名的方式指定）：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.messages.basename</span> = <span class="string">i18n.login</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>3.登录页面中通过<code>#{}</code>获取国际化的值</p>
<ul>
<li><p>login.html模板页面通过<code>#{}</code>属性获取国际化值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"loginCont"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"loginForm"</span> <span class="attr">action</span>=<span class="string">"../main/index.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputbox"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"user"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputbox"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mima"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"mima"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subBtn"</span>&gt;</span></span><br><span class="line">Thymeleaf 行内表达式双中括号[[表达式]]（参考12 Inlining）</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subBtn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:value</span>=<span class="string">"#&#123;login.submit&#125;"</span> <span class="attr">value</span>=<span class="string">"登录"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">th:value</span>=<span class="string">"#&#123;login.reset&#125;"</span> <span class="attr">value</span>=<span class="string">"重置"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-left: 100px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li>显示效果：通过谷歌浏览器中设置-高级里切换语言查看效果</li>
</ul>
<ul>
<li><p>4.分析切换国际化原理</p>
<ul>
<li>原理：<code>LocaleResolver</code>获取区域信息对象，来切换国际化信息（区域信息就是像<code>zh_CN</code>/<code>en_US</code>）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>,name = &#123;<span class="string">"locale"</span>&#125;)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//1.根据请求头来获取区域信息</span></span><br><span class="line">                AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">                localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">                <span class="keyword">return</span> localeResolver;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//2.请求头区域信息解析器    </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AcceptHeaderLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Locale defaultLocale = <span class="keyword">this</span>.getDefaultLocale();</span><br><span class="line">        <span class="keyword">if</span> (defaultLocale != <span class="keyword">null</span> &amp;&amp; request.getHeader(<span class="string">"Accept-Language"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> defaultLocale;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//3.获取当前收到的请求区域信息，从而来选择国际化语言</span></span><br><span class="line">            <span class="keyword">return</span> requestLocale;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/fFcMgmnSJLFW.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/fFcMgmnSJLFW.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/fFcMgmnSJLFW.png"></a></p>
<ul>
<li>通过上面分析，是根据请求头带来的区域信息来选择对应的国际化信息，即我们可以自定义区域信息解析器</li>
</ul>
<ul>
<li><p>5.点击链接切换国际化</p>
<ul>
<li><p>请求参数中设置区域语言</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-left: 100px;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index(l='zh_CN')&#125;"</span> <span class="attr">href</span>=<span class="string">" "</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index(l='en_US')&#125;"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义区域信息解析器来进行设置区域信息</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解析区域信息</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//获取自定义请求头信息</span></span><br><span class="line">        String l = httpServletRequest.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        <span class="comment">//获取系统 默认的区域信息</span></span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>需要替换mvc自动配置类中区域信息解析器，（返回值与方法名要和下面必须保持一致）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//区域解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
</search>
