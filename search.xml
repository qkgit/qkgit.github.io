<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>markdown使用手册_基础篇</title>
    <url>/2020/05/11/markdown%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C_%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<blockquote>
<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p>
</blockquote>
<blockquote>
<p>不说废话 直接来干货 反正也是我自己看</p>
</blockquote>
<a id="more"></a>


<hr>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">样式</a></li><li class="tab"><a href="#tab-2">代码</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5></div><div class="tab-pane" id="tab-2"><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br></pre></td></tr></table></figure></div></div></div>



<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>样式:</p>
<blockquote>
<p>一级引用</p>
</blockquote>
<blockquote>
<blockquote>
<p>二级引用</p>
</blockquote>
</blockquote>
<p>嵌套引用</p>
<blockquote>
<p>1    </p>
<blockquote>
<p>2</p>
<blockquote>
<p>3</p>
</blockquote>
</blockquote>
</blockquote>
<p>代码:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span> 二级引用</span><br><span class="line"></span><br><span class="line">嵌套引用</span><br><span class="line">&gt;<span class="number">1</span>    </span><br><span class="line"><span class="meta">&gt;&gt;</span><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h1 id="字体与分割线"><a href="#字体与分割线" class="headerlink" title="字体与分割线"></a>字体与分割线</h1><p>样式：<br>分割线：</p>
<hr>
<h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a><strong>粗体</strong></h2><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a><em>斜体</em></h2><h2 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a><strong><em>斜体加粗</em></strong></h2><h2 id="键盘体"><a href="#键盘体" class="headerlink" title="键盘体"></a><kbd>键盘体</kbd></h2><h2 id="加框文字-这是不加框的文字"><a href="#加框文字-这是不加框的文字" class="headerlink" title="加框文字 这是不加框的文字"></a><code>加框文字</code> 这是不加框的文字</h2><h2 id="行内代码println-a-println-a"><a href="#行内代码println-a-println-a" class="headerlink" title="行内代码println(a); println(a);"></a>行内代码<code>println(a);</code> println(a);</h2><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a><del>删除线</del></h2><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a><ins>下划线</ins></h2><p>代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**粗体**</span> 或者 <span class="strong">__粗体__</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">*斜体*</span> 或者 <span class="emphasis">_斜体_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">***斜体加粗**</span>* 或者  <span class="strong">___斜体加粗__</span>_</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>键盘体<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> (html标签)</span><br><span class="line"></span><br><span class="line"><span class="code">`加框文字`</span></span><br><span class="line"></span><br><span class="line"><span class="code">``行内代码`</span>`</span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ins</span>&gt;</span></span>下划线<span class="xml"><span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span> (html标签)</span><br><span class="line"></span><br><span class="line">分割线：使用三个或者三个以上的(-)或者(*)</span><br><span class="line">例如：  ---   或者  <span class="emphasis">***</span></span><br></pre></td></tr></table></figure>

<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表样式：</p>
<ul>
<li>列表内容A</li>
</ul>
<ul>
<li>列表内容B</li>
</ul>
<ul>
<li>列表内容C</li>
</ul>
<p>有序列表样式：</p>
<ol>
<li>列表内容1</li>
<li>列表内容2</li>
<li>列表内容3</li>
</ol>
<p>列表嵌套：只要在上一级和下一级之间敲三个空格即可<br>（同类型和不同类型的列表都可以嵌套）<br>例如：</p>
<ul>
<li>一级列表A<ol>
<li>二级列表1</li>
<li>二级列表2</li>
<li>二级列表3</li>
</ol>
</li>
</ul>
<ul>
<li>一级列表B<ol>
<li>二级列表1</li>
<li>二级列表2</li>
<li>二级列表3</li>
</ol>
</li>
</ul>
<p>代码：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">无序列表用+ - * 任何一种都可以</span><br><span class="line">- 列表内容A</span><br><span class="line">+ 列表内容B</span><br><span class="line">* 列表内容C</span><br><span class="line"></span><br><span class="line">有序列表用 数字+.的形式</span><br><span class="line"><span class="number">1.</span> 列表内容<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 列表内容<span class="number">2</span></span><br><span class="line"><span class="number">3.</span> 列表内容<span class="number">3</span></span><br><span class="line"></span><br><span class="line">列表嵌套：只要在上一级和下一级之间敲三个空格即可</span><br><span class="line">（同类型和不同类型的列表都可以嵌套）</span><br><span class="line">例如：</span><br><span class="line">* 一级列表A</span><br><span class="line">   <span class="number">1.</span> 二级列表<span class="number">1</span></span><br><span class="line">   <span class="number">2.</span> 二级列表<span class="number">2</span></span><br><span class="line">   <span class="number">3.</span> 二级列表<span class="number">3</span></span><br><span class="line">- 一级列表B</span><br><span class="line">   <span class="number">1.</span> 二级列表<span class="number">1</span></span><br><span class="line">   <span class="number">2.</span> 二级列表<span class="number">2</span></span><br><span class="line">   <span class="number">3.</span> 二级列表<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h1 id="插入媒体与超链接"><a href="#插入媒体与超链接" class="headerlink" title="插入媒体与超链接"></a>插入媒体与超链接</h1><p>代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">插入图片：</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">图片地址 "可选标题"</span>)</span><br><span class="line"></span><br><span class="line">插入视频等其他媒体：</span><br><span class="line">可以直接使用HTML的标签，也可以在现在主流媒体网站的分享选项中，找到插入的代码。CtrlC即可！</span><br><span class="line"></span><br><span class="line">超链接 和 邮箱地址：：</span><br><span class="line">[<span class="string">超链接名</span>](<span class="link">超链接Url "可选标题"</span>)</span><br><span class="line">或者</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">邮箱地址</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">注意：可选标题都可以不写，这是鼠标移上去显示的名称。</span><br><span class="line">Markdown语法不支持链接在新的标签页中打开，不过有些网站做了特殊处理，是可以的。有的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</span><br></pre></td></tr></table></figure>
<p>效果：<br>图片：<br><img src="https://www.baidu.com/img/bd_logo1.png" alt="图片描述" title="百度"><br>超链接：<br><a href="https://www.baidu.com" target="_blank" rel="noopener" title="百度">百度</a><br>邮箱：<br><a href="mailto:&#x31;&#x35;&#x38;&#x34;&#53;&#x34;&#54;&#55;&#x36;&#x30;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#109;">&#x31;&#x35;&#x38;&#x34;&#53;&#x34;&#54;&#55;&#x36;&#x30;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#109;</a></p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>样式：</p>
<table>
<thead>
<tr>
<th align="left">表头A</th>
<th align="center">表头B</th>
<th align="right">表头C</th>
</tr>
</thead>
<tbody><tr>
<td align="left">内容居左</td>
<td align="center">内容居中</td>
<td align="right">内容居右</td>
</tr>
<tr>
<td align="left">内容居左</td>
<td align="center">内容居中</td>
<td align="right">内容居右</td>
</tr>
</tbody></table>
<p>代码:</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">表头A</span>|<span class="string">表头B</span>|<span class="string">表头C</span>|</span><br><span class="line">|<span class="string">:--</span>|<span class="string">:--:</span>|<span class="string">--:</span>|</span><br><span class="line">|<span class="string">内容居左</span>|<span class="string">内容居中</span>|<span class="string">内容居右</span>|</span><br><span class="line">|<span class="string">内容居左</span>|<span class="string">内容居中</span>|<span class="string">内容居右</span>|</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，有时候可以多加几个，不过有可能有些编辑器会出问题。</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 |<span class="string"> 包起来。也可以省略。</span></span><br></pre></td></tr></table></figure>

<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>样式：</p>
<figure class="highlight java"><figcaption><span>这是代码</span><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">&#123;```&#125;[指定一种语言（也可以不指定）] [title] [url] [link <span class="built_in">text</span>]</span><br><span class="line">（常见的支持：HTML、C、C#、CSS、Delphi、Java、JavaScript、JSON、Php、Python、Shell、SQL、XML、Matlab、GO等等还有很多）</span><br><span class="line">例如：</span><br><span class="line">&#123;```&#125;Java 这是代码 https:<span class="comment">//www.baidu.com 百度</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.<span class="built_in">println</span>(<span class="string">"Hello World"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#123;```&#125;</span><br><span class="line">使用时去掉大括号</span><br><span class="line"></span><br><span class="line">或者代码区块使用 <span class="number">4</span> 个空格或者一个制表符（Tab 键）</span><br></pre></td></tr></table></figure>

<h1 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h1><p>MarkDown 还有<del>脚注（[^ 要注明的文本]）</del>（没试出来不知道是不是写的有啥问题），</p>
<p>使用反斜杠、感叹号、花括号进行  <strong><u><span class="label danger">转义</span></u></strong> 等等，</p>
<p>这些之外，他还全面支持 <strong><u><span class="label danger">HTML标签</span></u></strong>，有些时候也可以使用 HTML 标签来编写文档。</p>
<p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax <strong><u><span class="label danger">对数学公式进行渲染</span></u></strong> </p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot的Web开发(2)</title>
    <url>/2020/10/02/Spring%20Boot%E7%9A%84Web%E5%BC%80%E5%8F%91(2)/</url>
    <content><![CDATA[<h3 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h3><blockquote>
<p>Spring Boot官方不推荐使用JSP,因为内嵌的Tomcat、Jetty容器不支持以jar形式运行JSP。Spring Boot中提供了大量模板引擎，包含Freemarker、Mastache、Thymeleaf等。而Spring Boot官方推荐使用Thymeleaf作为模板引擎，因为Thymeleaf提供了完美的SpringMVC的支持。</p>
</blockquote>
<a id="more"></a>

<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/a2hdXt5oO^LZ.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/a2hdXt5oO%5ELZ.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/a2hdXt5oO^LZ.png"></a></p>
<h4 id="引入Thymeleaf"><a href="#引入Thymeleaf" class="headerlink" title="引入Thymeleaf"></a>引入Thymeleaf</h4><ul>
<li><p><code>pom.xml</code>加入Thymeleaf</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf 模板启动器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="使用Thymeleaf"><a href="#使用Thymeleaf" class="headerlink" title="使用Thymeleaf"></a>使用Thymeleaf</h4><ul>
<li><p>模板文件放在哪里？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.thymeleaf"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>通过对spring-boot-autoconfigure-2.3.4.RELEASE.jar!\org\springframework\boot\autoconfigure\thymeleaf\ThymeleafProperties.class分析发现，将HTML页面放到<strong>classpath:/templates</strong>目录下，Thymeleaf就能自动渲染</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/execute"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">(Map&lt;String,Object&gt;map)</span></span>&#123;</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"Thymeleaf"</span>);</span><br><span class="line">        <span class="comment">//没有使用@ResponseBody classpath:/templates/success.html</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建controller层进行测试，在浏览器发送<a href="http://localhost:8080/execute后，通过代码转到classpath:/templates/success.html" target="_blank" rel="noopener">http://localhost:8080/execute后，通过代码转到classpath:/templates/success.html</a></p>
</li>
</ul>
</li>
<li><p>导入Thymeleaf的名称空间</p>
<p>在html页面加上以下名称空间，使用Thymeleaf时就有语法提示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>演示Thymeleaf语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th:text 会将获取到的数据写到标签体中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span>这里显示默认值 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="Thymeleaf语法"><a href="#Thymeleaf语法" class="headerlink" title="Thymeleaf语法"></a>Thymeleaf语法</h4><h5 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h5><ul>
<li><p>参考Thymeleaf官方文档 <code>10 Attribute Precedence</code></p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>属性名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>th:insert<br />th:replace</td>
<td>引入片段，与th:fragment声明组合使用；类似于jsp:include</td>
</tr>
<tr>
<td>2</td>
<td>th:each</td>
<td>遍历，类似于c:forEach</td>
</tr>
<tr>
<td>3</td>
<td>th:if<br />th:unless<br />th:switch<br />th:case</td>
<td>条件判断，类似于c:if</td>
</tr>
<tr>
<td>4</td>
<td>th:object<br />th:with</td>
<td>声明变量，类似于c:set</td>
</tr>
<tr>
<td>5</td>
<td>th:attr<br />th:attrprepend<br />th:attrappend</td>
<td>修改任意属性，prepend前面追加，append后面追加</td>
</tr>
<tr>
<td>6</td>
<td>th:value<br />th:href<br />th:src<br />…</td>
<td>修改任意HTML原生属性值</td>
</tr>
<tr>
<td>7</td>
<td>th:text<br />th:utext</td>
<td>修改标签体中的内容，<br />th:text转义特殊字符，即h1标签以文本显示出来<br />th:utext不转义特殊字符，即h1标签展现出本来效果</td>
</tr>
<tr>
<td>8</td>
<td>th:fragment</td>
<td>声明片段</td>
</tr>
<tr>
<td>9</td>
<td>th:remove</td>
<td>移除片段</td>
</tr>
</tbody></table>
<h5 id="标准表达式语法"><a href="#标准表达式语法" class="headerlink" title="标准表达式语法"></a>标准表达式语法</h5><ul>
<li><p>参考Thymeleaf官方文档<code>4 Standard Expression Syntax</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">一、Simple expressions（表达式语法）</span><br><span class="line">1. Variable Expressions(变量表达式): $&#123;...&#125; （参考： 4.2 Variables）</span><br><span class="line">	1)、获取变量值；使用OGNL表达式；</span><br><span class="line">	2）、获取对象的属性, 调用方法</span><br><span class="line">	3）、使用内置的基本对象：</span><br><span class="line">		#ctx : the context object.(当前上下文对象)</span><br><span class="line">		#vars: the context variables.(当前上下文里的变量)</span><br><span class="line">		#locale : the context locale. (当前上下文里的区域信息)</span><br><span class="line">		下面是Web环境下的隐式对象</span><br><span class="line">		#request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">		#response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">		#session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">		#servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="line">		示例: $&#123;session.foo&#125; (用法参考: 18 Appendix A: Expression Basic Objects)</span><br><span class="line">		4）、使用内置的工具对象：(用法参考: 19 Appendix B: Expression Utility Objects)</span><br><span class="line">		#execInfo : information about the template being processed.</span><br><span class="line">		#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span><br><span class="line">		#uris : methods for escaping parts of URLs/URIs</span><br><span class="line">		#conversions : methods for executing the configured conversion service (if any).</span><br><span class="line">		#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">		#calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="line">		#numbers : methods for formatting numeric objects.</span><br><span class="line">		#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="line">		#objects : methods for objects in general.</span><br><span class="line">		#bools : methods for boolean evaluation.</span><br><span class="line">		#arrays : methods for arrays.</span><br><span class="line">		#lists : methods for lists.</span><br><span class="line">		#sets : methods for sets.</span><br><span class="line">		#maps : methods for maps.</span><br><span class="line">		#aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="line">		#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an</span><br><span class="line">iteration).</span><br><span class="line">2. Selection Variable Expressions(选择表达式): *&#123;...&#125;（参考：4.3 Expressions on selections）</span><br><span class="line">	1）、和$&#123;&#125;在功能上是一样， 额外新增：配合 th:object 使用</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span></span><br><span class="line">		   省得每次写$&#123;session.user.firstName&#125;, 直接取出对象，然后写对象名即可</span><br><span class="line">		   <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		   <span class="tag">&lt;<span class="name">p</span>&gt;</span>Email: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;email&#125;"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">3. Message Expressions（获取国际化内容）: #&#123;...&#125; （参考：4.1 Messages）</span><br><span class="line">4. Link URL Expressions（定义URL）: @&#123;...&#125; （参考：4.4 Link URLs）</span><br><span class="line">5. Fragment Expressions（片段引用表达式）: ~&#123;...&#125; （参考：4.5 Fragments）</span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;commons :: main&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">二、Literals（字面量） （参考： 4.6 Literals）</span><br><span class="line">	1. Text literals: 'one text' , 'Another one!' ,…</span><br><span class="line">	2. Number literals: 0 , 34 , 3.0 , 12.3 ,…</span><br><span class="line">	3. Boolean literals: true , false</span><br><span class="line">	4. Null literal: null</span><br><span class="line">	5. Literal tokens: one , sometext , main ,…</span><br><span class="line">三、Text operations（文本操作） （参考： 4.7 Appending texts）</span><br><span class="line">	1. String concatenation: +</span><br><span class="line">	2. Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">四、Arithmetic operations（数学运算） （参考： 4.9 Arithmetic operations）</span><br><span class="line">	1. Binary operators: + , - , * , / , %</span><br><span class="line">	2. Minus sign (unary operator): -</span><br><span class="line">五、Boolean operations（布尔运算）</span><br><span class="line">	1. Binary operators: and , or</span><br><span class="line">	2. Boolean negation (unary operator): ! , not</span><br><span class="line">五、Comparisons and equality（比较运算） （参考： 4.10 Comparators and Equality）</span><br><span class="line">	1. Comparators: &gt; , <span class="tag">&lt; , &gt;</span>= , <span class="tag">&lt;<span class="name">=</span> ( <span class="attr">gt</span> , <span class="attr">lt</span> , <span class="attr">ge</span> , <span class="attr">le</span> )</span></span><br><span class="line"><span class="tag">	<span class="attr">2.</span> <span class="attr">Equality</span> <span class="attr">operators:</span> == <span class="string">,</span> != <span class="string">(</span> <span class="attr">eq</span> , <span class="attr">ne</span> )</span></span><br><span class="line"><span class="tag">六、<span class="attr">Conditional</span> <span class="attr">operators</span>(条件表达式;三元运算符) （参考： <span class="attr">4.11</span> <span class="attr">Conditional</span> <span class="attr">expressions</span>）</span></span><br><span class="line"><span class="tag">	<span class="attr">1.</span> <span class="attr">If-then:</span> (<span class="attr">if</span>) ? (<span class="attr">then</span>)</span></span><br><span class="line"><span class="tag">	<span class="attr">2.</span> <span class="attr">If-then-else:</span> (<span class="attr">if</span>) ? (<span class="attr">then</span>) <span class="attr">:</span> (<span class="attr">else</span>)</span></span><br><span class="line"><span class="tag">	<span class="attr">3.</span> <span class="attr">Default:</span> (<span class="attr">value</span>) ?<span class="attr">:</span> (<span class="attr">defaultvalue</span>)</span></span><br><span class="line"><span class="tag">七、<span class="attr">Special</span> <span class="attr">tokens</span>（特殊操作） (参考： <span class="attr">4.13</span> <span class="attr">The</span> <span class="attr">No-Operation</span> <span class="attr">token</span>)</span></span><br><span class="line"><span class="tag">	<span class="attr">1.</span> <span class="attr">No-Operation:</span> <span class="attr">_</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="实例代码演示"><a href="#实例代码演示" class="headerlink" title="实例代码演示"></a>实例代码演示</h4><h5 id="声明与引入公共片段"><a href="#声明与引入公共片段" class="headerlink" title="声明与引入公共片段"></a>声明与引入公共片段</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>公共片段<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过th:fragment声明代码片段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"header_common"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">           这是th:fragment声明公共片段</span><br><span class="line">       <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过选择器声明--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header_common_id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            这是id声明公共片段</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th:text 会将获取到的数据写到标签体中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span>这里显示默认值 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入公共代码片段--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式一：</span></span><br><span class="line"><span class="comment">    header：公共片段所在模板的文件名</span></span><br><span class="line"><span class="comment">    header_common：声明代码片段名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"header :: header_common"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式二：</span></span><br><span class="line"><span class="comment">    header：公共片段所在模板的文件名</span></span><br><span class="line"><span class="comment">    #header_common_id：声明代码的id值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:replace</span>=<span class="string">"header :: #header_common_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    th:insert 和 th:replace的区别</span></span><br><span class="line"><span class="comment">    th:insert和th:replace都可以引入片段，两者的区别在于</span></span><br><span class="line"><span class="comment">    th:insert： 保留引入时使用的标签</span></span><br><span class="line"><span class="comment">    th:replace：不保留引入时使用的标签, 将声明片段直接覆盖当前引用标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:insert</span>=<span class="string">"header :: #header_common_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="迭代th-each"><a href="#迭代th-each" class="headerlink" title="迭代th:each"></a>迭代<code>th:each</code></h5><ul>
<li><p>常用迭代方式</p>
<ul>
<li><p>HelloConller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/study"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">study</span><span class="params">(Map&lt;String,Object&gt;map, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    List&lt;User&gt;userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">"小梦"</span>,<span class="number">1</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">"小李"</span>,<span class="number">2</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">"小张"</span>,<span class="number">1</span>));</span><br><span class="line">    map.put(<span class="string">"userList"</span>,userList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"study"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>study.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:each作用在哪个标签上面，对应的就会根据它的值迭代多少次--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user :$&#123;userList&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.username&#125;"</span>&gt;</span>username<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.gender == 1 ? '女':'男'&#125;"</span>&gt;</span>未知<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--作用在同一标签上，每次迭代生成一个当前标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"user :$&#123;userList&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>获取迭代状态</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>总数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>奇偶<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>是否为第一个元素<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>是否为最后一个元素<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           user : 第1个值,代表每次迭代出对象,名字任意取</span></span><br><span class="line"><span class="comment">           iterStat : 第2个值,代表每次迭代器内置对象, 名字任意取, 并有如下属性:</span></span><br><span class="line"><span class="comment">               index : 当前迭代下标 0 开始</span></span><br><span class="line"><span class="comment">               count : 当前迭代下标 1 开始</span></span><br><span class="line"><span class="comment">               size : 获取总记录数</span></span><br><span class="line"><span class="comment">               current : 当前迭代出的对象</span></span><br><span class="line"><span class="comment">               even/odd : 当前迭代是偶数还是奇数 (1开始算,返回布尔值)</span></span><br><span class="line"><span class="comment">               first : 当前是否为第一个元素</span></span><br><span class="line"><span class="comment">               last : 当前是否为最后一个元素</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user,iterStat:$&#123;userList&#125;"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;iterStat.count&#125;"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.username&#125;"</span>&gt;</span>username<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.gender == 1 ? '女':'男'&#125;"</span>&gt;</span>未知<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;iterStat.size&#125;"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;iterStat.even&#125;? '偶数':'奇数'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;iterStat.first&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;iterStat.last&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><ul>
<li><p>th:if 不仅判断返回为true的表达式，还判断一些特殊的表达式。</p>
<ul>
<li><p>如果值不是Null，以下情况均返回true：</p>
<ul>
<li>如果值是boolean类型并且值为true</li>
<li>如果值是数值类型并且值不为0</li>
<li>如果值是字符类型并且值不为空</li>
<li>如果值是字符串并且内容不为<code>&quot;false&quot;</code>,<code>&quot;off&quot;</code>或者<code>&quot;no&quot;</code></li>
<li>如果值不是上述类型也返回true</li>
</ul>
</li>
<li><p>如果值是Null，则返回false</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:if 如果值为true，则显示出该标签，否则不显示</span></span><br><span class="line"><span class="comment">            $&#123;#lists.isEmpty(userList)&#125; true说明userList是空     not... false</span></span><br><span class="line"><span class="comment">            $&#123;#lists.isEmpty(userList)&#125; false说明userList不是空   not... true</span></span><br><span class="line"><span class="comment">        th:unless 与th:if 相反</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:if</span>=<span class="string">"not $&#123;#lists.isEmpty(userList)&#125;"</span>&gt;</span>显示出来说明userList集合不为空<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:unless</span>=<span class="string">" $&#123;#lists.isEmpty(userList)&#125;"</span>&gt;</span>显示出来说明userList集合不为空<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>th:unless</strong>与<strong>th:if</strong>作用正好相反</p>
</li>
<li><p>th:swith   th:case</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/study"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">study</span><span class="params">(Map&lt;String,Object&gt;map, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt;userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小梦"</span>,<span class="number">1</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小李"</span>,<span class="number">2</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小张"</span>,<span class="number">1</span>));</span><br><span class="line">        map.put(<span class="string">"userList"</span>,userList);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1女  2男</span></span><br><span class="line">        map.put(<span class="string">"sex"</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"man"</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"study"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;sex&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"1"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--判断sex的值和下面取出man的值是否相等，相等则显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"$&#123;man&#125;"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果上面均不满足，取下面默认值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>未知<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="显示标签体内容"><a href="#显示标签体内容" class="headerlink" title="显示标签体内容"></a>显示标签体内容</h5><ul>
<li><p><strong>th:text</strong>  转义特殊字符，即h1标签以文本显示出来</p>
</li>
<li><p><strong>th:utext</strong> 不转义特殊字符，即h1标签展现出本来效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/study"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">study</span><span class="params">(Map&lt;String,Object&gt;map, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt;userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小梦"</span>,<span class="number">1</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小李"</span>,<span class="number">2</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小张"</span>,<span class="number">1</span>));</span><br><span class="line">        map.put(<span class="string">"userList"</span>,userList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1女  2男</span></span><br><span class="line">        map.put(<span class="string">"sex"</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"man"</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//th:text th:utext</span></span><br><span class="line">        map.put(<span class="string">"desc"</span>,<span class="string">"hello&lt;h1&gt;world&lt;/h1&gt;"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"study"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;desc&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;desc&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>补充：Thymemleaf行内表达式双中括号：<code>[[表达式]]</code>（就是不在标签上使用属性，参考12 Inling）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span> [[$&#123;desc&#125;]]</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, [[$&#123;desc&#125;]] 。。。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="th-object直接取出对象"><a href="#th-object直接取出对象" class="headerlink" title="th:object直接取出对象"></a><code>th:object</code>直接取出对象</h5><ul>
<li><p>使用th:object直接取出对象，然后写对象里的属性名即可获取属性值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"/study"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">study</span><span class="params">(Map&lt;String,Object&gt;map, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt;userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小梦"</span>,<span class="number">1</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小李"</span>,<span class="number">2</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"小张"</span>,<span class="number">1</span>));</span><br><span class="line">        map.put(<span class="string">"userList"</span>,userList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1女  2男</span></span><br><span class="line">        map.put(<span class="string">"sex"</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"man"</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//th:text th:utext</span></span><br><span class="line">        map.put(<span class="string">"desc"</span>,<span class="string">"hello&lt;h1&gt;world&lt;/h1&gt;"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"大明"</span>, <span class="number">2</span>);</span><br><span class="line">        request.getSession().setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"study"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用th:object 直接取出对象，然后写对象里的属性名即可获取属性值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;gender == 1 ? '女':'男'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SpringBoot热部署"><a href="#SpringBoot热部署" class="headerlink" title="SpringBoot热部署"></a>SpringBoot热部署</h3><ul>
<li><p>默认情况下，在开发中我们修改一个项目文件后，想看到效果不得不重启应用，这会导致浪费大量时间，我们希望不重启应用的情况下，程序可以自动部署（热部署）。</p>
</li>
<li><p><strong>如何能实现热部署？</strong></p>
<ol>
<li><p><strong>关于模板引擎</strong></p>
<ul>
<li><p>在Spring Boot开发环境下禁用模板缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#开发环境下关闭thymeleaf模板缓存，thymeleaf默认是开启状态</span><br><span class="line">spring.thymeleaf.cache=false</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>添加Spring Boot Devtools 热部署</strong></li>
</ol>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>Intellij IDEA和Eclipse不同，Intellij IDEA必须做一些小调整：</strong></li>
</ol>
<ul>
<li><p>在 Eclipse 中，修改文件后要手动进行保存，它就会自动编译，就触发热部署现象。</p>
</li>
<li><p>在Intellij IEDA 中，修改文件后都是自动保存，默认不会自动编译文件， 需要手动编译按 <strong>Ctrl + F9 （推荐使用）</strong>或 Build -&gt; Build Project ; 或者进行以下设置才会自动编译（效果不明显）</p>
<p>(File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Compiler -&gt; 勾选 Build project automatically)</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/7MuRfO3Ru^Is.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/7MuRfO3Ru%5EIs.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/7MuRfO3Ru^Is.png"></a></p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="分析SpringMVC自动配置"><a href="#分析SpringMVC自动配置" class="headerlink" title="分析SpringMVC自动配置"></a>分析SpringMVC自动配置</h3><p>SpringBoot为Spring MVC提供了适应于多数应用的自动配置功能（<code>WebMvcAutoConfiguration</code>）。</p>
<p>在Spring默认基础上，自动配置添加了以下特性：</p>
<ul>
<li><p>引入<code>ContentNegotiatingViewResolver</code>和<code>BeanNameViewResolver</code> beans.</p>
<ul>
<li><p>自动配置了视图解析器ViewResolver(根据方法返回值获取视图对象View，视图对象决定如何渲染？重定向or转发)</p>
</li>
<li><p><code>ContentNegotiatingViewResolver</code>:组合所有的视图解析器的（通过源码可分析出）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentNegotiatingViewResolver</span></span></span><br><span class="line"><span class="class">//146</span></span><br><span class="line"><span class="class">@<span class="title">Nullable</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">View</span> <span class="title">resolveViewName</span>(<span class="title">String</span> <span class="title">viewName</span>, <span class="title">Locale</span> <span class="title">locale</span>) <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        RequestAttributes attrs = RequestContextHolder.getRequestAttributes();</span><br><span class="line">        Assert.state(attrs <span class="keyword">instanceof</span> ServletRequestAttributes, <span class="string">"No current ServletRequestAttributes"</span>);</span><br><span class="line">        List&lt;MediaType&gt; requestedMediaTypes = <span class="keyword">this</span>.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());</span><br><span class="line">        <span class="keyword">if</span> (requestedMediaTypes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//选择所有候选的视图对象</span></span><br><span class="line">            List&lt;View&gt; candidateViews = <span class="keyword">this</span>.getCandidateViews(viewName, locale, requestedMediaTypes);</span><br><span class="line">            <span class="comment">//从候选中选择最合适的视图对象</span></span><br><span class="line">            View bestView = <span class="keyword">this</span>.getBestView(candidateViews, requestedMediaTypes, attrs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//存入所有视图解析器</span></span><br><span class="line"> <span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line"><span class="comment">//107</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initServletContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">   Collection&lt;ViewResolver&gt; matchingBeans = 			BeanFactoryUtils.beansOfTypeIncludingAncestors(</span><br><span class="line">   <span class="comment">//从容器中获取所有的视图解析器    </span></span><br><span class="line">   <span class="keyword">this</span>.obtainApplicationContext(), ViewResolver<span class="class">.<span class="keyword">class</span>).<span class="title">values</span>()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义视图解析器：可以@Bean向容器中添加一个我们自定义的视图解析器，即可被容器管理使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ViewResolver <span class="title">MyViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span></span>&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String s, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DispatcherServlet.doDispatch 断点后,发送任意请求，可查看已被容器自动管理了</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自动注册<code>Converter</code>,<code>GenericConverter</code>,and<code>Formatter</code>beans。</p>
<ul>
<li><p><code>Converter</code>：转换器；如：文本类型转换目标类型，true转boolean类型</p>
</li>
<li><p><code>GenericConverter</code>：转换器，Spring内部在注册时，会将Converter先转换为GenericConverter之后，再统一对GenericConverter注册。</p>
</li>
<li><p><code>Formatter</code>：格式化器；如：2020/10/6 格式化Date类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//WebMvcAutoConfiguration.mvcConversionService  295</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FormattingConversionService <span class="title">mvcConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          Format format = <span class="keyword">this</span>.mvcProperties.getFormat();</span><br><span class="line">            WebConversionService conversionService = <span class="keyword">new</span> WebConversionService((<span class="keyword">new</span> DateTimeFormatters()).dateFormat(format.getDate()).timeFormat(format.getTime()).dateTimeFormat(format.getDateTime()));</span><br><span class="line">            <span class="keyword">this</span>.addFormatters(conversionService);</span><br><span class="line">            <span class="keyword">return</span> conversionService;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//将格式化器添加到容器</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configurers.addFormatters(registry);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>对<code>HttpMessageConverters</code>的支持。</p>
<ul>
<li>SpringMVC用它来转换Http请求和响应的;</li>
<li>可以通过@Bean向容器中添加一个我们自定义的<code>HttpMessageConverters</code>,即可被容器管理使用</li>
</ul>
</li>
<li><p>自动注册<code>MessageCodesResolver</code></p>
<ul>
<li>定义错误代码生成规则</li>
</ul>
</li>
<li><p>自动注册<code>ConfigurableWebBindingInitializer</code></p>
<ul>
<li>初始化所有Web数据绑定器对象，比如请求数据—–》JavaBean</li>
</ul>
</li>
<li><p>对静态资源的支持，包括Webjars的支持</p>
</li>
<li><p>对静态首页index.html的支持</p>
</li>
<li><p>对自定义<code>Favicon</code>图标的支持</p>
</li>
</ul>
<p>如果想保留Spring Boot MVC的特性，而且还想扩展新的功能（拦截器，格式化器，视图控制器等），你可以在你自定义的<code>WebMvcConfigurer</code>类上增加<code>@Configuration</code>注解。</p>
<p>如果你想全面控制Spring MVC(也就是不使用默认配置功能)，你在自定义的Web配置类上添加<code>@Configuration</code>和<code>@EnableWebMvc</code>注解。</p>
<h3 id="扩展SpringMVC功能"><a href="#扩展SpringMVC功能" class="headerlink" title="扩展SpringMVC功能"></a>扩展SpringMVC功能</h3><ul>
<li><p>扩展一个视图解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/test"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果想保留Spring Boot MVC的特性，而且还想扩展新的功能（拦截器，格式化器，视图控制器等），你可以在你自定义的<code>WebMvcConfigurer</code>类上增加<code>@Configuration</code>注解。</p>
<p><strong>自定义配置类保留了所有的自动配置，也能用我们扩展的功能</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.创建一个WebMvcConfigurer类型的子类</span></span><br><span class="line"><span class="comment"> * 2.类上用<span class="doctag">@Configuration</span>标识它是一个配置类</span></span><br><span class="line"><span class="comment"> * 3.不能<span class="doctag">@EnableWebMvc</span>标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringMvcConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加视图控制 ctrl+i</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//发送 /text 请求会来的success页面</span></span><br><span class="line">        registry.addViewController(<span class="string">"/test"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>原理：</strong></p>
<p>1.自定义WebMvcConfigurer自动配置时会导入：<code>@Import({WebMvcAutoConfiguration.EnableWebMvcConfiguration.class})</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入EnableWebMvcConfiguration.class</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;WebMvcAutoConfiguration.EnableWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(</span>&#123;WebMvcProperties<span class="class">.<span class="keyword">class</span>, <span class="title">ResourceProperties</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Order</span>(0)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>2.EnableWebMvcConfiguration 继承了 DelegatingWebMvcConfiguration</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">        proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>3.分析 DelegatingWebMvcConfiguration ， 会将所有web配置组件加到WebMvcConfigurerComposite中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存储了所有的mvc配置类组件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          一个参考实现：将所有的WebMvcConfigurer相关配置都来一起调用</span></span><br><span class="line"><span class="comment">          public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        Iterator var2 = this.delegates.iterator();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        while(var2.hasNext()) &#123;</span></span><br><span class="line"><span class="comment">            WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();</span></span><br><span class="line"><span class="comment">            delegate.addViewControllers(registry);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>4.保留原来的配置类，也添加了新的配置类，所有的WebMvcConfigurer都会一起起作用</p>
<h3 id="全面控制SpringMVC"><a href="#全面控制SpringMVC" class="headerlink" title="全面控制SpringMVC"></a>全面控制SpringMVC</h3><p>如果你想全面控制Spring MVC(也就是不使用默认配置功能)，你在自定义的Web配置类上添加<code>@Configuration</code>和<code>@EnableWebMvc</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringMvcConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加视图控制</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//发送 /text 请求会来的success页面</span></span><br><span class="line">        registry.addViewController(<span class="string">"/test"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>原理：</strong>为什么添加<code>@EnableWebMvc</code>自动配置就失效了？</p>
<p>1.<code>@EnableWebMvc</code>的核心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>2.继承了WebMvcConfigurationSupport类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>而在 WebMvcAutoConfiguration 上使用了 <code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *而 @ConditionalOnMissingBean 表示的是没有WebMvcConfigurationSupport这个组件,</span></span><br><span class="line"><span class="comment"> *WebMvcAutoConfiguration自动配置类才会生效.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;WebMvcConfigurationSupport<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(-2147483638)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123;DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">TaskExecutionAutoConfiguration</span>.<span class="title">class</span>, <span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] SERVLET_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>4.相反<code>@EnableWebMvc</code>将<code>WebMvcConfigurationSupport</code>组件导入进来，使得WebMvcAutoConfiguration就失效了</p>
<p>5.<code>WebMvcConfigurationSupport</code>只是SpringMVC最基本的功能</p>
</li>
</ol>
</li>
</ul>
<h3 id="总结SpringMVC配置"><a href="#总结SpringMVC配置" class="headerlink" title="总结SpringMVC配置"></a>总结SpringMVC配置</h3><ul>
<li>在Spring Boot中自已配置组件的时候，先看容器中有没有公司自已配置的（@Bean、@Component）,如果 有就用公司自已配置的; 如果没有，才自动配置</li>
<li>在Spring Boot中会有非常多的xxxConfigurer帮助我们进行扩展配置</li>
<li>在Spring Boot中会有很多的xxxCustomizer帮助我们进行定制配置</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot入门到项目实践5</title>
    <url>/2020/09/26/springboot%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B55/</url>
    <content><![CDATA[<h3 id="Profile多环境支持"><a href="#Profile多环境支持" class="headerlink" title="Profile多环境支持"></a>Profile多环境支持</h3><h4 id="Profile介绍"><a href="#Profile介绍" class="headerlink" title="Profile介绍"></a>Profile介绍</h4><ul>
<li>Profile是Spring用来针对不同的环境要求，提供不同的配置支持，全局Profile配置使用的文件名可以是<code>application-{profile}.properties</code>/<code>application-{profile}.yml</code><a id="more"></a>
<ul>
<li>如：application-dev.properties/application.properties</li>
</ul>
</li>
<li>演示案例：我们的项目环境分为开发（dev）和生产（prod）环境，开发环境下端口为8082，生产环境下端口号为8888.<h4 id="properties文件演示案例"><a href="#properties文件演示案例" class="headerlink" title="properties文件演示案例"></a>properties文件演示案例</h4></li>
<li>创建两个文件<code>application-dev.properties</code>与<code>application-prod.properties</code><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/nDd@T7ffdDKQ.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/nDd@T7ffdDKQ.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/nDd@T7ffdDKQ.png"></a><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/bqDg2t51CoM1.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/bqDg2t51CoM1.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/bqDg2t51CoM1.png"></a></li>
<li>激活指定profile<ul>
<li>在主配置文件<code>application.properties</code>中指定<code>spring.profiles.active=dev</code><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Zren2xFY08IB.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/Zren2xFY08IB.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Zren2xFY08IB.png"></a></li>
<li>未指定哪个profile文件时，默认使用<code>application.properties</code>中的配置<h4 id="yml文件演示案例"><a href="#yml文件演示案例" class="headerlink" title="yml文件演示案例"></a>yml文件演示案例</h4></li>
</ul>
</li>
<li>在<code>application.yml</code>中配置<ul>
<li>yml支持多文档块方式<code>---</code><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8081</span> <span class="comment"># 默认端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line"><span class="attr">active:</span> <span class="string">prod</span> <span class="comment">#激活哪个profile , 当前激活的是 dev 开发环境</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#指定属于哪个环境, dev 环境时使用</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profiles:</span> <span class="string">prod</span> <span class="comment">#指定属于哪个环境, prod 环境时使用</span></span><br></pre></td></tr></table></figure>
<h4 id="多种方式激活指定profile"><a href="#多种方式激活指定profile" class="headerlink" title="多种方式激活指定profile"></a>多种方式激活指定profile</h4></li>
</ul>
</li>
<li>方式1：在主配置文件中指定<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application.properties</span></span><br><span class="line"><span class="string">spring.profiles.active=dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line"><span class="attr">active:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure></li>
<li>方式2：命令行参数指定<ul>
<li>可以直接在测试的时候，配置传入命令行参数<code>--spring.profiles.active=dev</code><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/YD0ih1duI7Jn.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/YD0ih1duI7Jn.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/YD0ih1duI7Jn.png"></a><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/CDxjwFpAHpwh.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/CDxjwFpAHpwh.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/CDxjwFpAHpwh.png"></a></li>
<li>打jar包运行<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot<span class="number">-02</span>-config<span class="number">-0.0</span><span class="number">.1</span>-SNAPSHOT.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure></li>
<li>虚拟机参数指定<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">-Dspring.profiles.active</span>=dev</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<h3 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h3><ul>
<li><p>SpringBoot启动时，会扫描以下位置的<code>application.properties</code>和<code>application.yml</code>文件作为Spring Boot的默认配置文件：</p>
<table>
<thead>
<tr>
<th align="center">配置文件位置</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>file:./config</code></td>
<td align="center">当前项目的config目录下（最高级别）</td>
</tr>
<tr>
<td align="center"><code>file:./</code></td>
<td align="center">当前项目的根目录下</td>
</tr>
<tr>
<td align="center"><code>classpath:/config</code></td>
<td align="center">类路径的config目录下</td>
</tr>
<tr>
<td align="center"><code>classpath:/</code></td>
<td align="center">类路径的跟目录下（最低级别）</td>
</tr>
</tbody></table>
</li>
<li><p>以上按照优先级从低到高的顺序，将所有位置的配置文件全部加载，高优先级的配置内容会覆盖低优先级的配置内容</p>
</li>
<li><p>注意：如果使用IDEA创建的项目是Module（如果是Project则忽略），当项目的根目录不是你这个项目所有目录（是Project所在目录），这样使用file：存放配置文件时会找不到配置<br>解决方式：更改工作路径直接为Module所有目录<code>$MODULE_DIR$</code><br>通过System.getProperty(“user.dir”)获取的时module的路径<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/dCrEfe66d91e.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/dCrEfe66d91e.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/dCrEfe66d91e.png"></a></p>
</li>
<li><p>配置文件能写什么？怎么写？<br>  <a href="https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener" title="百度">配置文件能配置的属性参照</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot日志配置</title>
    <url>/2020/09/27/SpringBoot%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Spring-Boot日志配置"><a href="#Spring-Boot日志配置" class="headerlink" title="Spring Boot日志配置"></a>Spring Boot日志配置</h2><ul>
<li>在市场上存在非常多的日志框架：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">日志抽象层</th>
<th align="center">日志实现</th>
</tr>
</thead>
<tbody><tr>
<td align="center">jboss-logging(不适合企业项目开发使用)<br />JCL（jakarta Commoms Logging）（2014年后不再维护）<br />SLF4j（Simple Logging Facade for java）（与log4j Logback同一个人开发）</td>
<td align="center">JUL(java.util.logging)（担心被抢市场，推出的）<br />Log4j（存在性能问题）<br />Logback（Log4j同一个人开发的新框架，做了重大升级）<br />Log4j2（apache开发的很强大，借了log4j的名，但当前很多框架未适配上）</td>
</tr>
</tbody></table>
<a id="more"></a>

<p>Spring Boot采用了slf4j+logback的组合形式，Spring Boot也提供了对UL、log4j2、Logback提供了默认配置</p>
<ul>
<li><p>Spring官网参考文档</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-logging" target="_blank" rel="noopener">Spring官网参考文档</a></p>
</li>
</ul>
<h3 id="默认日志配置"><a href="#默认日志配置" class="headerlink" title="默认日志配置"></a>默认日志配置</h3><ul>
<li><p>Spring Boot默认配置好了日志，只要启动Spring Boot项目就会在控制台输出日志信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot02LoggingApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//日志记录器</span></span><br><span class="line">	Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//1.下面自定义的都是日志级别，由低到高：trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">		<span class="comment">//2.spring boot默认设定的时info级别日志（也称root级别）</span></span><br><span class="line">		<span class="comment">//3.可以进行调整日志级别，设定某个级别后，就只打印设定的这个级别及后面高级别的日志信息</span></span><br><span class="line">		<span class="comment">// 没有指定级别的就用SpringBoot默认规定的级别：root级别</span></span><br><span class="line">		<span class="comment">//4.可修改指定包的日志级别：</span></span><br><span class="line">		<span class="comment">//  指定某个包下面的所有日志级别：logging.level.包名=级别名</span></span><br><span class="line">		<span class="comment">//跟踪运行信息</span></span><br><span class="line">		logger.trace(<span class="string">"这是trace日志信息"</span>);</span><br><span class="line">		<span class="comment">//调试信息</span></span><br><span class="line">		logger.debug(<span class="string">"这是debug日志信息"</span>);</span><br><span class="line">		<span class="comment">//自定义信息</span></span><br><span class="line">		logger.info(<span class="string">"这是info日志信息"</span>);</span><br><span class="line">		<span class="comment">//警告信息：如果运行结果是不预期的值，则可以进行警告</span></span><br><span class="line">		logger.warn(<span class="string">"这是warn日志信息"</span>);</span><br><span class="line">		<span class="comment">//错误信息：出现异常捕获时</span></span><br><span class="line">		logger.error(<span class="string">"这是error日志信息"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改日志默认级别</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调整日志级别： trace &lt; debug &lt; info &lt; warn &lt; error</span></span><br><span class="line"><span class="comment"># com.mengxuegu包下的级别</span></span><br><span class="line"><span class="string">logging.level.com.mengxuegu=trace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置root级别</span></span><br><span class="line"><span class="string">logging.level.root=debug</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="修改日志默认配置"><a href="#修改日志默认配置" class="headerlink" title="修改日志默认配置"></a>修改日志默认配置</h3><p><code>application.properties</code>中修改日志默认配置</p>
<h4 id="修改日志文件生成路径"><a href="#修改日志文件生成路径" class="headerlink" title="修改日志文件生成路径"></a>修改日志文件生成路径</h4><table>
<thead>
<tr>
<th><code>logging.file</code></th>
<th><code>logging.path</code></th>
<th>实例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>（none）</td>
<td>(none)</td>
<td></td>
<td>只在控制台输出</td>
</tr>
<tr>
<td>指定文件名</td>
<td>(none)</td>
<td>springboot.log</td>
<td>输出到当前项目根路径下的springboot.log文件中</td>
</tr>
<tr>
<td>(none)</td>
<td>指定目录</td>
<td>/springboot/log</td>
<td>输出到当前项目所在磁盘根路径下的/springboot/log目录中的spring.log文件中</td>
</tr>
<tr>
<td>指定文件名</td>
<td>指定目录</td>
<td></td>
<td>当两个同时指定时，采用的时logging.file指定。推荐使用<code>logging.file</code>设置即可，因为它可自定义文件名</td>
</tr>
</tbody></table>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#输出到当前项目根路径下的 springboot.log 文件中</span></span><br><span class="line"><span class="comment">#logging.file=springboot.log</span></span><br><span class="line"><span class="comment">#输出到当前项目所在磁盘根路径下的 /springboot/log目录中的 spring.log 文件中,</span></span><br><span class="line"><span class="string">logging.path=springboot/log</span></span><br></pre></td></tr></table></figure>

<h4 id="修改日志输出格式"><a href="#修改日志输出格式" class="headerlink" title="修改日志输出格式"></a>修改日志输出格式</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日志输出格式说明：</span></span><br><span class="line"><span class="comment"># %d 输出日期时间，</span></span><br><span class="line"><span class="comment"># %thread 输出当前线程名，</span></span><br><span class="line"><span class="comment"># %-5level 输出日志级别，左对齐5个字符宽度</span></span><br><span class="line"><span class="comment"># %logger&#123;50&#125; 输出全类名最长50个字符，超过按照句点分割</span></span><br><span class="line"><span class="comment"># %msg 日志信息</span></span><br><span class="line"><span class="comment"># %n 换行符</span></span><br><span class="line"><span class="comment"># 修改控制台输出的日志格式</span></span><br><span class="line"><span class="string">logging.pattern.console=%d&#123;yyyy-MM-dd&#125;</span> <span class="string">[%thread]</span> <span class="string">%-5level</span> <span class="string">%logger&#123;50&#125;</span> <span class="bullet">-</span> <span class="string">%msg%n</span></span><br><span class="line"><span class="comment"># 修改文件中输出的日志格式</span></span><br><span class="line"><span class="string">logging.pattern.file=%d&#123;yyyy-MM-dd</span> <span class="string">HH:mm:ss.SSS&#125;</span> <span class="string">&gt;&gt;&gt;</span> <span class="string">[%thread]</span> <span class="string">&gt;&gt;&gt;</span> <span class="string">%-5level</span> <span class="string">&gt;&gt;&gt;</span> <span class="string">%logger&#123;50&#125;</span> <span class="string">&gt;&gt;&gt;</span> <span class="string">%msg%n</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class="line"><span class="xml">scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class="line"><span class="xml">debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class="line"><span class="xml">--&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"false"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 定义日志的根目录 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/logs/log"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 定义日志文件名称 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"appName"</span> <span class="attr">value</span>=<span class="string">"mengxuegu-spring-boot"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">         日志输出格式说明：</span></span><br><span class="line"><span class="xml">                %d        输出日期时间</span></span><br><span class="line"><span class="xml">                %thread 输出当前线程名</span></span><br><span class="line"><span class="xml">                %-5level   输出日志级别，左对齐5个字符宽度</span></span><br><span class="line"><span class="xml">                %logger</span><span class="template-variable">&#123;50&#125;</span><span class="xml"> 输出全类名最长50个字符，超过按照句点分割</span></span><br><span class="line"><span class="xml">                %msg   日志信息</span></span><br><span class="line"><span class="xml">                %n     换行符</span></span><br><span class="line"><span class="xml">        --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"> - [%thread] - %-5level - %logger</span><span class="template-variable">&#123;50&#125;</span><span class="xml"> - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"appLogAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 指定日志文件的名称 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$</span><span class="template-variable">&#123;LOG_HOME&#125;</span><span class="xml">/$</span><span class="template-variable">&#123;appName&#125;</span><span class="xml">.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名</span></span><br><span class="line"><span class="xml">        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。</span></span><br><span class="line"><span class="xml">        --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">            滚动时产生的文件的存放位置及文件名称 %d</span><span class="template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml">：按天进行日志滚动 </span></span><br><span class="line"><span class="xml">            %i：当文件大小超过maxFileSize时，按照i进行文件滚动</span></span><br><span class="line"><span class="xml">            --&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$</span><span class="template-variable">&#123;LOG_HOME&#125;</span><span class="xml">/$</span><span class="template-variable">&#123;appName&#125;</span><span class="xml">-%d</span><span class="template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml">-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。</span></span><br><span class="line"><span class="xml">         假设设置每天滚动，且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。</span></span><br><span class="line"><span class="xml">         注意，删除旧文件是，那些为了归档而创建的目录也会被删除。</span></span><br><span class="line"><span class="xml">            --&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>365<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy</span></span><br><span class="line"><span class="xml">            --&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 日志输出格式： --&gt;</span>     </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"> [ %thread ] - [ %-5level ] [ %logger</span><span class="template-variable">&#123;50&#125;</span><span class="xml"> : %line ] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">      logger主要用于存放日志对象，也可以定义日志类型、级别</span></span><br><span class="line"><span class="xml">      name：表示匹配的logger类型前缀，也就是包的前半部分</span></span><br><span class="line"><span class="xml">      level：要记录的日志级别，包括 TRACE <span class="tag">&lt; <span class="attr">DEBUG</span> &lt; <span class="attr">INFO</span> &lt; <span class="attr">WARN</span> &lt; <span class="attr">ERROR</span></span></span></span><br><span class="line"><span class="xml">      additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，</span></span><br><span class="line"><span class="xml">      false：表示只用当前logger的appender-ref，true：</span></span><br><span class="line"><span class="xml">      表示当前logger的appender-ref和rootLogger的appender-ref都有效</span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- hibernate logger --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.mengxuegu"</span> <span class="attr">level</span>=<span class="string">"debug"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Spring framework logger --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，</span></span><br><span class="line"><span class="xml">    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。 </span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"appLogAppender"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="分析日志底层实现"><a href="#分析日志底层实现" class="headerlink" title="分析日志底层实现"></a>分析日志底层实现</h3><ul>
<li><p>在web项目当中引用了spring-boot-start-web依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">spring-boot-starter-web 中引入了 spring-boot-starter 启动器</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">spring-boot-starter 中引入了 spring-boot-starter-logging 日志启动器</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">spring-boot-starter-logging 日志启动器 采用的是 logback 日志框架</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>总结：SpringBoot中默认日志启动器为<code>spring-boot-start-logging</code>,默认采用的时<code>logback</code>日志框架</li>
</ul>
</li>
<li><p>在spring-boot-2.0.6.RELEASE.jar!\org\springframework\boot\logging\logback\base.xml 做了日志 的默认配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志格式默认规定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志文件默认生成路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--控制台日志信息默认配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文件中日志信息默认配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/file-appender.xml"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别默认为： info --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>日志文件采用方式为：滚动文件遍加器</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/EA*WXskX2@I^.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/EA*WXskX2@I%5E.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/EA*WXskX2@I^.png"></a></p>
</li>
<li><p>在下面类中会读取上面xml中配置的信息</p>
<p>spring-boot-2.0.6.RELEASE.jar!org.springframework.boot.logging.LoggingSystemProperties</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/TdxWQnL*Cf5J.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/TdxWQnL*Cf5J.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/TdxWQnL*Cf5J.png"></a></p>
</li>
<li><p>如果spring boot的日志功能无法满足我们的需求（比如异步日志记录等），我们可以自己定义日志的配置文件。</p>
</li>
</ul>
</li>
</ul>
<h3 id="自定义日志配置"><a href="#自定义日志配置" class="headerlink" title="自定义日志配置"></a>自定义日志配置</h3><h4 id="自定义Logback日志配置"><a href="#自定义Logback日志配置" class="headerlink" title="自定义Logback日志配置"></a>自定义Logback日志配置</h4><ul>
<li><p>在类路径下，存放对应日志框架的自定义文件即可；spring boot就不会使用它默认的日志配置文件了。</p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>自定义日志配置文件名</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><code>logback spring.xml</code>,<code>logback spring.groovy</code>,<code>logback.xml</code>,<code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j</td>
<td><code>log4j2-spring.xml</code>,<code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK(Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody></table>
</li>
<li><p>在<code>resources</code>目录下创建<code>logback.xml</code>,文件内容如下，Spring Boot就会采用以下日志配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class="line"><span class="comment">scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class="line"><span class="comment">debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"false"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志的根目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/logs/log"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志文件名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"appName"</span> <span class="attr">value</span>=<span class="string">"mengxuegu-spring-boot"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			日志输出格式说明：</span></span><br><span class="line"><span class="comment">				    %d 		输出日期时间</span></span><br><span class="line"><span class="comment">				    %thread 输出当前线程名</span></span><br><span class="line"><span class="comment">				    %-5level  	输出日志级别，左对齐5个字符宽度</span></span><br><span class="line"><span class="comment">				    %logger&#123;50&#125; 输出全类名最长50个字符，超过按照句点分割</span></span><br><span class="line"><span class="comment">				    %msg  	日志信息</span></span><br><span class="line"><span class="comment">				    %n    	换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; - [%thread] - %-5level - %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"appLogAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定日志文件的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;appName&#125;.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名</span></span><br><span class="line"><span class="comment">        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">				滚动时产生的文件的存放位置及文件名称 %d&#123;yyyy-MM-dd&#125;：按天进行日志滚动 </span></span><br><span class="line"><span class="comment">				%i：当文件大小超过maxFileSize时，按照i进行文件滚动</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;appName&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。</span></span><br><span class="line"><span class="comment">			假设设置每天滚动，且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。</span></span><br><span class="line"><span class="comment">			注意，删除旧文件是，那些为了归档而创建的目录也会被删除。</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>365<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出格式： --&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [ %thread ] - [ %-5level ] [ %logger&#123;50&#125; : %line ] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		logger主要用于存放日志对象，也可以定义日志类型、级别</span></span><br><span class="line"><span class="comment">		name：表示匹配的logger类型前缀，也就是包的前半部分</span></span><br><span class="line"><span class="comment">		level：要记录的日志级别，包括 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</span></span><br><span class="line"><span class="comment">		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，</span></span><br><span class="line"><span class="comment">		false：表示只用当前logger的appender-ref，true：</span></span><br><span class="line"><span class="comment">		表示当前logger的appender-ref和rootLogger的appender-ref都有效</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hibernate logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.mengxuegu"</span> <span class="attr">level</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring framework logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，</span></span><br><span class="line"><span class="comment">    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。 </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"appLogAppender"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>logback.xml</code>:是直接就被日志框架加载了</p>
<p><code>logback-spring.xml</code>:配置项不会被日志框架直接加载，而是由Spring Boot解析日志配置文件，进而可以使用SpringBoot的Profile特殊配置</p>
</li>
</ul>
<h4 id="使用Profile特殊配置"><a href="#使用Profile特殊配置" class="headerlink" title="使用Profile特殊配置"></a>使用Profile特殊配置</h4><ul>
<li><p>使用日志Profile特殊配置，可根据不同的环境激活不同的日志配置</p>
<ul>
<li><p>将自定义日志配置文件名<code>logback.xml</code>改为<code>logback-spring.xml</code></p>
</li>
<li><p>修改日志配置文件中第25行， 如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; === [%thread] === %-5level ==== %logger&#123;50&#125; -</span><br><span class="line">%msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; &gt;&gt;&gt; [%thread] &gt;&gt;&gt; %-5level &gt;&gt;&gt; %logger&#123;50&#125; -</span><br><span class="line">%msg%n<span class="tag">&lt;/<span class="name">pattern</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指定运行环境  在application.properties加入<code>spring.profiles.active=dev</code></p>
<p>如果使用<code>logback.xml</code>作为日志配置文件，还指定Profile特殊配置，则会有以下报错</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ERROR in ch.qos.logback.core.joran.spi.Interpreter@28:40 - no applicable action for [<span class="string">springProfile</span>], current ElementPath is [<span class="string">[configuration</span>][<span class="symbol">appender</span>][<span class="string">layout</span>][<span class="symbol">springProfile</span>]]</span><br><span class="line">at</span><br><span class="line">org.springframework.boot.logging.logback.LogbackLoggingSystem.loadConfiguration(LogbackLoggingSystem.java:169)</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a>切换日志框架</h3><ul>
<li>将SpringBoot默认的<code>logback</code>切换为<code>log4j2</code>日志框架， <a href="https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-logging" target="_blank" rel="noopener">参考链接</a></li>
</ul>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/0b05EcCIQE2N.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/0b05EcCIQE2N.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/0b05EcCIQE2N.png"></a></p>
<ul>
<li><p>在项目的pom.xml切换log4j2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">先排除 spring-boot-starter-logging 日志启动器</span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">再使用 log4j2 日志启动器</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot的Web开发(1)</title>
    <url>/2020/09/29/SpringBoot%E7%9A%84Web%E5%BC%80%E5%8F%91(1)/</url>
    <content><![CDATA[<ul>
<li><p>Web开发是项目实战中至关重要的一部分，Web开发的核心内容主要包括嵌入的Servlet容器和SpringMVC</p>
</li>
<li><p>Web开发官方文档：        <a href="https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-spring-mvc" target="_blank" rel="noopener">官方文档</a></p>
<a id="more"></a>

</li>
</ul>
<h3 id="Web开发支持"><a href="#Web开发支持" class="headerlink" title="Web开发支持"></a>Web开发支持</h3><ul>
<li><p>Spring  Boot为Web开发提供了<code>spring-boot-starter-web</code>启动器作为基本支持，为我们提供了嵌入的Tomcat以及Spring MVC的依赖支持。（参考：pom.xml）</p>
</li>
<li><p>也提供了很多不同场景的自动配置类，让我们只需要在配置文件中指定少量的配置即可启动项目。自动配置类存储在<code>spring-boot-autoconfigure.jar</code>的<code>org.springframework.book.autoconfigure</code>包下。</p>
<p><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/uev0U%5E9L*xjr.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/uev0U^9L*xjr.png"></p>
</li>
<li><p>自动配置场景SpringBoot帮我们配置了什么？是否修改？能修改哪些配置？是否可以拓展？…</p>
</li>
<li><p>自动配置类举例：</p>
<ul>
<li><p>文件名可以看出</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">xxxxAutoConfiguration :</span>向容器中添加自动配置组件</span><br><span class="line"><span class="string">xxxxProperties :</span>使用自动配置类 来封装配置文件内容</span><br></pre></td></tr></table></figure>
</li>
<li><p>SpringMVC配置 ：WebMvcAutoConfiguration和webMvcProperties</p>
<p><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/I@Qhvzupc1lS.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/I@Qhvzupc1lS.png"></p>
</li>
<li><p>内嵌Servlet容器 ：ServletWebServerFactoryAutoConfiguration和ServerProperties</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/4VXlrnJ4mMTb.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/4VXlrnJ4mMTb.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/4VXlrnJ4mMTb.png"></a></p>
</li>
<li><p>上传文件的属性 ：MultipartAutoConfiguration和MultiparProperties</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/F2jpq1Q0Dwav.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/F2jpq1Q0Dwav.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/F2jpq1Q0Dwav.png"></a></p>
</li>
<li><p>JDBC : DataSourceAutoConfiguration 和DataSourceProperties</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/0^!cJq4aF1JM.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/0%5E!cJq4aF1JM.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/0^!cJq4aF1JM.png"></a></p>
</li>
<li><p>等待……</p>
</li>
</ul>
<h3 id="静态资源的映射规则"><a href="#静态资源的映射规则" class="headerlink" title="静态资源的映射规则"></a>静态资源的映射规则</h3><ul>
<li>对静态资源的映射规则，可通过分析WebMvcAutoConfiguration自动配置类得到</li>
</ul>
<h4 id="webjars资源映射"><a href="#webjars资源映射" class="headerlink" title="webjars资源映射"></a>webjars资源映射</h4><ul>
<li><p>在 WebMvcAuotConfiguration.addResourceHandlers() 分析webjars 资源映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">               logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">               CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">               <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">         </span><br><span class="line"><span class="comment">//收到 /webjars/**请求后 ，会去classpath:/META-INF/resources/webjars/ 查找资源文件</span></span><br><span class="line">                  <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">               &#125;</span><br><span class="line">    </span><br><span class="line">               String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">               <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">               &#125;</span><br><span class="line">    </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>1.所有<code>/webjars/**</code>请求，都会去<code>classpath:/META-INF/resources/webjars/</code>目录找对应资源文件</p>
<p>2.webjars ：以jar包的方式引入静态资源</p>
<p>​         webjars官网 ：<a href="https://www.webjars.org/" target="_blank" rel="noopener">https://www.webjars.org/</a></p>
<p>3.在官网打开资源文件的依赖配置信息，然后粘贴到pom.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入 jquery webjars--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.访问localhost:8080/web.jars/jquery/3.5.5/jquery.js会在下面路径中查找</p>
<p><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/GnEhl62x!5lu.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/GnEhl62x!5lu.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/GnEhl62x!5lu.png"></a></p>
</li>
</ul>
<h4 id="其他静态资源映射"><a href="#其他静态资源映射" class="headerlink" title="其他静态资源映射"></a>其他静态资源映射</h4><ul>
<li><p>在WebMvcAutoConfiguration.addResourceHandlers()分析 访问其他资源映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">                CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line">				<span class="comment">//接收 /**</span></span><br><span class="line">                String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>staticPathPattern处理其他访问的静态路径，从WebMVCProperties构造器中获取到/**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.localeResolver = WebMvcProperties.LocaleResolver.ACCEPT_HEADER;</span><br><span class="line">       <span class="keyword">this</span>.format = <span class="keyword">new</span> WebMvcProperties.Format();</span><br><span class="line">       <span class="keyword">this</span>.dispatchTraceRequest = <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">this</span>.dispatchOptionsRequest = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">this</span>.ignoreDefaultModelOnRedirect = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">this</span>.publishRequestHandledEvents = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">this</span>.throwExceptionIfNoHandlerFound = <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">this</span>.logResolvedException = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 接收 /**请求</span></span><br><span class="line">       <span class="keyword">this</span>.staticPathPattern = <span class="string">"/**"</span>;</span><br><span class="line">       <span class="keyword">this</span>.async = <span class="keyword">new</span> WebMvcProperties.Async();</span><br><span class="line">       <span class="keyword">this</span>.servlet = <span class="keyword">new</span> WebMvcProperties.Servlet();</span><br><span class="line">       <span class="keyword">this</span>.view = <span class="keyword">new</span> WebMvcProperties.View();</span><br><span class="line">       <span class="keyword">this</span>.contentnegotiation = <span class="keyword">new</span> WebMvcProperties.Contentnegotiation();</span><br><span class="line">       <span class="keyword">this</span>.pathmatch = <span class="keyword">new</span> WebMvcProperties.Pathmatch();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ResourceProperties根据请求查找资源文件，从以下四个路径中查找（静态资源目录）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.resources"</span>,</span><br><span class="line">    ignoreUnknownFields = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/"</span>, <span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> String[] staticLocations;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> addMappings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties.Chain chain;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties.Cache cache;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/resources/"</span>, </span><br><span class="line"><span class="string">"classpath:/static/"</span>, </span><br><span class="line"><span class="string">"classpath:/public/"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>总结</p>
<ul>
<li><p>当接收到<code>/**</code>请求访问资源时，会被映射到下面4个类路径下的静态资源目录中查找</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">classpath:</span>/META-INF<span class="meta-keyword">/resources/</span></span><br><span class="line"><span class="symbol">classpath:</span><span class="meta-keyword">/resources/</span></span><br><span class="line"><span class="symbol">classpath:</span><span class="meta-keyword">/static/</span></span><br><span class="line"><span class="symbol">classpath:</span><span class="meta-keyword">/public/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问localhost:8080/style.css会在上面四个路径中查找文件</p>
</li>
</ul>
</li>
</ul>
<h4 id="欢迎页映射"><a href="#欢迎页映射" class="headerlink" title="欢迎页映射"></a>欢迎页映射</h4><ul>
<li><p>在 WebMvcAuotConfiguration.welcomePageHandlerMapping() 分析 欢迎页映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">            WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(<span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, </span><br><span class="line"> <span class="comment">//=====查找欢迎页  =====</span></span><br><span class="line">                                                                                                <span class="keyword">this</span>.getWelcomePage(), <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">           ....</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>getWelcomePage() 方法获取 欢迎页面 可存储路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            String[] locations =</span><br><span class="line">                <span class="comment">//2.上面说的4个静态资源路径加上"/"路径</span></span><br><span class="line">                WebMvcAutoConfiguration.getResourceLocations(</span><br><span class="line">                <span class="comment">//1.获取上面说的4个静态资源路径</span></span><br><span class="line">                <span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">    		<span class="comment">//在上面路径下查找index.html页面</span></span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).</span><br><span class="line">                filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//上面获取的路径中查找index.html页面</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">"index.html"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>分析后，会从4个静态资源目录+根路径<code>/</code>中 查找index.html页面</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">classpath:/META-INF/resources/</span><br><span class="line">classpath:/resources/</span><br><span class="line">classpath:/<span class="keyword">static</span>/</span><br><span class="line">classpath:/<span class="keyword">public</span>/</span><br><span class="line">/: 当前项目根路径下</span><br></pre></td></tr></table></figure>
</li>
<li><p>会在静态资源目录下与根路径查找（按该顺序）index.html页面；收到”/**”请求映射</p>
</li>
<li><p>访问localhost:8080/会在上面5个目录中查找index.html页面（因为/页属于/**）</p>
</li>
</ul>
<h4 id="图标映射"><a href="#图标映射" class="headerlink" title="图标映射"></a>图标映射</h4><ul>
<li><p>Spring Boot 会在静态资源目录下 与 根路径(按该顺序) 查找 faicon.ico 页面； 如果存在这样的文件，Spring Boot 会自动将其设置为应用图标。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">classpath:/META-INF/resources/</span><br><span class="line">classpath:/resources/</span><br><span class="line">classpath:/<span class="keyword">static</span>/</span><br><span class="line">classpath:/<span class="keyword">public</span>/</span><br><span class="line">/: 当前项目根路径下</span><br></pre></td></tr></table></figure>

































</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>springboot入门到项目实践2</title>
    <url>/2020/09/19/springboot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B52/</url>
    <content><![CDATA[<h2 id="Sprng-Boot项目底层原理"><a href="#Sprng-Boot项目底层原理" class="headerlink" title="Sprng Boot项目底层原理"></a>Sprng Boot项目底层原理</h2><h3 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h3><a id="more"></a>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--当前hello项目的 父级依赖--&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.06.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>spring-boot-starter-parent</code>是当前项目的父级依赖<ol>
<li><code>spring-boot-starter</code>:Spring Boot场景启动器，Spring Boot将所有的功能场景抽取出来，做成一个个starter（启动器），只需项目里引入相关场景的starter，就会将它所有依赖导入进来。要用什么功能就导入什么场景的启动器。（各种启动器可参见官方文档starter）</li>
<li><code>spring-boot-starter-parent</code>:它父依赖<code>spring-boot-dependencies</code>,参见下面：<figure class="highlight"><table><tr><td class="code"><pre><span class="line"> &lt;!--spring-boot-starter-parent 的 父级依赖--&gt;</span><br><span class="line"> &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>spring-boot-dependencies</code>是管理了Spring Boot项目中的所有依赖版本<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/2tXn1rQ0!r1w.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/2tXn1rQ0!r1w.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/2tXn1rQ0!r1w.png"></a></li>
<li>以后我们导入依赖默认不需要写版本号，也就是可以省去<code>version</code>标签。（当前没有在dependencies中管理的依赖自然需要声明版本号）</li>
</ol>
</li>
</ol>
</li>
<li>spring-boot-starter-web  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>依赖导入了Web项目运行所需要的组件；如Tomcat/SpringMVC等</li>
</ol>
</li>
</ul>
<h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mengxuegu;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  *  @SpringBootApplication 用于标识一个引导类,说明当前是Spring Boot项目</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMailAppliation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         SpringApplication.run(HelloMailAppliation<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>通常有一个名为*Application的入口类，里面定义一个main方法，使用<code>SpringApplication.run(HelloMailAppliation.class, args);</code>来启动SpringBoot应用项目</p>
</li>
<li><p>@SpringBootApplication注解说明：</p>
<ul>
<li>标注在某个类上，说明这个类是spring boot的引导类，spring boot就应该运行这个类的main方法来启动SpringBoot应用；</li>
<li>@SpringBootApplication是以下三个注解的总和：<ol>
<li><code>@SpringBootConfiguration</code>:用于定义一个Spring Boot的配置类（配置类等同配置文件）<ul>
<li>引用了@Configuration注解，是Spring底层的一个注解，用于定义Spring的配置类。</li>
<li>配置类也是容器中的一个组件 @Component</li>
</ul>
</li>
<li><code>EnableAutoConfiguration</code>:<ul>
<li>告诉Spring Boot开启自动配置功能，这样Spring Boot会自动根据你导入的依赖jar包来自动配置项目。</li>
<li>@AutoConfigurationPackage–》@Import({Registrar.class})<ul>
<li>会将引导类(@SpringBootApplication标注的类)所在的包及下面所有子包里面的所有组件扫描到Spring容器;</li>
</ul>
</li>
<li>@Import({AutoConfigurationImportSelector,class})<ul>
<li>将所有需要导入的组件以全类名的方式返回;这些组件就会被添加到容器中</li>
<li>会给容器导入非常多的自动配置类(xxxxAutoConfiguration),就是导入并配置好当前项目中所需的组件，省去我们手动编写配置去注入组件。</li>
</ul>
</li>
<li>Spring Boot在启动的时候从(spring-boot-autoconfigure-2.0.6.RELEASE.jar)类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作； 以前我们需要自己配置的文件，自动配置类都帮我们完成了；</li>
</ul>
</li>
<li><code>@ComponentScan</code>:该注解标识的类会被Spring自动扫描并且装入bean容器。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="使用Spring初始化器创建Spring-Boot项目"><a href="#使用Spring初始化器创建Spring-Boot项目" class="headerlink" title="使用Spring初始化器创建Spring Boot项目"></a>使用Spring初始化器创建Spring Boot项目</h2><ul>
<li><p>注：初始化向导需要联网创建Spring Boot项目<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/AG!vhJr4lkR*.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/AG!vhJr4lkR*.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/AG!vhJr4lkR*.png"></a><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/ifwDvvi7gYn8.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/ifwDvvi7gYn8.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/ifwDvvi7gYn8.png"></a></p>
</li>
<li><p>引入功能模块<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/DbBbA2DRw*9i.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/DbBbA2DRw*9i.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/DbBbA2DRw*9i.png"></a></p>
</li>
<li><p>默认生成的Spring Boot项目：<br>  <a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/7FrynvD3FXSf.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/7FrynvD3FXSf.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/7FrynvD3FXSf.png"></a></p>
<ul>
<li>删除不需要的文件与目录，<code>spring-boot-starter-test</code>是Spring Boot单元测试模块</li>
</ul>
</li>
<li><p>引导类已经生成了，我们只需要实现业务即可<br>  <a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Zj7TyXMvIX^6.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/Zj7TyXMvIX%5E6.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/Zj7TyXMvIX^6.png"></a></p>
</li>
<li><p><code>resources</code>文件夹中目录结构</p>
<ul>
<li><code>static</code>:保存所有静态资源文件，js css images</li>
<li><code>templates</code>:保存所有的模板页面（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面），可以使用模块引擎（freemarker、thymeleaf）</li>
<li><code>application.properties</code>:Spring Boot应用的配置文件，可以修改一些默认配置如修改默认端口<code>server.prot=8081</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Hexo和Github搭建博客</title>
    <url>/2020/04/30/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  每个人心中都有一个属于自己的博客，因为疫情在家无聊就想着来做一个自己的博客，于是在网上遍寻教程，经过n次失败，终于搭建成功！<br>  我用来搭建的工具是Hexo，是一个基于node.js的静态博客框架，生产静态网页托管在GitHub上(学生嘛  家境贫寒 )。</p>
<a id="more"></a>



<h2 id="windows平台步骤"><a href="#windows平台步骤" class="headerlink" title="windows平台步骤"></a>windows平台步骤</h2><ol>
<li><strong>你需要一台可以上网的电脑</strong></li>
<li><strong>安装Git</strong> </li>
<li><strong>安装Node.Js</strong> </li>
<li><strong>安装Hexo</strong> </li>
<li><strong>注册GitHub账号，并创建项目</strong></li>
<li><strong>生成SSH并添加到GitHub</strong></li>
<li><strong>上传到GitHub</strong></li>
</ol>
<h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h2><p>到Git官网下载，网站地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p>
<p>安装步骤：双击下载好的exe文件，一路next就好了<br>如果想知道具体步骤请<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html" target="_blank" rel="noopener">移步</a></p>
<p>安装好后，打开gitbash，查看版本：    命令<kbd>git version</kbd><br>             <img src="https://img-blog.csdnimg.cn/20200429181755676.png#pic_center" alt="在这里插入图片描述"><br>如果返回了版本号，那就说明git安装成功了。</p>
<h2 id="2-安装Node-Js"><a href="#2-安装Node-Js" class="headerlink" title="2.安装Node.Js"></a>2.安装Node.Js</h2><p>到Node.Js官网下载，网址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br>安装步骤与git一致，打开gitbash，查看版本：    命令<kbd>node -v</kbd><br><img src="https://img-blog.csdnimg.cn/20200429183634197.png#pic_center" alt="在这里插入图片描述"><br><strong>与git不同的是安装完后要配置一下</strong><br>NodeJS和NPM安装好了以后并不能直接使用，默认情况下，NPM安装的模块并不会安装到NodeJS的程序目录，比如我们安装的时候设置的D盘，“D:\Program Files\nodejs”，而我们使用npm安装一个cluster模块他会出现在C盘默认的路径下面，所以，如果我们不修改npm的模块安装目录，那么它默认情况下都会安装到这里，随着你测试开发各种不同的项目，安装的模块越来越多，这个文件夹的体积就会越来越大，直到占满你的C盘。所以我们要修改npm的配置。</p>
<ol>
<li>在nodejs文件夹下，创建两个为文件夹： <strong>node_global   和 node_cecal</strong></li>
<li>使用下面命令将npm的全局模块目录和缓存目录配置到我们刚才创建的那两个目录<br><strong>npm config set prefix “node_global文件的路径”<br>npm config set cache “node_cache的文件路径”</strong><br>例如：npm config set prefix “D:\Program Files\nodejs\node_global”</li>
<li>高级系统设置——环境变量<br>新增系统变量：<br>变量名填：NODE_PATH<br>变量值填：（文件路径）<br><img src="https://img-blog.csdnimg.cn/20200429184305532.png#pic_center" alt="在这里插入图片描述"><br>还需要在Path变量名中修改nodejs文件默认路径<br><img src="https://img-blog.csdnimg.cn/20200429184634355.png#pic_center" alt="在这里插入图片描述"><br>修改完成后测试：<br>输入命令：node 回车——再输入 require(‘cluster’)<br><img src="https://img-blog.csdnimg.cn/20200429184809318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4MjE4ODk=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>出现以上内容说明配置完成<h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h2>首先安装国内淘宝镜像源<kbd>npm install -g cnpm --registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></kbd><br>等待安装完成后就可以用<em>cnpm</em>来安装hexo博客了<br>命令：<kbd>cnpm install -g hexo-cli</kbd><br>安装完成后用<kbd>hexo -v</kbd>来验证一下<br><img src="https://img-blog.csdnimg.cn/20200429190627868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4MjE4ODk=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后创建一个你用来存放博客的文件夹，cd到该目录下,初始化命令<kbd>hexo init</kbd>初始化完成后会在该文件夹下看到以下文件：<br><img src="https://img-blog.csdnimg.cn/20200429191123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4MjE4ODk=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这就安装完成了  输入<kbd>hexo s</kbd>就可以实现本地访问了  <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><h2 id="4-注册GitHub账户-并创建项目"><a href="#4-注册GitHub账户-并创建项目" class="headerlink" title="4.注册GitHub账户 并创建项目"></a>4.注册GitHub账户 并创建项目</h2>创建一个GitHub账号，创建一个repo，名称为<kbd>yourname.github.io</kbd>,其中yourname是你的github名称，如下：<br><img src="https://img-blog.csdnimg.cn/20200429191447405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4MjE4ODk=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200429192035385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4MjE4ODk=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
</ol>
<h2 id="5-生成SSH并添加到GitHub"><a href="#5-生成SSH并添加到GitHub" class="headerlink" title="5.生成SSH并添加到GitHub"></a>5.生成SSH并添加到GitHub</h2><p>回到gitbash中.在gitbash中输入：<kbd>ssh-keygen -t rsa -C "你注册GitHub的邮箱”</kbd>，生产SSH，然后在C盘用户目录下找到 <strong>.ssh</strong>文件夹 ，用记事本打开<strong>id_rsa.pub</strong>将上面获取的ssh放到github中：<img src="https://img-blog.csdnimg.cn/20200429192947175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4MjE4ODk=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>添加一个 <strong>New SSH key</strong> ，title随便取，key就填刚刚那一段。<br>在gitbash中验证是否添加成功：<kbd>ssh -T <a href="mailto:git@github.com">git@github.com</a></kbd></p>
<p>用编辑器打开你的blog项目，修改 <strong>_config.yml</strong> 文件的一些配置(冒号之后都是有一个半角空格的)<br><kbd>deploy:<br>  type: git<br>  repo: <a href="mailto:git@github.com">git@github.com</a>:yourname/yourname.github.io.git(这个地方填你新建GitHub项目的ssh地址)<br>  branch: master</kbd><br>回到gitbash中，进入你的blog目录，分别执行以下命令：<br><kbd>hexo clean<br>hexo generate<br>hexo serverr</kbd></p>
<h2 id="6-上传到GitHub"><a href="#6-上传到GitHub" class="headerlink" title="6.上传到GitHub"></a>6.上传到GitHub</h2><p>先安装一波：<kbd>cnpm install hexo-deployer-git --save</kbd>（这样才能将你写好的文章部署到github服务器上并让别人浏览到）<br>执行命令(建议每次都按照如下步骤部署)：<br><kbd>hexo clean<br>         hexo generate<br>         hexo deploy                 </kbd><br>         注意deploy的过程中要输入你的username及email 。按他给的格式执行后，再次执行上次命令。<br>         在浏览器中输入<kbd><a href="http://yourgithubname.github.io" target="_blank" rel="noopener">http://yourgithubname.github.io</a></kbd>就可以看到你的个人博客了。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p> 以上是我折腾了两天才尝试出来的，如果有错请大佬提醒。主题我还在继续研究，等我弄好了再来发表安装主题的教程。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>npm</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实战_账单管理系统(一)</title>
    <url>/2020/10/08/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98_%E8%B4%A6%E5%8D%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><h4 id="创建并引入项目资源文件"><a href="#创建并引入项目资源文件" class="headerlink" title="创建并引入项目资源文件"></a>创建并引入项目资源文件</h4>]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot入门到项目实践1</title>
    <url>/2020/09/16/springboot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B51/</url>
    <content><![CDATA[<h2 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><a id="more"></a>
<ul>
<li>jdk1.8</li>
<li>Maven3.x</li>
<li>IntelliJ IDEA</li>
<li>Spring Boot</li>
</ul>
<h3 id="修改maven配置文件"><a href="#修改maven配置文件" class="headerlink" title="修改maven配置文件"></a>修改maven配置文件</h3><ul>
<li>在maven目录conf文件夹下settings.xml配置文件添加如下内容<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开始处更改下载依赖的存放路径， 以下目录需要已经创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\javasource\maven-repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在 mirrors 标签下 添加阿里云maven私服库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 profiles 标签下指定jdk版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="IntelliJ-IDEA设置"><a href="#IntelliJ-IDEA设置" class="headerlink" title="IntelliJ IDEA设置"></a>IntelliJ IDEA设置</h3></li>
<li>添加maven环境<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/R8CXuSw^LYMD.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/R8CXuSw%5ELYMD.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/R8CXuSw^LYMD.png"></a></li>
</ul>
<h3 id="快速构建Spring-Boot项目"><a href="#快速构建Spring-Boot项目" class="headerlink" title="快速构建Spring Boot项目"></a>快速构建Spring Boot项目</h3><ul>
<li>需求：浏览器发送/hello请求，服务器接收请求并处理，响应Hello World 字符串</li>
<li>分析：构建Spring Boot项目，事实上建立的就是一个Maven项目<h4 id="创建Mven工程"><a href="#创建Mven工程" class="headerlink" title="创建Mven工程"></a>创建Mven工程</h4></li>
<li>在IDEA上新建一个空的jar类型的maven工程<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/G6aE4BbSG7D7.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/G6aE4BbSG7D7.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/G6aE4BbSG7D7.png"></a><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/4!qwhzJzP0N@.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/4!qwhzJzP0N@.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/4!qwhzJzP0N@.png"></a><h4 id="修改pom-xml文件"><a href="#修改pom-xml文件" class="headerlink" title="修改pom.xml文件"></a>修改pom.xml文件</h4></li>
<li>在pom.xml中添加spring boot相关的父级依赖，<code>spring-boot-starter-parent</code>是一个特殊的starter，它提供了项目相关的默认依赖，使用它之后，常用的包依赖可以省去<code>version</code>标签</li>
<li>在<code>dependencies</code>添加构建web项目相关的依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>等待下载结束，会发现工程自动添加了很多jar包，这些jar包正是开发时需要导入的jar包<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/vO9GaAxoAFGz.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/vO9GaAxoAFGz.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/vO9GaAxoAFGz.png"></a></li>
</ul>
<h4 id="创建控制器Controller"><a href="#创建控制器Controller" class="headerlink" title="创建控制器Controller"></a>创建控制器Controller</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bdu.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"helloWorld..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建一个引导类"><a href="#创建一个引导类" class="headerlink" title="创建一个引导类"></a>创建一个引导类</h4><ul>
<li>主要作用是作为启动spring boot项目的入口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bdu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMailAppliation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(HelloMailAppliation<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4></li>
<li>运行引导类后，会出现如下一个标识<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/hzMzsOHXh4Wt.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/hzMzsOHXh4Wt.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/hzMzsOHXh4Wt.png"></a></li>
<li>在浏览器地址输入 <code>localhost:8080/hello</code>即可看到运行结果<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/UMNmNhJs7Yz7.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/UMNmNhJs7Yz7.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/UMNmNhJs7Yz7.png"></a><h3 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h3></li>
<li>在pom.xml添加如下插件后，将这个工程打成jar包后，可直接通过<code>java -jar</code>的命令运行<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--可以将当前项目打包成一个jar包进行运行--&gt;</span><br><span class="line">   &lt;build&gt;</span><br><span class="line">       &lt;plugins&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br><span class="line">       &lt;/plugins&gt;</span><br><span class="line">   &lt;/build&gt;</span><br></pre></td></tr></table></figure></li>
<li>如下操作进行打成jar包，从控制台可发现打成jar包所在目录<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/A1Y0bvwEGg54.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/A1Y0bvwEGg54.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/A1Y0bvwEGg54.png"></a></li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot入门到项目实践4</title>
    <url>/2020/09/24/springboot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B54/</url>
    <content><![CDATA[<h3 id="比较-Value和-ConfigurationProperties获取值"><a href="#比较-Value和-ConfigurationProperties获取值" class="headerlink" title="比较@Value和@ConfigurationProperties获取值"></a>比较<code>@Value</code>和<code>@ConfigurationProperties</code>获取值</h3><a id="more"></a>
<ul>
<li><p>使用<code>@Value</code>获取值，把Emp类中的<code>@ConfigurationProperties</code>注释掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@ConfigurationProperties(prefix="emp")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Value</span> 类似于Spring中的xml配置文件中的数据注入方式：</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Emp"&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;property name="lastName" value="字面量/#&#123;SpEL&#125;  Spring表达式/$&#123;key&#125;从配置文件取值"&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;emp.last-name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;10*2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"8000"</span>)</span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Forte forte;</span><br></pre></td></tr></table></figure></li>
<li><p>运行结果如下<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/QiW1GDIka9Xb.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/QiW1GDIka9Xb.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/QiW1GDIka9Xb.png"></a></p>
</li>
<li><p>总结@Value与@ConfigurationProperties 获取值的差异</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">@ConfigurationProperties</th>
<th align="center">@Value</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">实现功能</td>
<td align="center">批量注入配置文件的属性值</td>
<td align="center">一个一个指定</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">松散绑定(松散语法)</td>
<td align="center">支持</td>
<td align="center">不支持</td>
<td align="center">last-name == lastName<br />last_name == lastName</td>
</tr>
<tr>
<td align="center">SpEL</td>
<td align="center">不支持</td>
<td align="center">支持</td>
<td align="center">#{10*2}</td>
</tr>
<tr>
<td align="center">复杂类型封装</td>
<td align="center">支持</td>
<td align="center">不支持</td>
<td align="center">${emp.map}</td>
</tr>
<tr>
<td align="center">JSR303数据校验</td>
<td align="center">支持</td>
<td align="center">不支持</td>
<td align="center">如下</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="JSR300数据校验-配置文件注入的值"><a href="#JSR300数据校验-配置文件注入的值" class="headerlink" title="JSR300数据校验_配置文件注入的值"></a>JSR300数据校验_配置文件注入的值</h3><ul>
<li>校验是否为合法邮箱：<ul>
<li>取消<code>@ConfigurationProperties(prefix=&quot;emp&quot;)</code>前面的注释</li>
<li>在Emp类上添加<code>@Validated</code>数据校验注解</li>
<li>在lastName属性上添加<code>@Email</code>注解</li>
<li>验证<code>@ConfigurationPorperties</code>会进行校验，而<code>@Value</code>不会进行校验值<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"emp"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Value</span> 类似于Spring中的xml配置文件中的数据注入方式：</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Emp"&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;property name="lastName" value="字面量/#&#123;SpEL&#125;  Spring表达式/$&#123;key&#125;从配置文件取值"&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Value("$&#123;emp.last-name&#125;</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="comment">//    @Value("#&#123;10*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="comment">//    @Value("8000")</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Forte forte;</span><br><span class="line"></span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="comment">//输入@Email时报错 在pom文件中导入</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>总结 使用场景：<ul>
<li>如果只是在某个业务逻辑中需要获取配置文件中的某个属性值，就用<code>@Value</code> <ul>
<li>在spring boot路径下新建<code>controller.EmpController</code>类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;emp.last-name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/say"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行启动类在浏览器访问<code>http://localhost:8081/say</code><br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/5lFp*aG^bgqj.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/5lFp*aG%5Ebgqj.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/5lFp*aG^bgqj.png"></a></li>
</ul>
</li>
<li>如果专门使用javaBean和配置文件进行映射，就使用<code>@ConfigurationProperties</code></li>
</ul>
</li>
</ul>
<h3 id="加载指定配置文件"><a href="#加载指定配置文件" class="headerlink" title="加载指定配置文件"></a>加载指定配置文件</h3><h4 id="PropertySource加载局部配置文件"><a href="#PropertySource加载局部配置文件" class="headerlink" title="@PropertySource加载局部配置文件"></a><code>@PropertySource</code>加载局部配置文件</h4><p><code>@ConfigurationProperties</code>默认从全局配置文件（application.properties/application.yml）中获取值，所有配置数据写在全局配置文件中，显得太臃肿了，可将它们抽取出来放到其他局部配置文件中。</p>
<ul>
<li><p><code>@PropertySource</code>:用于加载局部配置文件</p>
<ul>
<li><p>1.将全局配置文件中的emp相关配置抽取到 resources/<code>emp.properties</code>文件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">emp.last-name=李四</span><br><span class="line">emp.age=<span class="number">30</span></span><br><span class="line">emp.birthday=<span class="number">1989</span>/<span class="number">9</span>/<span class="number">12</span></span><br><span class="line">emp.boss=<span class="keyword">false</span></span><br><span class="line">emp.salary=<span class="number">230000</span></span><br><span class="line">emp.map.key1=value1</span><br><span class="line">emp.map.key2=value2</span><br><span class="line">emp.list=one,two,three</span><br><span class="line">emp.forte.name=python</span><br><span class="line">emp.forte.time=<span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>2.<code>@PropertySource</code>:加载指定的配置文件；value属性是数组类型，用于指定文件位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:emp.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"emp"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 类似于 Spring 中的 xml 配制文件中的数据注入方式：</span></span><br><span class="line"><span class="comment">* &lt;bean class="Emp"&gt;</span></span><br><span class="line"><span class="comment">* &lt;property name="name" value="普通数据类型/ #&#123;SpEL&#125;Spring表达式/ $&#123;key&#125;从配制文件取值"&gt;</span></span><br><span class="line"><span class="comment">* &lt;/property&gt;</span></span><br><span class="line"><span class="comment">* &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// @Value("$&#123;emp.last-name&#125;")</span></span><br><span class="line"><span class="comment">//@Email</span></span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="comment">// @Value("#&#123;10*2&#125;")</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="comment">// @Value("8000")</span></span><br><span class="line"><span class="keyword">private</span> Double salary;</span><br><span class="line"><span class="keyword">private</span> Boolean boss;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="keyword">private</span> Map map;</span><br><span class="line"><span class="keyword">private</span> List list;</span><br><span class="line"><span class="comment">//特长</span></span><br><span class="line"><span class="keyword">private</span> Forte forte;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="ImportResource使用xml配置"><a href="#ImportResource使用xml配置" class="headerlink" title="@ImportResource使用xml配置"></a><code>@ImportResource</code>使用xml配置</h4><ul>
<li>SpringBoot提倡零配置，即无xml配置，但是在实际开发中可能有一些特殊要求必须使用xml配置；这时我们可以通过Spring提供的<code>@ImportResource</code>来加载xml配置文件。<br /></li>
<li><code>@ImportResource</code>:加载Spring的xml配置文件内容加载到容器使用<ul>
<li>创建业务类：<code>com.bdu.springbooot.service.EmpService</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"add()......."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建resources/spring01.xml文件，添加一下内容<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"empService"</span> <span class="attr">class</span>=<span class="string">"com.bdu.springboot.service.EmpService"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>将Spring的配置文件加载到容器中，使用<code>@ImportRescource</code>标注在一个配置类上，下面是主配置类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:spring01.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01HelloInitApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot01HelloInitApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>单元测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01HelloInitApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext context;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testXml</span><span class="params">()</span></span>&#123;</span><br><span class="line">        EmpService empService = (EmpService) context.getBean(<span class="string">"empService"</span>);</span><br><span class="line">        System.out.println(empService);</span><br><span class="line">        empService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Emp emp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>结果<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/oXQMKe7!MWce.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/oXQMKe7!MWce.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/oXQMKe7!MWce.png"></a></li>
</ul>
</li>
</ul>
<h4 id="自定义配置类向容器注入组件"><a href="#自定义配置类向容器注入组件" class="headerlink" title="自定义配置类向容器注入组件"></a>自定义配置类向容器注入组件</h4><ul>
<li>Spring Boot推荐使用注解的方式向容器中注入组件，操作如下：<ul>
<li>创建配置类<code>springboot.config.EmpConfig</code></li>
<li>使用<code>@Configuration</code>配置类，来表示对应Spring配置文件</li>
<li>使用<code>@Bean</code>向容器中注入组件对象</li>
<li>把上面<code>@importResource</code>注解注释掉测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Qi</span></span><br><span class="line"><span class="comment">* <span class="doctag">@data</span> 2020/9/25 23:16</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Configuration</span> 他是spring里的注解，用于标识当前类是一个配置类，来表示对应spring配置文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1.返回值就是注入容器的组件对象</span></span><br><span class="line"><span class="comment">    * 2.方法名就是这个组件的id值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Bean</span> 标识的方法用于向容器中注入组件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmpService <span class="title">empService2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"EmpService组件注入成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmpService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>再次测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01HelloInitApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext context;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testXml</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        EmpService empService = (EmpService) context.getBean("empService");</span></span><br><span class="line"><span class="comment">//        System.out.println(empService);</span></span><br><span class="line"><span class="comment">//        empService.add();</span></span><br><span class="line">        EmpService empService2 = (EmpService) context.getBean(<span class="string">"empService2"</span>);</span><br><span class="line">     System.out.println(<span class="string">"empService2"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot入门到项目实践3</title>
    <url>/2020/09/20/springboot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B53/</url>
    <content><![CDATA[<h2 id="Spring-Boot核心配置"><a href="#Spring-Boot核心配置" class="headerlink" title="Spring Boot核心配置"></a>Spring Boot核心配置</h2><h3 id="Spring-Boot的配置文件"><a href="#Spring-Boot的配置文件" class="headerlink" title="Spring Boot的配置文件"></a>Spring Boot的配置文件</h3><a id="more"></a>
<ul>
<li>Spring Boot使用一个全局配置文件，放置在<code>src/main/resources</code>目录或类路径的<code>/config</code>下<ul>
<li><code>application.properties</code></li>
<li><code>application.yml</code></li>
</ul>
</li>
<li>配置文件的作用：修改Spring Boot自动配置的默认值</li>
<li>yml是YAML(YAML Ain’t Markup Language)不是一个标记语言<ul>
<li>标记语言：以前的配置文件大多都使用的是xxxx.xml文件</li>
<li>YAML：以数据为中心，配置数据的时候具有面向对象的特征；比json、xml等更适合做配置文件<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标记语言</span></span><br><span class="line"><span class="params">&lt;server&gt;</span></span><br><span class="line">    <span class="params">&lt;port&gt;</span><span class="number">8081</span><span class="params">&lt;/port&gt;</span></span><br><span class="line"><span class="params">&lt;/server&gt;</span></span><br><span class="line"><span class="comment">//YAML</span></span><br><span class="line">server</span><br><span class="line"><span class="symbol">    port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="YAML语法格式"><a href="#YAML语法格式" class="headerlink" title="YAML语法格式"></a>YAML语法格式</h3><h4 id="YAML基本语法"><a href="#YAML基本语法" class="headerlink" title="YAML基本语法"></a>YAML基本语法</h4><ul>
<li><code>key: value</code>表示一对键值对（冒号后面必须要有空格）</li>
<li>使用空格缩进表示层级关系</li>
<li>左侧缩进的空格数目不重要，只要同一层级元素左侧对齐即可</li>
<li>key与value大小写敏感<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">  contextPath: /info</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="YMAL常用写法"><a href="#YMAL常用写法" class="headerlink" title="YMAL常用写法"></a>YMAL常用写法</h4><ul>
<li><p>字面量：数值，字符串，布尔，日期</p>
<ul>
<li>字符串默认不用加上引号；<ul>
<li>使用双引号不会转义特殊字符，特殊字符最终会转成本来想表示含义输出<br><code>name: &quot;AA \n BBB&quot;</code>输出：<code>AA换行BBB</code></li>
<li>使用单引号会转义特殊字符，特殊字符当作一个普通字符串输出<br><code>name: &#39;AA \n BBB&#39;</code>输出<code>AA \n BBB</code></li>
</ul>
</li>
</ul>
</li>
<li><p>对象&amp;Map</p>
<ul>
<li><code>key: value</code> value存储对象，每个值换一行写，注意左对齐<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">emp:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">A</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">salary:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="string">//行内写法</span></span><br><span class="line"><span class="attr">emp:</span> <span class="string">&#123;lastName:</span> <span class="string">A,age:</span> <span class="number">18</span><span class="string">,salary:</span> <span class="number">10000</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>数组（List、Set）</p>
<ul>
<li>用<code>-值</code>表示数组中的一个元素<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fortes:</span></span><br><span class="line">  <span class="string">-java</span></span><br><span class="line">  <span class="string">-python</span></span><br><span class="line">  <span class="string">-hadoop</span></span><br><span class="line"></span><br><span class="line"><span class="string">//行内写法</span></span><br><span class="line"><span class="attr">fortes:</span> <span class="string">[java,python,hadoop]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="yaml配置文件注入值"><a href="#yaml配置文件注入值" class="headerlink" title="yaml配置文件注入值"></a>yaml配置文件注入值</h3><ul>
<li><p>编写JavaBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、@ConfigurationProperties 告诉SpringBoot将配置文件中对应属性的值，映射到这个组件类中,进行一一绑定</span></span><br><span class="line"><span class="comment">// prefix = "emp"：配置文件中的前缀名，哪个前缀与下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment">//2、@Component 必须将当前组件作为SpringBoot中的一个组件，才能使用容器提供的</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"emp"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Forte forte;</span><br><span class="line"></span><br><span class="line">    getter/setter/toString</span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Forte</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer time;</span><br></pre></td></tr></table></figure></li>
<li><p>如果出现提示处理器没有发现：<br>  <a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/TJPkm5OK2rek.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/TJPkm5OK2rek.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/TJPkm5OK2rek.png"></a><br>  在pom.xml导入配置文件处理器，然后重新运行测试类</p>
  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;!--导入配置文件处理器，在编写配置文件时就会提示--&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写<code>application.yml</code>配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">emp:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">28</span></span><br><span class="line">  <span class="attr">salary:</span> <span class="number">20000</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birthday:</span> <span class="number">1991</span><span class="string">/10/10</span></span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="attr">key1:</span> <span class="string">value1</span></span><br><span class="line">    <span class="attr">key2:</span> <span class="string">value2</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">one</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">two</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">three</span></span><br><span class="line">  <span class="attr">forte:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">java</span></span><br><span class="line">    <span class="attr">time:</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用spring boot单元测试类进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01HelloInitApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Emp emp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台会输出设置好的emp的值<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/XGkmvXeXz3Ax.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/XGkmvXeXz3Ax.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/XGkmvXeXz3Ax.png"></a></p>
</li>
</ul>
<h3 id="properties-配置文件注入值"><a href="#properties-配置文件注入值" class="headerlink" title="properties 配置文件注入值"></a>properties 配置文件注入值</h3><ul>
<li>将<code>application.yml</code>配置文件中的内容注释掉</li>
<li>编写<code>application.properties</code>配置文件<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#emp配置的值</span></span><br><span class="line"><span class="string">emp.last-name=李四</span></span><br><span class="line"><span class="string">emp.age=30</span></span><br><span class="line"><span class="string">emp.birthday=1989/9/12</span></span><br><span class="line"><span class="string">emp.boss=false</span></span><br><span class="line"><span class="string">emp.salary=230000</span></span><br><span class="line"><span class="string">emp.map.key1=value1</span></span><br><span class="line"><span class="string">emp.map.key2=value2</span></span><br><span class="line"><span class="string">emp.list=one,two,three</span></span><br><span class="line"><span class="string">emp.forte.name=python</span></span><br><span class="line"><span class="string">emp.forte.time=3</span></span><br></pre></td></tr></table></figure>
<a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/6fSsD^z61Ou1.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/6fSsD%5Ez61Ou1.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/6fSsD^z61Ou1.png"></a></li>
<li>运行后，发现控制台出现中午乱码 进行如下设置重新输入中文值就不会出现乱码<br><a href="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/2n6cKMLyA7U7.png" target="_blank" rel="noopener"><img src="https://gitee.com/qkget233/images/raw/master/%E5%85%A8%E5%A5%97SpringBoot%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/2n6cKMLyA7U7.png" alt="https://gitee.com/qkget233/images/raw/master/全套SpringBoot入门到项目实战课程/2n6cKMLyA7U7.png"></a></li>
</ul>
]]></content>
      <categories>
        <category>spring-boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
</search>
